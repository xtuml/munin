version: "3.9"
volumes:
  ConanCache:
    name: ConanCache
    external: true

services:
  jm_proc:
    image: levistarrett/masl-dev:${MASL_VERSION:-latest}
    deploy:
      replicas: 1
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - type: volume
        source: ConanCache
        target: /conan-cache
      - "../models/PV_PROC/build:/work/build"
      - "../models/PV_PROC/schedule:/root/schedule"
      - "./config:/root/config"
    ulimits:
      sigpending: -1
    logging:
      driver: local
    working_dir: /root
    command: bash -c "source /work/build/Release/generators/conanrun.sh && export LD_LIBRARY_PATH=$${LD_LIBRARY_PATH}:/work/build/Release/lib && /work/build/Release/bin/JM_PROC_transient -log-config config/log-pv-files.properties -configFile ${CONFIG_FILE:-pv-config.json} -util Kafka -kafka-broker-list kafka:9093 -kafka-group-id PVKafkaGroup -util MetaData"

  istore_proc:
    image: levistarrett/masl-dev:${MASL_VERSION:-latest}
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - type: volume
        source: ConanCache
        target: /conan-cache
      - "../models/PV_PROC/build:/work/build"
      - "../models/PV_PROC/schedule:/root/schedule"
      - "./config:/root/config"
      - "./InvariantStore:/root/InvariantStore"
    ulimits:
      sigpending: -1
    logging:
      driver: local
    working_dir: /root
    command: bash -c "source /work/build/Release/generators/conanrun.sh && export LD_LIBRARY_PATH=$${LD_LIBRARY_PATH}:/work/build/Release/lib && /work/build/Release/bin/ISTORE_PROC_sqlite -db ./InvariantStore/InvariantStore.db -log-config config/log-pv-files.properties -util Kafka -kafka-broker-list kafka:9093 -kafka-offset-reset latest -util MetaData"

  aeo_svdc_proc:
    image: levistarrett/masl-dev:${MASL_VERSION:-latest}
    deploy:
      replicas: 1
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - type: volume
        source: ConanCache
        target: /conan-cache
      - "../models/PV_PROC/build:/work/build"
      - "../models/PV_PROC/schedule:/root/schedule"
      - "./logs/protocol_verifier:/var/log/protocol_verifier"    
      - "./config:/root/config"
    ulimits:
      sigpending: -1
    logging:
      driver: local
    working_dir: /root
    command: bash -c "source /work/build/Release/generators/conanrun.sh && export LD_LIBRARY_PATH=$${LD_LIBRARY_PATH}:/work/build/Release/lib && /work/build/Release/bin/AEO_SVDC_PROC_transient -log-config config/log-pv-files.properties -configFile ${CONFIG_FILE:-pv-config.json} -util Kafka -kafka-broker-list kafka:9093 -kafka-offset-reset latest -util MetaData"

  http_server:
    image: "ghcr.io/xtuml/charon:v0.1.0"
    environment:
      - GIN_MODE=release
    volumes:
      - "./config/job_definitions:/data/aeo_svdc_config/job_definitions"
      - "./logs/protocol_verifier:/data/logs/verifier"
      - "./logs/protocol_verifier:/data/logs/reception"
    ports:
      - 9000:9000
    command: "-path=/data"

  zookeeper:
    image: levistarrett/zookeeper:3.4.6
    ports:
      - "2181:2181"

  kafka:
    image: levistarrett/kafka:${PV_HOST_CPUTYPE:-latest}
    ports:
      - "9092:9092"
    expose:
      - "9093"
    healthcheck:
      test: /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9093 --topic Protocol_Verifier_Reception,AEOrdering_service0,IStore_service0 --describe
      interval: 10s
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://172.31.13.129:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_RETENTION_MS: 300000                  # default retention of 5 minutes
      KAFKA_LOG_SEGMENT_BYTES: 1048576                # roll the log at 1MB
      # KAFKA_LOG_ROLL_MS: 60000                      # roll the log every minute
      KAFKA_LOG_SEGMENT_DELETE_DELAY_MS: 1            # delete immediately after log roll
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 10000    # check the retention condition every 10 seconds
      KAFKA_CREATE_TOPICS: "Protocol_Verifier_Reception:1:1,Protocol_Verifier_InfoWarn:1:1,Protocol_Verifier_Statistics:1:1,Protocol_Verifier_VGateway:1:1,BenchmarkingProbe_service0:1:1,JobManagement_service0:1:1,JobManagement_service1:1:1,JobManagement_service2:1:1,JobManagement_service3:1:1,JobManagement_service4:1:1,JobManagement_service5:1:1,JobManagement_service6:1:1,JobManagement_service7:1:1,AEOrdering_service0:1:1,AEOrdering_service1:1:1,AEOrdering_service2:1:1,AEOrdering_service3:1:1,AEOrdering_service4:1:1,AEOrdering_service5:1:1,AEOrdering_service6:1:1,AEOrdering_service7:1:1,AEOrdering_service8:1:1,AEOrdering_service9:1:1,AEOrdering_service10:1:1,AESequenceDC_service12:1:1,AESequenceDC_service29:1:1,AESequenceDC_service31:1:1,IStore_service0:1:1,IStore_service1:1:1,IStore_service2:1:1,IStore_service3:1:1,IStore_service4:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka_config:
    image: levistarrett/kafka:${PV_HOST_CPUTYPE:-latest}
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - "./config:/root/config"
    command: /root/config/configure-kafka.sh
# BEGIN ANSIBLE MANAGED BLOCK
# indent comment
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
# END ANSIBLE MANAGED BLOCK
