//! ACTIVITY BEGIN. 'b82014bd-59c5-4b44-92c8-d395bc5adc1f' DO NOT EDIT THIS LINE.
private service StatementParser::testParser () is
plusStatements: string;
fileName: Filesystem::filename := "testFiles/Job1.puml";
jobId: integer := 1;
reportedStatement:  instance of _TEST_Consumer_nextStatement;
fileVerified:  instance of _TEST_Consumer_fileVerified;
reportedStatements: set of instance of _TEST_Consumer_nextStatement;
begin

    Test::service_event_queue(); // included to assure the 'Test' domain is included in the build

    Assertions::assertTrue(Filesystem::file_exists(fileName), "StatementParser::testParser - file does not exist " & string(fileName));
	plusStatements := Filesystem::read_file(fileName);
	validateStatements(jobId, plusStatements);
	fileVerified := find_one _TEST_Consumer_fileVerified();
	Assertions::assertTrue(fileVerified.validFile, "StatementParser::testParser - file verification failed " & string(fileName) & ", failure reason = " & fileVerified.failureReason);
    getJobAndApps(jobId);
    getNextStatement(jobId);
    reportedStatement := find_one _TEST_Consumer_nextStatement(allStatementsProcessed = true);
    while reportedStatement = null loop
        getNextStatement(jobId);
        reportedStatement := find_one _TEST_Consumer_nextStatement(allStatementsProcessed = true);
    end loop;
    reportedStatements := find _TEST_Consumer_nextStatement();
    Assertions::assertTrue(reportedStatements'length = 21, "Wrong number of statements parsed: " & reportedStatements'length'image);
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

