//! ACTIVITY BEGIN. '14e23c4a-6e60-4ee7-addc-6dd33f712fd2' DO NOT EDIT THIS LINE.
public instance service StatementParser::Line.processLine ( valid : out boolean,
                                                           failureReason : out string ) is
logMessage : string;
lineToken : instance of LineToken;
grammarType : instance of GrammarType;
statementType : instance of StatementType;
grammarInStatement : instance of GrammarInStatement;
grammarItem : instance of GrammarItem;
prevGrammarItem : instance of GrammarItem;
applicationNames : sequence of instance of GrammarItem;
grammarItems : sequence of instance of GrammarItem;
appOrActor : instance of GrammarItem;

begin
	
	logMessage := "StatementParser::Line.processLine";
	Logger::log(Logger::Information, "StatementParser", logMessage);
	
	// identify the statement type
	lineToken := this -> R13.LineToken;
	grammarType := find_one GrammarType(grammarName = Strings::to_lower_case(lineToken.token));
	if grammarType = null then
		// the only item of grammar that identifies the statement type but is not the first word is "->" indicating an event
		lineToken := find_one (this -> R1.LineToken)(token = "->");
		if lineToken /= null then
			grammarType := find_one GrammarType(grammarName = lineToken.token);
		end if;
	end if;
	if grammarType /= null then
		statementType := grammarType -> R8.StatementType;
		link statementType R2 this;
		// now validate the tokens supplied are in the correct order
		grammarInStatement := statementType -> R14.GrammarInStatement;
		lineToken := this -> R13.LineToken;
		valid :=  true;
		while grammarInStatement /= null loop
			if lineToken = null then
				valid := false;
				failureReason := "Invalid number of tokens for line: " & this.lineText;
				exit;
			end if;
			grammarType := grammarInStatement -> R3.GrammarType;
			case grammarType.grammarDefinitionType is
				when GrammarDefinitionType.KEYWORD | GrammarDefinitionType.CONTROL =>
					if grammarType.grammarName = Strings::to_lower_case(lineToken.token) then
						grammarItem := create unique GrammarItem(itemValue => lineToken.token);
					else
						valid := false;
						failureReason := "Invalid grammar for line: " & this.lineText;
						exit;
					end if;
				when GrammarDefinitionType.VARIABLE =>
					grammarItem := create unique GrammarItem(itemValue => lineToken.token);
					// if this is an event the sending application and the receiving application should exist
					if statementType.statementName = "audit event" then
						// locate the application
						grammarItems := this -> R11.Job -> R11.Line -> R5.GrammarItem;
						if grammarType.grammarName = "sendingApplication" or grammarType.grammarName = "receivingApplication" then
							appOrActor := find_one grammarItems((grammarName = "startEndName" or grammarName ="applicationName") and itemValue = grammarItem.itemValue);
							if appOrActor = null then
								valid := false;
								failureReason := "Unknown application for event: " & this.lineText;
								exit;
							end if;
						end if;
					end if;
			end case;
			link grammarItem R4 grammarType;
			link grammarItem R5 this;
			if prevGrammarItem /= null then
				link grammarItem R7.follows prevGrammarItem;
			else
				link grammarItem R15 this;
			end if;
			prevGrammarItem := grammarItem;
			lineToken := lineToken -> R10.isFollowedBy.LineToken;
			grammarInStatement := grammarInStatement -> R6.precedes.GrammarInStatement;
		end loop;
	end if;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

