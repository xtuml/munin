private service JobManagement::testAssignJobQueue () is
workerId : UUID::formatted_uuid;
jmSpec : instance of JobManagementSpec;
reportedAuditEventString : string;
reportedAuditEventString8 : string;
reportedAuditEventString9 : string;
jobId1 : string;
jobId2 : string;
jobId3 : string;
jobId4 : string;
jobId5 : string;
jobId6 : string;
jobId7 : string;
jobId8 : string;
jobId9 : string;
jobId10 : string;
unassignedJob : instance of UnassignedJob;
auditEvent : instance of AuditEvent;
jobManager : instance of JobManager;
worker1 : instance of JobWorker;
worker2 : instance of JobWorker;
worker3 : instance of JobWorker;
worker4 : instance of JobWorker;
workerJobCompletionConfirmed : instance of _TEST_Worker_jobCompletionConfirmed;

begin
	
	// clear domian
	JobManagement::clearDomain();
	
	// set the max jobs per worker at two
	jmSpec := find_one JobManagementSpec();
	jmSpec.maxJobsPerWorker := 1;
	
	// create four workers
	workerId := UUID::generate_formatted();
	JobManagement::registerWorker(workerId);
	Test::service_event_queue();
	workerId := UUID::generate_formatted();
	JobManagement::registerWorker(workerId);
	Test::service_event_queue();
	workerId := UUID::generate_formatted();
	JobManagement::registerWorker(workerId);
	Test::service_event_queue();
	workerId := UUID::generate_formatted();
	JobManagement::registerWorker(workerId);
	Test::service_event_queue();
	Assertions::assertTrue(((find JobWorker())'length = 4), "Test Assign Job Queue: Failed to find all workers");
	jobManager := find_one JobManager();
	worker1 := jobManager -> R22.JobWorker; 
	worker2 := worker1 -> R3.employedBefore.JobWorker;
	worker3 := worker2 -> R3.employedBefore.JobWorker;
	worker4 := worker3 -> R3.employedBefore.JobWorker;

	// add four jobs, check all workers have a job assigned and the next worker to assign is worker 1
	Assertions::assertTrue(((jobManager -> R4.JobWorker) = worker1), "Test Assign Job Queue: Next worker to assign is worker 1");
	jobId1 := string(UUID::generate_formatted());
	JobManagement::sendAuditEvent(jobId1, reportedAuditEventString);
	JobManagement::checkJobEventAssignment("JobId1", jobId1, reportedAuditEventString, worker1.workerId);
	Assertions::assertTrue(((jobManager -> R4.JobWorker) = worker2), "Test Assign Job Queue: Next worker to assign is worker 2");
	jobId2 := string(UUID::generate_formatted());
	JobManagement::sendAuditEvent(jobId2, reportedAuditEventString);
	JobManagement::checkJobEventAssignment("JobId2", jobId2, reportedAuditEventString, worker2.workerId);
	Assertions::assertTrue(((jobManager -> R4.JobWorker) = worker3), "Test Assign Job Queue: Next worker to assign is worker 3");
	jobId3 := string(UUID::generate_formatted());
	JobManagement::sendAuditEvent(jobId3, reportedAuditEventString);
	JobManagement::checkJobEventAssignment("JobId3", jobId3, reportedAuditEventString, worker3.workerId);
	Assertions::assertTrue(((jobManager -> R4.JobWorker) = worker4), "Test Assign Job Queue: Next worker to assign is worker 4");
	jobId4 := string(UUID::generate_formatted());
	JobManagement::sendAuditEvent(jobId4, reportedAuditEventString);
	JobManagement::checkJobEventAssignment("JobId4", jobId4, reportedAuditEventString, worker4.workerId);
	Assertions::assertTrue(((jobManager -> R4.JobWorker) = worker1), "Test Assign Job Queue: Next worker to assign is worker 1");
	
	// complete job1, add job5 and check it is assigned to worker 1
	JobManagement::jobCompleted(worker1.workerId, jobId1);
	Test::service_event_queue();
	workerJobCompletionConfirmed := find_one _TEST_Worker_jobCompletionConfirmed(workerId = worker1.workerId and jobId = jobId1);
	Assertions::assertTrue((workerJobCompletionConfirmed /= null), "Test Assign Job Queue: Failed to find completed job for job 1");	
	jobId5 := string(UUID::generate_formatted());
	JobManagement::sendAuditEvent(jobId5, reportedAuditEventString);
	JobManagement::checkJobEventAssignment("JobId5", jobId5, reportedAuditEventString, worker1.workerId);
	Assertions::assertTrue(((jobManager -> R4.JobWorker) = worker2), "Test Assign Job Queue: Next worker to assign is worker 2");
	
	// complete job4, add job6 and check it is assigned to worker 4
	JobManagement::jobCompleted(worker4.workerId, jobId4);
	Test::service_event_queue();
	workerJobCompletionConfirmed := find_one _TEST_Worker_jobCompletionConfirmed(workerId = worker4.workerId and jobId = jobId4);
	Assertions::assertTrue((workerJobCompletionConfirmed /= null), "Test Assign Job Queue: Failed to find completed job for job 4");	
	jobId6 := string(UUID::generate_formatted());
	JobManagement::sendAuditEvent(jobId6, reportedAuditEventString);
	JobManagement::checkJobEventAssignment("JobId6", jobId6, reportedAuditEventString, worker4.workerId);
	Assertions::assertTrue(((jobManager -> R4.JobWorker) = worker1), "Test Assign Job Queue: Next worker to assign is worker 1");
	
	// complete job2, add job7 and check it is assigned to worker 2
	JobManagement::jobCompleted(worker2.workerId, jobId2);
	Test::service_event_queue();
	workerJobCompletionConfirmed := find_one _TEST_Worker_jobCompletionConfirmed(workerId = worker2.workerId and jobId = jobId2);
	Assertions::assertTrue((workerJobCompletionConfirmed /= null), "Test Assign Job Queue: Failed to find completed job for job 2");	
	jobId7 := string(UUID::generate_formatted());
	JobManagement::sendAuditEvent(jobId7, reportedAuditEventString);
	JobManagement::checkJobEventAssignment("JobId7", jobId7, reportedAuditEventString, worker2.workerId);
	Assertions::assertTrue(((jobManager -> R4.JobWorker) = worker3), "Test Assign Job Queue: Next worker to assign is worker 3");
	
	// add job8, job9 and check they are unassigned
	jobId8 := string(UUID::generate_formatted());
	JobManagement::sendAuditEvent(jobId8, reportedAuditEventString8);
	unassignedJob := find_one UnassignedJob(jobId = jobId8);
	Assertions::assertTrue((unassignedJob /= null), "Test Assign Job Queue: Failed to find unassigned job for job 8");	
	auditEvent := find_one AuditEvent(auditEvent = reportedAuditEventString8);
	Assertions::assertTrue((auditEvent = (find_one (unassignedJob -> R5.Job -> R7.AuditEvent)(auditEvent = reportedAuditEventString8))), "Test Assign Job Queue: Failed to find audit event for job 8");
	jobId9 := string(UUID::generate_formatted());
	JobManagement::sendAuditEvent(jobId9, reportedAuditEventString9);
	unassignedJob := find_one UnassignedJob(jobId = jobId9);
	Assertions::assertTrue((unassignedJob /= null), "Test Assign Job Queue: Failed to find unassigned job for job 9");	
	auditEvent := find_one AuditEvent(auditEvent = reportedAuditEventString9);
	Assertions::assertTrue((auditEvent = (find_one (unassignedJob -> R5.Job -> R7.AuditEvent)(auditEvent = reportedAuditEventString9))), "Test Assign Job Queue: Failed to find audit event for job 9");
	
	// complete job3 and check that job8 is assigned to worker 3
	JobManagement::jobCompleted(worker3.workerId, jobId3);
	Test::service_event_queue();
	workerJobCompletionConfirmed := find_one _TEST_Worker_jobCompletionConfirmed(workerId = worker3.workerId and jobId = jobId3);
	Assertions::assertTrue((workerJobCompletionConfirmed /= null), "Test Assign Job Queue: Failed to find completed job for job 3");	
	JobManagement::checkJobEventAssignment("JobId8", jobId8, reportedAuditEventString8, worker3.workerId);
	Assertions::assertTrue(((jobManager -> R4.JobWorker) = worker3), "Test Assign Job Queue: Next worker to assign is worker 3");
	
	// complete job5 and check that job 9 is assigned to worker 1
	JobManagement::jobCompleted(worker1.workerId, jobId5);
	Test::service_event_queue();
	workerJobCompletionConfirmed := find_one _TEST_Worker_jobCompletionConfirmed(workerId = worker1.workerId and jobId = jobId5);
	Assertions::assertTrue((workerJobCompletionConfirmed /= null), "Test Assign Job Queue: Failed to find completed job for job 5");	
	JobManagement::checkJobEventAssignment("JobId9", jobId9, reportedAuditEventString9, worker1.workerId);
	Assertions::assertTrue(((jobManager -> R4.JobWorker) = worker3), "Test Assign Job Queue: Next worker to assign is worker 3");
	
	// complete job6 and check that worker 4 has no assigned job
	JobManagement::jobCompleted(worker4.workerId, jobId6);
	Test::service_event_queue();
	workerJobCompletionConfirmed := find_one _TEST_Worker_jobCompletionConfirmed(workerId = worker4.workerId and jobId = jobId6);
	Assertions::assertTrue(((worker4 -> R2.EmployedWorker -> R6.AssignedJob)'length = 0), "Test Assign Job Queue: Worker 4 has no assigned jobs");	
	Assertions::assertTrue(((jobManager -> R4.JobWorker) = worker3), "Test Assign Job Queue: Next worker to assign is worker 3");
	
	// complete job 7 and check worker 2 has no assigned job
	JobManagement::jobCompleted(worker2.workerId, jobId7);
	Test::service_event_queue();
	workerJobCompletionConfirmed := find_one _TEST_Worker_jobCompletionConfirmed(workerId = worker2.workerId and jobId = jobId7);
	Assertions::assertTrue(((worker2 -> R2.EmployedWorker -> R6.AssignedJob)'length = 0), "Test Assign Job Queue: Worker 2 has no assigned jobs");	
	Assertions::assertTrue(((jobManager -> R4.JobWorker) = worker3), "Test Assign Job Queue: Next worker to assign is worker 3");
	
	// add job 10, check that it is assigned to worker 4 and the next worker to assign is worker 1
	jobId10 := string(UUID::generate_formatted());
	JobManagement::sendAuditEvent(jobId10, reportedAuditEventString);
	JobManagement::checkJobEventAssignment("JobId10", jobId10, reportedAuditEventString, worker4.workerId);
	Assertions::assertTrue(((jobManager -> R4.JobWorker) = worker1), "Test Assign Job Queue: Next worker to assign is worker 1");

end service;
