private service JobManagement::jobCompleted ( workerId: in UUID::formatted_uuid,
                                              jobId: in string ) is
employedWorker : instance of EmployedWorker;
assignedJob : instance of AssignedJob;
job : instance of Job;
auditEvents : sequence of instance of AuditEvent;
jobManager : instance of JobManager;
unassignedJobIds : sequence of string;

begin
	
	// locate the worker and check they are not retired
	employedWorker := find_one EmployedWorker(workerId = workerId);
	if employedWorker /= null then
		// find the job and check it was assigned to this worker
		assignedJob := find_one (employedWorker -> R6.AssignedJob)(jobId = jobId);
		if assignedJob /= null then
			// add the job to the job store
			JobStore.addJobToStore(jobId);
			
			// remove the job and the events
			job := assignedJob -> R5.Job;
			auditEvents := job -> R7.AuditEvent;
			unlink auditEvents R7;
			delete auditEvents;
			unlink assignedJob R5 job;
			unlink assignedJob R6;
			delete assignedJob;
			delete job;
			
			// report that the job completion is confirmed
			Worker ~>jobCompletionConfirmed(workerId, jobId);
			// check if there are not unassigned jobs and if there are and this employed worker has capacity then assign the job
			jobManager := find_one JobManager();
			unassignedJobIds := jobManager.unassignedJobIds;
			if unassignedJobIds'length > 0 then
				jobManager.assignJob(employedWorker);
			end if;
		end if;
	end if;
		
end service;
