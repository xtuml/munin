private service JobManagement::testDeregisterWorker () is
workerId : UUID::formatted_uuid;
jmSpec : instance of JobManagementSpec;
reportedAuditEventString1 : string;
reportedAuditEventString2 : string;
jobId1 : string;
jobId2 : string;
unassignedJob : instance of UnassignedJob;
jobManager : instance of JobManager;
worker1 : instance of JobWorker;
worker2 : instance of JobWorker;
worker3 : instance of JobWorker;
workerUnregistered : instance of _TEST_Worker_workerUnregistered;
retiredWorker : instance of RetiredWorker;
workerJobCompletionConfirmed : instance of _TEST_Worker_jobCompletionConfirmed;

begin
	
	// clear domian
	JobManagement::clearDomain();
	
	// set the max jobs per worker at two
	jmSpec := find_one JobManagementSpec();
	jmSpec.maxJobsPerWorker := 1;
	
	// create three workers
	workerId := UUID::generate_formatted();
	JobManagement::registerWorker(workerId);
	Test::service_event_queue();
	workerId := UUID::generate_formatted();
	JobManagement::registerWorker(workerId);
	Test::service_event_queue();
	workerId := UUID::generate_formatted();
	Assertions::assertTrue(((find JobWorker())'length = 2), "Test Deregister Worker: Failed to find all workers");
	jobManager := find_one JobManager();
	worker1 := jobManager -> R22.JobWorker; 
	worker2 := worker1 -> R3.employedBefore.JobWorker;
	
	// send in an event for the first job and verify it is assigned correctly
	jobId1 := string(UUID::generate_formatted());
	JobManagement::sendAuditEvent(jobId1, reportedAuditEventString1);
	JobManagement::checkJobEventAssignment("JobId1", jobId1, reportedAuditEventString1, worker1.workerId);
	
	// send in a event for the second job and verify it is assigned correctly
	jobId2 := string(UUID::generate_formatted());
	JobManagement::sendAuditEvent(jobId2, reportedAuditEventString2);
	JobManagement::checkJobEventAssignment("JobId2", jobId2, reportedAuditEventString2, worker2.workerId);
	
	// deregister worker 1 and check the job is unassigned
	JobManagement::deregisterWorker(worker1.workerId);
	Test::service_event_queue();
	workerUnregistered := find_one _TEST_Worker_workerUnregistered(workerId = worker1.workerId);
	Assertions::assertTrue((workerUnregistered /= null), "Test Deregister Worker: Failed to find report for worker unregistered");
	retiredWorker := find_one RetiredWorker(workerId = worker1.workerId);
	Assertions::assertTrue((retiredWorker /= null), "Test Deregister Worker: Failed to find retired worker");
	unassignedJob := find_one UnassignedJob(jobId = jobId1);
	Assertions::assertTrue((unassignedJob /= null), "Test Deregister Worker: Failed to find unassigned job");
	
	// register a new worker and check the job is assigned
	workerId := UUID::generate_formatted();
	JobManagement::registerWorker(workerId);
	Test::service_event_queue();
	worker3 := worker2 -> R3.employedBefore.JobWorker;
	JobManagement::checkJobEventAssignment("JobId1", jobId1, reportedAuditEventString1, worker3.workerId);
	
	// complete job 1
	JobManagement::jobCompleted(worker3.workerId, jobId1);
	Test::service_event_queue();
	workerJobCompletionConfirmed := find_one _TEST_Worker_jobCompletionConfirmed(workerId = worker3.workerId and jobId = jobId1);
	
	// deregister worker 2 and check the job is assigned to worker 3
	JobManagement::deregisterWorker(worker2.workerId);
	Test::service_event_queue();
	workerUnregistered := find_one _TEST_Worker_workerUnregistered(workerId = worker2.workerId);
	Assertions::assertTrue((workerUnregistered /= null), "Test Deregister Worker: Failed to find report for worker unregistered");
	retiredWorker := find_one RetiredWorker(workerId = worker2.workerId);
	Assertions::assertTrue((retiredWorker /= null), "Test Deregister Worker: Failed to find retired worker");
	JobManagement::checkJobEventAssignment("JobId2", jobId2, reportedAuditEventString2, worker3.workerId);
	

end service;
