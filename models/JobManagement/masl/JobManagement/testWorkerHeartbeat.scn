private service JobManagement::testWorkerHeartbeat () is
workerId : UUID::formatted_uuid;
worker : instance of JobWorker;
workerRegistered : instance of _TEST_Worker_workerRegistered;
workerUnregistered : instance of _TEST_Worker_workerUnregistered;
employedWorker : instance of EmployedWorker;
retiredWorker : instance of RetiredWorker;

begin
	
	// clear domian
	JobManagement::clearDomain();
	
	// send a heartbeat for an unregistered worker
	workerId := UUID::generate_formatted();
	JobManagement::workerHeartbeat(workerId);
	Test::service_event_queue();
	workerUnregistered := find_one _TEST_Worker_workerUnregistered(workerId = workerId);
	Assertions::assertTrue((workerUnregistered /= null), "Test Worker Hearbeat: Failed to find Unregistered Worker");

	// register a worker
	JobManagement::registerWorker(workerId);
	Test::service_event_queue();
	
	// check that the worker has been informed it is registered
	workerRegistered := find_one _TEST_Worker_workerRegistered(workerId = workerId);
	Assertions::assertTrue((workerRegistered /= null), "Test Worker Hearbeat: Failed to find Registered Worker");
	
	// report the worker heartbeat
	JobManagement::workerHeartbeat(workerId);
	Test::service_event_queue();
	employedWorker := find_one EmployedWorker(workerId = workerId);	
	Assertions::assertTrue((employedWorker.failedHeartbeatCount = 0), "Test Worker Hearbeat: Registered Worker heartbeat failure count not zero");
	
	// fire the absence timer and verify the failure count is updated
	Test::fire_scheduled_timers(timestamp'now + duration'minutes(1));
	employedWorker := find_one EmployedWorker(workerId = workerId);	
	Assertions::assertTrue((employedWorker.failedHeartbeatCount = 1), "Test Worker Hearbeat: Registered Worker heartbeat failure count not incremented");

	// report the worker heartbeat and check the failure count is reset
	JobManagement::workerHeartbeat(workerId);
	Test::service_event_queue();
	employedWorker := find_one EmployedWorker(workerId = workerId);	
	Assertions::assertTrue((employedWorker.failedHeartbeatCount = 0), "Test Worker Hearbeat: Registered Worker heartbeat failure count not reset");
	
	// fire the absence timer to exceed the threshold and verify that the worker is unregistered
	Test::fire_scheduled_timers(timestamp'now + duration'minutes(1));
	Test::fire_scheduled_timers(timestamp'now + duration'minutes(1));
	Test::fire_scheduled_timers(timestamp'now + duration'minutes(1));
	Assertions::assertTrue((employedWorker.failedHeartbeatCount = 3), "Test Worker Hearbeat: Registered Worker heartbeat failure count not incremented");
	Test::fire_scheduled_timers(timestamp'now + duration'minutes(1));
	workerUnregistered := find_one _TEST_Worker_workerUnregistered(workerId = workerId);
	Assertions::assertTrue((workerUnregistered /= null), "Test Worker Hearbeat: Failed to find Unregistered Worker after heartbeat threshold exceeded");
	retiredWorker := find_one RetiredWorker(workerId = workerId);
	Assertions::assertTrue((retiredWorker /= null), "Test Worker Hearbeat: Failed to find Retired Worker after heartbeat threshold exceeded");
	
end service;
