//! ACTIVITY BEGIN. '1a20be36-52a8-4bb8-b192-0c81141e29ae' DO NOT EDIT THIS LINE.
public service JobManagement::registerWorker ( workerId : in UUID::formatted_uuid ) is
jobWorker : instance of JobWorker;
employedWorker : instance of EmployedWorker;
retiredWorker : instance of RetiredWorker;
kvps : dictionary of string;

begin

	if (Logger::enabled(Logger::Debug, "pv.jm.registerworker")) then
		kvps["workerId"] := string(workerId);
		Logger::log(Logger::Debug, "pv.jm.registerworker",
			jmLog("jobmanagement_worker_register_worker", "register worker request", kvps));
	end if;
	// check if this is a new worker
	jobWorker := find_one JobWorker(workerId = workerId);
	if jobWorker = null then
		JobWorker.createWorker(workerId);
	else
		// not a new worker so is the worker retired
		retiredWorker := jobWorker -> R2.RetiredWorker;
		if retiredWorker /= null then
			// worker retired so put back into employment
			jobWorker.employWorker();
		else
			// worker thinks it is not registered so deregister forcing 
			// all in progress jobs to be reassigned.
			employedWorker := jobWorker -> R2.EmployedWorker;
			if employedWorker.working = true then
				generate EmployedWorker.workerDeregistered() to employedWorker;
				kvps["workerId"] := string(employedWorker.workerId);
				Logger::log(Logger::Information, "pv.jm.registerworker",
					jmLog("jobmanagement_worker_deregistered_register_request", "(re)register retired worker", kvps));
			end if;
		end if;
	end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '0fb0455c-728d-4b65-8673-2eedf8a4ec9b' DO NOT EDIT THIS LINE.
public service JobManagement::workerHeartbeat ( workerId : in UUID::formatted_uuid ) is
employedWorker : instance of EmployedWorker;

begin
	// locate the worker
	employedWorker := find_one EmployedWorker(workerId = workerId);
	if employedWorker /= null then
		generate EmployedWorker.workerPresent() to employedWorker;
	else
		Worker~>workerUnregistered(workerId);
	end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2c4a7088-e8df-4d3e-bf4c-8ea74c88aa8b' DO NOT EDIT THIS LINE.
public service JobManagement::acceptEvent ( auditEvent : in string ) is
begin
    AuditEvent.acceptAuditEvents(auditEvent);
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'd64e9daf-e005-46ed-8216-8cc7bf43d3b1' DO NOT EDIT THIS LINE.
public service JobManagement::jobCompleted ( workerId : in UUID::formatted_uuid,
                                            jobId : in string ) is
employedWorker : instance of EmployedWorker;
assignedJob : instance of AssignedJob;
job : instance of Job;
auditEvents : sequence of instance of AuditEvent;
jobManager : instance of JobManager;
eventContent : string;

begin
	
	// locate the worker and check they are not retired
	employedWorker := find_one EmployedWorker(workerId = workerId);
	if employedWorker /= null then
		// find the job and check it was assigned to this worker
		assignedJob := find_one (employedWorker -> R6.AssignedJob)(jobId = jobId);
		if assignedJob /= null then
			
			// remove the job and the events
			job := assignedJob -> R5.Job;
			auditEvents := job -> R7.AuditEvent;
			unlink auditEvents R7;
			delete auditEvents;
			unlink assignedJob R5 job;
			unlink assignedJob R6;
			delete assignedJob;
			delete job;
			
			// add the job to the job store
			(find_one JobStore()).addJobToStore(jobId);
			
			// report that the job completion is confirmed
			Worker ~>jobCompletionConfirmed(workerId, jobId);
						
			// we have had comms from the worker so reset the heartbeat failure count
			employedWorker.failedHeartbeatCount := 0;;
			
			// check if there are unassigned jobs and if there are and this employed worker has capacity then assign the job
			jobManager := find_one JobManager();
			if jobManager.unassignedJobIds'length > 0 then
				jobManager.assignJob(employedWorker);
			end if;
		end if;
	end if;
		
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'ff723fb4-c20f-4ab8-bc39-e807df00e8fc' DO NOT EDIT THIS LINE.
public service JobManagement::deregisterWorker ( workerId : in UUID::formatted_uuid ) is
employedWorker : instance of EmployedWorker;
kvps : dictionary of string;

begin

	// check if this is a new worker
	employedWorker := find_one EmployedWorker(workerId = workerId);
	if employedWorker /= null then
		generate EmployedWorker.workerDeregistered() to employedWorker;
		kvps["workerId"] := string(employedWorker.workerId);
		Logger::log(Logger::Information, "pv.jm.deregisterworker",
			jmLog("jobmanagement_worker_deregistered_deregister_request", "deregistering a worker", kvps));
	end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'd054a7ef-0dab-4814-be5c-99250450e2bb' DO NOT EDIT THIS LINE.
private service JobManagement::jmLog ( tag : in string,
                                      message : in string,
                                      key_value_pairs : in dictionary of string ) return string is
jsonElement : JSON::JSONElement;
key : string;
logMessageKeyValuePairs : dictionary of string;

begin
  logMessageKeyValuePairs["tag"] := tag;
  logMessageKeyValuePairs["message"] := message;
  for key in key_value_pairs'keys loop
    logMessageKeyValuePairs[key] := key_value_pairs[key];
  end loop;
  jsonElement := JSON::to_json( logMessageKeyValuePairs );
  return JSON::dump( jsonElement );
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

