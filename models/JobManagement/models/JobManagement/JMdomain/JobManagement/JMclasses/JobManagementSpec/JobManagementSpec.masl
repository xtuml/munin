//! ACTIVITY BEGIN. 'a047fd83-4215-488f-9f08-7f25eada71d2' DO NOT EDIT THIS LINE.
public instance service JobManagement::JobManagementSpec.loadConfigFile () is
kvps : dictionary of string;
fileName : Filesystem::filename;
configJSONString : string;
configJSONElement : JSON::JSONElement;
configJSONObject : JSON::JSONObject;
configValidationResult : JSON::JSONObject;
jobStore : instance of JobStore;
jobStoreName : string := "JobIdStore.log";
jobStoreAgeLimit : duration := @PT1H@;
reportFrequency : duration := @PT1S@;
jobManager : instance of JobManager;

begin
    
    // check the config file has not been removed
    fileName := Filesystem::filename(this.configFilePath & this.configFile);
    if Filesystem::file_exists(fileName) then
        // read the contents of the config file 
        configJSONString := Filesystem::read_file(fileName);
        configJSONElement := JSON::parse(configJSONString);
        configValidationResult := JSONValidation::validate(configJSONElement, Environment::getenv(Environment::variable_name("JM_CONFIG_SCHEMA_PATH")));
        if JSON::get_boolean(configValidationResult["valid"]) then
            // extract the spec data items
            configJSONObject := JSON::get_object(configJSONElement);
            if configJSONObject'contains("SpecUpdateRate") then
                this.specUpdateRate := duration'parse(JSON::get_string(configJSONObject["SpecUpdateRate"]));
            end if;
            if configJSONObject'contains("MaxJobsPerWorker") then
                this.maxJobsPerWorker := integer'parse(JSON::get_string(configJSONObject["MaxJobsPerWorker"]));
            end if;
            if configJSONObject'contains("MaxUnassignedJobs") then
                this.maxUnassignedJobs := integer'parse(JSON::get_string(configJSONObject["MaxUnassignedJobs"]));
            end if;
            if configJSONObject'contains("RetiredWorkerDeletionTime") then
                this.retiredWorkerDeletionTime := duration'parse(JSON::get_string(configJSONObject["RetiredWorkerDeletionTime"]));
            end if;
            if configJSONObject'contains("WorkerHeartbeatRate") then
                this.workerHeartbeatRate := duration'parse(JSON::get_string(configJSONObject["WorkerHeartbeatRate"]));
            end if;
            if configJSONObject'contains("WorkerHeartbeatFailureThreshold") then
                this.workerHeartbeatFailureThreshold := integer'parse(JSON::get_string(configJSONObject["WorkerHeartbeatFailureThreshold"]));
            end if;
            if configJSONObject'contains("JobStoreAgeLimit") then
                jobStoreAgeLimit := duration'parse(JSON::get_string(configJSONObject["JobStoreAgeLimit"]));
            end if;
            if configJSONObject'contains("ReportFrequency") then
                reportFrequency := duration'parse(JSON::get_string(configJSONObject["ReportFrequency"]));
                jobManager := find_one JobManager();
                if jobManager /= null then
                	jobManager.reportFrequency := reportFrequency;
                	cancel jobManager.reportTimer;
                	schedule jobManager.reportTimer generate JobManager.generateReport() to jobManager delay jobManager.reportFrequency;
                end if;
            end if;
        else
            Logger::log(Logger::Error, "pv.jm.jobmanagementspec.loadconfigfile", JSON::dump(configValidationResult, true));
            raise JSON::JSONException("Config file invalid");
        end if;
        // set the config file mod time
        this.configFileModificationTime := this.lastModificationTime();        
    else
        kvps["configFile"] := this.configFilePath & this.configFile;
        Logger::log(Logger::Error, "pv.jm.jobmanagementspec.loadconfigfile",
            jmLog("jobmanagement_no_config_file", "failed to locate config file", kvps));
    end if;
    
    // if the job store does not exist then create it
    jobStore := find_one JobStore();
    if jobStore = null then
    	jobStore := create unique JobStore(jobStoreAgeLimit => jobStoreAgeLimit, Current_State => Created);
    else
    	jobStore.jobStoreAgeLimit := jobStoreAgeLimit;
    end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '8b9190af-ba32-49e2-9e6b-4e21d11d6c50' DO NOT EDIT THIS LINE.
public instance service JobManagement::JobManagementSpec.checkUpdatedConfig () return boolean is
kvps : dictionary of string;
fileName : Filesystem::filename;
fileStatus : Filesystem::file_status;
configUpdates : boolean := false;

begin
    fileName := Filesystem::filename(this.configFilePath & this.configFile);
    if Filesystem::file_exists(fileName) then
        fileStatus := Filesystem::get_file_status(fileName);
	    if this.configFileModificationTime /= fileStatus.modification_time then
    	    this.configFileModificationTime := fileStatus.modification_time;
    	    configUpdates := true;
    	end if;
    else
        kvps["configFile"] := this.configFilePath & this.configFile;
        Logger::log(Logger::Error, "pv.jm.jobmanagementspec.checkupdatedconfig",
            jmLog("jobmanagement_no_config_file", "failed to locate config file", kvps));
    end if;
    if configUpdates = true then
    	return true; 
    else
    	return false;
    end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'd429370e-3ae3-4898-82d3-0b09d1b94e4d' DO NOT EDIT THIS LINE.
public instance service JobManagement::JobManagementSpec.lastModificationTime () return timestamp is
fileName: Filesystem::filename;
fileStatus: Filesystem::file_status;
mostRecentModificationTime: timestamp;
kvps: dictionary of string;

begin
    fileName := Filesystem::filename(this.configFilePath & this.configFile);
    if Filesystem::file_exists(fileName) then
        fileStatus := Filesystem::get_file_status(fileName);
        mostRecentModificationTime := fileStatus.modification_time;
    else
        kvps["configFile"] := this.configFilePath & this.configFile;
        Logger::log(Logger::Fatal, "pv.jm.jobmanagementspec.lastmodificationtime",
            jmLog("jobmanagement_no_config_file", "failed to locate config file", kvps));
        raise program_error;
    end if;
    return mostRecentModificationTime;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

