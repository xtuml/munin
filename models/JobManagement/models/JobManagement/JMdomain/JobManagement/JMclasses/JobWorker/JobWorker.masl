//! ACTIVITY BEGIN. '88ce096b-9281-49e4-ab6a-4d5d5d6546dd' DO NOT EDIT THIS LINE.
public service JobManagement::JobWorker.createWorker ( workerId : in UUID::formatted_uuid ) is
worker : instance of JobWorker;
jobManager : instance of JobManager;
lastEmployedWorker : instance of JobWorker;

begin
	
	jobManager := find_one JobManager();
	worker := create JobWorker(workerId => workerId, employmentDate => timestamp'now);
	link worker R1 jobManager;
	// check if this is the first employee
	if jobManager -> R22.JobWorker = null then
		link jobManager R22 worker;
	end if;
	// update last employee
	lastEmployedWorker := jobManager -> R21.JobWorker;
	if lastEmployedWorker /= null then
		unlink jobManager R21 lastEmployedWorker;
		link worker R3.employedAfter lastEmployedWorker; 
	end if;
	link worker R21 jobManager;
	// if the next worker is not assigned
	if jobManager -> R4.JobWorker = null then
		// assign the next worker
		link jobManager R4 worker;
	end if;
	worker.employWorker();
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'a1ef673a-e921-4e65-b841-375a09821315' DO NOT EDIT THIS LINE.
public instance service JobManagement::JobWorker.employWorker () is
retiredWorker : instance of RetiredWorker;
employedWorker : instance of EmployedWorker;

begin
  
  // if the worker is retired then remove the retired worker
  retiredWorker := this -> R2.RetiredWorker;
  if retiredWorker /= null then
  	unlink retiredWorker R2.JobWorker this;
  	delete retiredWorker;
  end if;
  // create the employed worker
  employedWorker := create EmployedWorker(workerId => this.workerId, Current_State => Created);
  link employedWorker R2 this;
  generate EmployedWorker.workerRegistered() to employedWorker;
  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'be5f8717-8c2d-4fe7-8f57-abd9ca26443e' DO NOT EDIT THIS LINE.
public instance service JobManagement::JobWorker.retireWorker () is
employedWorker : instance of EmployedWorker;
retiredWorker : instance of RetiredWorker;
unassignedJob : instance of UnassignedJob;
jobManager : instance of JobManager;
job : instance of Job;
assignedWorker : instance of EmployedWorker;
unassignedJobIds : sequence of string;

begin
	jobManager := find_one JobManager();
	employedWorker := this -> R2.EmployedWorker;
	if employedWorker /= null then
		// move any assigned jobs to unassigned and add back into queue
		for assignedJob in (employedWorker -> R6.AssignedJob) loop
			unlink employedWorker R6 assignedJob;
			job := assignedJob -> R5.Job; 
			unlink assignedJob R5 job;
			delete assignedJob;
			unassignedJob := create UnassignedJob(jobId => job.jobId);
			link unassignedJob R5.Job job;
			unassignedJobIds := jobManager.unassignedJobIds;
			unassignedJobIds := unassignedJobIds & job.jobId;
        	jobManager.unassignedJobIds := unassignedJobIds;        	
		end loop;
		// report the worker as unregistered
		Worker~>workerUnregistered(workerId);
		unlink employedWorker R2.JobWorker this;
		delete employedWorker;
	end if;
	// create the employed worker
	retiredWorker := create RetiredWorker(workerId => this.workerId);
	link retiredWorker R2 this;
    
    // if we have unassigned jobs attempt to assign
    if jobManager.unassignedJobIds'length > 0 then
    	assignedWorker := jobManager.selectWorkerForJob();
    	// if worker selected assign job
    	if assignedWorker /= null then
    		jobManager.assignJob(assignedWorker);
    	end if;
	end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

