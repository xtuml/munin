//! ACTIVITY BEGIN. 'fafa08f1-e2d9-4091-aa70-9f3e4eb2da3c' '8a8e1b1e-6574-45a9-8a10-51bd1335f84e' DO NOT EDIT THIS LINE.
state JobManagement::EmployedWorker.Created () is
begin
  null;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'fafa08f1-e2d9-4091-aa70-9f3e4eb2da3c' 'ffef72a4-885a-4183-9a8c-8b168eb341de' DO NOT EDIT THIS LINE.
state JobManagement::EmployedWorker.Registered () is
kvps : dictionary of string;

begin
  
	// report the worker as registered
	Worker~>workerRegistered(this.workerId);
	kvps["workerId"] := string(this.workerId);
	Logger::log(Logger::Information, "pv.jm.employedworker.created",
		jmLog("jobmanagement_worker_registered", "worker registered", kvps));
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'fafa08f1-e2d9-4091-aa70-9f3e4eb2da3c' 'bc75ebc5-b2f8-4898-b988-391519993ec5' DO NOT EDIT THIS LINE.
state JobManagement::EmployedWorker.Deregistered () is
begin
	
	// retire the worker
	this.working := false;
	(this -> R2.JobWorker).retireWorker();
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'fafa08f1-e2d9-4091-aa70-9f3e4eb2da3c' '30ee19e8-0252-4c72-adeb-fc162c3b2c7a' DO NOT EDIT THIS LINE.
state JobManagement::EmployedWorker.Absent () is
jmSpec : instance of JobManagementSpec;
kvps : dictionary of string;

begin
	// cancel the absence timer
	cancel this.absenceTimer;
	// reset the failed heartbeat count
	this.failedHeartbeatCount := this.failedHeartbeatCount + 1;
	jmSpec := find_one JobManagementSpec();
	if this.failedHeartbeatCount > jmSpec.workerHeartbeatFailureThreshold then
		generate EmployedWorker.workerDeregistered() to this;
		kvps["workerId"] := string(this.workerId);
		Logger::log(Logger::Information, "pv.jm.employedworker.absent",
			jmLog("jobmanagement_worker_deregistered_failed_heartbeat ", "worker absent", kvps));
	else
		// schedule the absence timer
		schedule this.absenceTimer generate EmployedWorker.workerPresenceUnknown() to this delay jmSpec.workerHeartbeatRate;
	end if;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'fafa08f1-e2d9-4091-aa70-9f3e4eb2da3c' 'be985925-f72b-42b2-851b-e7bba0ae5dc0' DO NOT EDIT THIS LINE.
state JobManagement::EmployedWorker.Working () is
jmSpec : instance of JobManagementSpec;

begin
	// cancel the absence timer
	cancel this.absenceTimer;
	// reset the failed heartbeat count
	this.failedHeartbeatCount := 0;
	// schedule the absence timer
	jmSpec := find_one JobManagementSpec();
	schedule this.absenceTimer generate EmployedWorker.workerPresenceUnknown() to this delay jmSpec.workerHeartbeatRate;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'fafa08f1-e2d9-4091-aa70-9f3e4eb2da3c' '23e326d4-5e29-417e-81dd-ddcfb9e40ce6' DO NOT EDIT THIS LINE.
state JobManagement::EmployedWorker.AvailableForWork () is
jobManager : instance of JobManager;
jmSpec : instance of JobManagementSpec;
unassignedJobIds : sequence of string;

begin
	// ask the job manager to assign a job
	this.working := true;
	jobManager := find_one JobManager();
	unassignedJobIds := jobManager.unassignedJobIds;
	if unassignedJobIds'length > 0 then
		jobManager.assignJob(this);
	end if;
	
	// set the absence timer
	this.failedHeartbeatCount := 0;
	jmSpec := find_one JobManagementSpec();
	schedule this.absenceTimer generate EmployedWorker.workerPresenceUnknown() to this delay jmSpec.workerHeartbeatRate;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

