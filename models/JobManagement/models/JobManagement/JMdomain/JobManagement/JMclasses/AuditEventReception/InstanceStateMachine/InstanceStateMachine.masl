//! ACTIVITY BEGIN. 'b64e4fb8-83d6-417d-bade-c72200a621ea' '6e3f5d40-8281-4037-b473-ad3fb6e8e8b1' DO NOT EDIT THIS LINE.
state JobManagement::AuditEventReception.Receiving () is
begin
    // See if the protocol verifier is getting too busy to receive more audit events.
    if ((find UnassignedJob())'length > (find_one JobManagementSpec()).maxUnassignedJobs) then
        schedule this.pollTimer generate AuditEventReception.tooBusy() to this delay @PT1S@;
    else
        schedule this.pollTimer generate AuditEventReception.nextReception() to this delay @PT1S@;
    end if;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'b64e4fb8-83d6-417d-bade-c72200a621ea' '8e2cf2bc-bcf4-4269-b0a8-0db95a0b2bfe' DO NOT EDIT THIS LINE.
state JobManagement::AuditEventReception.Throttling () is
unassignedJobCount : integer;
kvps : dictionary of string;
begin
    // See if the protocol verifier has completed enough work to begin receiving audit events.
    unassignedJobCount := (find UnassignedJob())'length;
    kvps["unassignedJobCount"] := unassignedJobCount'image;
    if (this.throttleCount > 10) or (unassignedJobCount < (find_one JobManagementSpec()).maxUnassignedJobs) then
        this.throttleCount := 0;
        // Enable message reception.
        if ( Reception~>enableMessageReception() = false ) then
            Logger::log(Logger::Error, "pv.jm.auditeventreception.throttling", "failed to enable message reception");
        end if;
        Logger::log(Logger::Information, "pv.jm.auditeventreception.throttling",
            jmLog("jobmanagement_reception_throttling", "audit event reception ready to receive", kvps));
        generate AuditEventReception.readyToReceive() to this;
    else
        if this.throttleCount = 0 then
            if ( Reception~>disableMessageReception() = false ) then
                Logger::log(Logger::Error, "pv.jm.auditeventreception.throttling",
                    jmLog("jobmanagement_reception_throttling", "failed to disable message reception", kvps));
            end if;
            Logger::log(Logger::Information, "pv.jm.auditeventreception.throttling",
                jmLog("jobmanagement_reception_throttling", "audit event reception throttling", kvps));
        end if;
        this.throttleCount := this.throttleCount + 1;
        schedule this.pollTimer generate AuditEventReception.nextReception() to this delay @PT1S@;
    end if;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

