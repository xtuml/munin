//! ACTIVITY BEGIN. '1d00179f-4467-4844-bd05-cfcf89aaa931' DO NOT EDIT THIS LINE.
private service JobManagement::init () is
configFilePath : string;
configFile : string;
kvps : dictionary of string;
jobManagementSpec : instance of JobManagementSpec;
jobManager : instance of JobManager;

begin

	// Create JobManager first, so that it is available to be configured.
	jobManager := find_one JobManager();
	if jobManager = null then
		jobManager := create unique JobManager(reportFrequency => @PT1S@, startTime => timestamp'now, Current_State => Created);
		schedule jobManager.reportTimer generate JobManager.generateReport() to jobManager delay jobManager.reportFrequency;
	end if;
	// Create AuditEventReception to receive and throttle events from the system under observation.
	AuditEventReception.createAuditEventReception();
	// get the supplied command line option for the config file and verify it is valid
	configFilePath := CommandLine::get_option_value("-configPath", "config/");
	configFile := CommandLine::get_option_value("-configFile", "config.json");
	if Filesystem::file_exists(Filesystem::filename(configFilePath & configFile)) then 
		jobManagementSpec := find_one JobManagementSpec();
		if jobManagementSpec = null then
			jobManagementSpec := create unique JobManagementSpec(configFilePath => configFilePath, configFile => configFile, specUpdateRate => @PT2M@, maxJobsPerWorker => 10, 
				                                   maxUnassignedJobs => 100, retiredWorkerDeletionTime => @PT10M@, maxUnassignedJobsExceeded => false, Current_State => Created);
		end if;
		jobManagementSpec.loadConfigFile();
 		generate JobManagementSpec.checkConfigUpdate() to jobManagementSpec;
	else
		kvps["configFile"] := configFilePath & configFile;
		Logger::log(Logger::Fatal, "pv.jm.init", jmLog("jobmanagement_no_config_file", "could not locate config file", kvps));
		raise program_error;
	end if;
	
exception
	when others =>
	
		Logger::log(Logger::Fatal, "pv.jm.init", jmLog("jobmanagement_failed_startup", "exception during startup", kvps));
		raise program_error;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'fc7bacf6-244e-47b0-8953-eecd6edbeae7' DO NOT EDIT THIS LINE.
private service JobManagement::registerCommandLineArgs () is
begin

	// The domain needs to be started with the command line argument -config that specifies where to find the configuration file;
  begin
	  CommandLine::register_value("-configPath", "The path to the configuration file for the service", CommandLine::Optional, "configPath", CommandLine::Required, CommandLine::Single);
  exception
    when program_error => null;  // Ignore error if option has been defined in another domain.
  end;
  begin
	  CommandLine::register_value("-configFile", "The configuration file for the service", CommandLine::Optional, "configFile", CommandLine::Required, CommandLine::Single);
  exception
    when program_error => null;  // Ignore error if option has been defined in another domain.
  end;

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

