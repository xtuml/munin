private service FReception::basicTest01 () is
incomingDirectory: readonly Filesystem::filename := "./incoming/";
testDirectory: readonly Filesystem::filename := "./testing/";
testFile: readonly Filesystem::filename := "basicTest01.json";
logMessage : string;
fileReceptionSpec : instance of FileReceptionSpec;
directoryName : Filesystem::filename;
filename : Filesystem::filename;
directoryList : set of Filesystem::filename;
jsonString: string;
jsonElement: JSON::JSONElement;
eventJsonObject : JSON::JSONObject;
prevAuditEventIds : sequence of string;
receptionAcceptEvents : sequence of instance of _TEST_Reception_AcceptEvents;
receptionAcceptEvent : instance of _TEST_Reception_AcceptEvents;

begin

  // clear the domain down
  fileReceptionSpec := find_one FileReceptionSpec();
  directoryName := Filesystem::filename(fileReceptionSpec.processedDirectory);
  FReception::clearDomain();
  
  // Copy a file into the incoming folder, wait for the file to be processed and
  // assure the correct terminator message has been called
  
  // copy the test file into the incoming directory
  Filesystem::copy_file(testDirectory & testFile, incomingDirectory & testFile);
  
  // service the event queues and scheduled timers up to 2s in the future
  Test::service_event_queue();
  Test::fire_scheduled_timers(timestamp'now + duration'seconds(2));
//  Test::service_event_queue();
//  Test::fire_scheduled_timers(timestamp'now + duration'seconds(2));
//  Test::service_event_queue();
//  Test::fire_scheduled_timers(timestamp'now + duration'seconds(2));
//  Test::service_event_queue();
//  Test::fire_scheduled_timers(timestamp'now + duration'seconds(2));
  
  // confirm that the file content has been sent to reception
  receptionAcceptEvents:= find _TEST_Reception_AcceptEvents();
  Assertions::assertTrue((receptionAcceptEvents'length = 6), "Invalid number of reception accept events = " & receptionAcceptEvents'length'image);

  // confirm that the data has not been altered
  jsonElement := JSON::parse(receptionAcceptEvents[receptionAcceptEvents'last].auditEvents);
  if jsonElement.kind = JSON::Object then
    eventJsonObject := JSON::get_object(jsonElement);
    Assertions::assertEquals("This is a comment near the beginning.", JSON::get_string(eventJsonObject["__comment__"]));
  else
  	Assertions::assertTrue(false, "Failed to find JSON object.");
  end if;
  

  jsonElement := JSON::parse(receptionAcceptEvents[receptionAcceptEvents'last - 1].auditEvents);
  if jsonElement.kind = JSON::Object then
    eventJsonObject := JSON::get_object(jsonElement);
    Assertions::assertEquals("This is a comment in the middle.", JSON::get_string(eventJsonObject["__comment__"]));
  else
  	Assertions::assertTrue(false, "Failed to find JSON object.");
  end if;

  jsonElement := JSON::parse(receptionAcceptEvents[receptionAcceptEvents'last - 2].auditEvents);
  if jsonElement.kind = JSON::Object then
    eventJsonObject := JSON::get_object(jsonElement);
    Assertions::assertEquals("This is a comment inside the next-level object.", JSON::get_string(eventJsonObject["__comment__"]));
    Assertions::assertEquals("8a783c30-3161-4cca-9ac1-37f6b50fe6e1", JSON::get_string(eventJsonObject["jobId"]));
    Assertions::assertEquals("dea5b47b-438b-47b0-8046-585254327fd2", JSON::get_string(eventJsonObject["eventId"]));
    Assertions::assertTrue((eventJsonObject'contains("previousEventIds") = false), "basicTest01: Failed as verification reported prevEventIds was invalid");
    Assertions::assertEquals("2021-05-13T10:07:34Z", JSON::get_string(eventJsonObject["timestamp"]));
    Assertions::assertEquals("8f309f67-2949-4071-b8c2-fd599b42cb0d", JSON::get_string(eventJsonObject["applicationName"]));
  else
  	Assertions::assertTrue(false, "Failed to find JSON object.");
  end if;
  
  jsonElement := JSON::parse(receptionAcceptEvents[receptionAcceptEvents'last - 3].auditEvents);
  if jsonElement.kind = JSON::Object then
    eventJsonObject := JSON::get_object(jsonElement);
    Assertions::assertEquals("This is a comment inside the next-level object.", JSON::get_string(eventJsonObject["__comment__"]));
    Assertions::assertEquals("TestEvent2", JSON::get_string(eventJsonObject["eventType"]));
    Assertions::assertEquals("8a783c30-3161-4cca-9ac1-37f6b50fe6e1", JSON::get_string(eventJsonObject["jobId"]));
    Assertions::assertEquals("735cc6c2-05e1-437f-a3e8-3b2cc36803a4", JSON::get_string(eventJsonObject["eventId"]));
    Assertions::assertTrue((eventJsonObject'contains("previousEventIds") = true), "basicTest01: Failed as verification reported prevEventIds was invalid");
    Assertions::assertEquals("dea5b47b-438b-47b0-8046-585254327fd2", JSON::get_string(eventJsonObject["previousEventIds"]));
    Assertions::assertEquals("2021-05-13T10:07:35Z", JSON::get_string(eventJsonObject["timestamp"]));
    Assertions::assertEquals("8f309f67-2949-4071-b8c2-fd599b42cb0d", JSON::get_string(eventJsonObject["applicationName"]));
  else
  	Assertions::assertTrue(false, "Failed to find JSON object.");
  end if;
 
  jsonElement := JSON::parse(receptionAcceptEvents[receptionAcceptEvents'last - 4].auditEvents);
  if jsonElement.kind = JSON::Object then
    eventJsonObject := JSON::get_object(jsonElement);
    Assertions::assertEquals("This is a comment inside the next-level object.", JSON::get_string(eventJsonObject["__comment__"]));
    Assertions::assertEquals("TestEvent3", JSON::get_string(eventJsonObject["eventType"]));
    Assertions::assertEquals("8a783c30-3161-4cca-9ac1-37f6b50fe6e1", JSON::get_string(eventJsonObject["jobId"]));
    Assertions::assertEquals("daf4d86c-084b-49cc-acfb-f558eeef6e80", JSON::get_string(eventJsonObject["eventId"]));
    Assertions::assertTrue((eventJsonObject'contains("previousEventIds") = true), "basicTest01: Failed as verification reported prevEventIds was invalid");
    if eventJsonObject["previousEventIds"].kind = JSON::Array then
	  for prev_id in JSON::get_array(eventJsonObject["previousEventIds"]) loop
	    prevAuditEventIds := prevAuditEventIds & JSON::get_string(prev_id);
	  end loop;
      Assertions::assertTrue((prevAuditEventIds'get_unique intersection "dea5b47b-438b-47b0-8046-585254327fd2")'length = 1, "Missing previous audit event id: " & "dea5b47b-438b-47b0-8046-585254327fd2");
      Assertions::assertTrue((prevAuditEventIds'get_unique intersection "735cc6c2-05e1-437f-a3e8-3b2cc36803a4")'length = 1, "Missing previous audit event id: " & "735cc6c2-05e1-437f-a3e8-3b2cc36803a4");
    end if;
    Assertions::assertEquals("2021-05-13T10:07:36Z", JSON::get_string(eventJsonObject["timestamp"]));
    Assertions::assertEquals("8f309f67-2949-4071-b8c2-fd599b42cb0d", JSON::get_string(eventJsonObject["applicationName"]));
  else
  	Assertions::assertTrue(false, "Failed to find JSON object.");
  end if;
  
  jsonElement := JSON::parse(receptionAcceptEvents[receptionAcceptEvents'last - 5].auditEvents);
  if jsonElement.kind = JSON::Object then
    eventJsonObject := JSON::get_object(jsonElement);
    Assertions::assertEquals("This is a comment at the end.", JSON::get_string(eventJsonObject["__comment__"]));
  else
  	Assertions::assertTrue(false, "Failed to find JSON object.");
  end if;


end service;
