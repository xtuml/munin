//! ACTIVITY BEGIN. '54c3c905-4e81-4d34-8b73-f35e82ff4ab2' '2e35e05b-5eb6-415f-9e06-6444886b0cfb' DO NOT EDIT THIS LINE.
state FReception::FileReceptionSpec.Created () is
begin
  null;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '54c3c905-4e81-4d34-8b73-f35e82ff4ab2' '7b11a87a-feb0-4990-9641-b81c3ef96162' DO NOT EDIT THIS LINE.
state FReception::FileReceptionSpec.ConfigurationLoaded () is
logMessage : string;
fileStatus : Filesystem::file_status;
fileControl : instance of FileControl;
fileName : Filesystem::filename;
configJSONString : string;
configJSONElement : JSON::JSONElement;
configJSONObject : JSON::JSONObject;
configValidationResult : JSON::JSONObject;
filePermissions : Filesystem::permissions;

begin
	
	filePermissions.group.read := true;
	filePermissions.other.read := true;
	filePermissions.group.write := true;
	filePermissions.other.write := true;
	// check the config file has not been removed
	fileName := Filesystem::filename(this.configFilePath & this.configFile);
	if Filesystem::file_exists(fileName) then

		configJSONString := Filesystem::read_file(fileName);
		configJSONElement := JSON::parse(configJSONString);
		configValidationResult := JSONValidation::validate(configJSONElement, Environment::getenv(Environment::variable_name("FILE_RECEPTION_CONFIG_SCHEMA_PATH")));
		
		if JSON::get_boolean(configValidationResult["valid"]) then
		    // extract the spec data items
			configJSONObject := JSON::get_object(configJSONElement);
			if configJSONObject'contains("SpecUpdateRate") then
				this.specUpdateRate := duration'parse(JSON::get_string(configJSONObject["SpecUpdateRate"]));
			end if;
			if configJSONObject'contains("IncomingDirectory") then
				this.incomingDirectory := JSON::get_string(configJSONObject["IncomingDirectory"]);
			end if;
			if configJSONObject'contains("ProcessedDirectory") then
				this.processedDirectory := JSON::get_string(configJSONObject["ProcessedDirectory"]);
			end if;
			if configJSONObject'contains("ConcurrentReceptionLimit") then
				this.concurrentReceptionLimit := integer'parse(JSON::get_string(configJSONObject["ConcurrentReceptionLimit"]));
			end if;
			if configJSONObject'contains("FileControlWaitTime") then
				this.fileControlWaitTime := duration'parse(JSON::get_string(configJSONObject["FileControlWaitTime"]));
			end if;
    	else
			logMessage := "AEReception::ReceptionSpec.ConfigurationLoaded : Config file invalid:\n" & JSON::dump(configValidationResult, true);
			Logger::log(Logger::Error, "pv.fr.receptionspec.configurationloaded", logMessage);
			raise JSON::JSONException("Config file invalid");
		end if;

		// set the config file mod time
		fileName := Filesystem::filename(this.configFilePath & this.configFile);
		fileStatus := Filesystem::get_file_status(Filesystem::filename(fileName));
		this.configFileModificationTime := fileStatus.modification_time;
				
		// schedule to check the config file
		schedule this.configTimer generate FileReceptionSpec.checkConfigUpdate() to this delay this.specUpdateRate;
	else
		logMessage := "FileReception::FileReceptionSpec.ConfigurationLoaded : failed to locate config file. Specified file = " & this.configFilePath & this.configFile;
		Logger::log(Logger::Fatal, "pv.fr.receptionspec.configurationloaded", logMessage);
		raise program_error;
	end if;
	
	// check if file control exists and if not create it
	fileControl := find_one FileControl();
	if fileControl = null then
		fileControl := create unique FileControl(schemaValidationCount => 0, Current_State => Created);
		filePermissions.group.read := true;
		filePermissions.other.read := true;
		filePermissions.group.write := true;
		filePermissions.other.write := true;
		// check the incoming directory exists and if not create it
		if not Filesystem::file_exists(Filesystem::filename(this.incomingDirectory)) then
			Filesystem::create_directory(Filesystem::filename(this.incomingDirectory));
		end if;
		Filesystem::add_permissions(Filesystem::filename(this.incomingDirectory),filePermissions);
		// check the processed directory exists and if not create it
		if not Filesystem::file_exists(Filesystem::filename(this.processedDirectory)) then
			Filesystem::create_directory(Filesystem::filename(this.processedDirectory));
		end if;
		Filesystem::add_permissions(Filesystem::filename(this.processedDirectory),filePermissions);
		schedule fileControl.fileControlTimer generate FileControl.checkForFile() to fileControl delay duration'seconds(0);
	end if;
	
exception
	when program_error =>
		raise program_error;
	when others => 	
	
		logMessage := "FileReception::FileReceptionSpec.ConfigurationLoaded : failed to load configuration file";
		Logger::log(Logger::Fatal, "pv.fr.filereceptionspec.configurationloaded", logMessage);
		raise program_error;
		
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '54c3c905-4e81-4d34-8b73-f35e82ff4ab2' 'b7998752-372b-4dfa-abdb-47c5d2b1878e' DO NOT EDIT THIS LINE.
state FReception::FileReceptionSpec.ConfigChecked () is
logMessage : string;
fileStatus : Filesystem::file_status;

begin
	
	if Filesystem::file_exists(Filesystem::filename(this.configFilePath & this.configFile)) then
		fileStatus := Filesystem::get_file_status(Filesystem::filename(this.configFilePath & this.configFile));
		if fileStatus.modification_time /= this.configFileModificationTime then
			generate FileReceptionSpec.loadConfig() to this;
		else
			schedule this.configTimer generate FileReceptionSpec.checkConfigUpdate() to this delay this.specUpdateRate;
		end if;
	else
		logMessage := "FileReception::FileReceptionSpec.ConfigChecked : failed to locate config file. Specified file = " & this.configFilePath & this.configFile;
		Logger::log(Logger::Fatal, "pv.fr.filereceptionspec.configchecked", logMessage);
		raise program_error;
	end if;
	
exception
	when others => 	
	
		logMessage := "FileReception::FileReceptionSpec.ConfigChecked : failed to load configuration file";
		Logger::log(Logger::Fatal, "pv.fr.filereceptionspec.configchecked", logMessage);
		raise program_error;		
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

