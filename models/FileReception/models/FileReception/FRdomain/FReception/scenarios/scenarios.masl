//! ACTIVITY BEGIN. 'e9d97769-7e65-4c93-8714-0e5833346f65' DO NOT EDIT THIS LINE.
private service FReception::init () is
configFilePath : string;
configFile: string;
logMessage : string;
fileReceptionSpec : instance of FileReceptionSpec;

begin

	// get the supplied command line option for the config file and verify it is valid
	configFilePath := CommandLine::get_option_value("-configPath", "config/");
	configFile := CommandLine::get_option_value("-configFile", "config.json");
	if Filesystem::file_exists(Filesystem::filename(configFilePath & configFile)) then
		fileReceptionSpec := find_one FileReceptionSpec();
		if fileReceptionSpec = null then
			fileReceptionSpec := create unique FileReceptionSpec(configFilePath => configFilePath, configFile => configFile, specUpdateRate => @PT2M@, 
				                                   processedDirectory => "./processed", concurrentReceptionLimit => 1, 
				                                   fileControlWaitTime => @PT1S@, Current_State => Created);
		end if;
		generate FileReceptionSpec.loadConfig() to fileReceptionSpec;
	else
		logMessage := "FileReception::init : failed to locate config file. Specified file = " & configFilePath & configFile;
		AsyncLogger::log(Logger::Information, "FileReception", logMessage);
		raise program_error;
	end if;

exception
	when others =>
	
		logMessage := "FileReception::init : failed during start up";
		AsyncLogger::log(Logger::Error, "FileReception", logMessage);
		raise program_error;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '02690865-48e4-4c71-8057-240150ffc4a6' DO NOT EDIT THIS LINE.
private service FReception::registerCommandLineArgs () is
begin

  // The domain needs to be started with the command line argument -config that specifies where to find the configuration file;
  begin
    CommandLine::register_value("-configPath", "The path to the configuration file for the service", CommandLine::Optional, "configPath", CommandLine::Required, CommandLine::Single);
  exception
    when program_error => null;  // Ignore error if option has been defined in another domain.
  end;
  begin
    CommandLine::register_value("-configFile", "The configuration file for the service", CommandLine::Optional, "configFile", CommandLine::Required, CommandLine::Single);
  exception
    when program_error => null;  // Ignore error if option has been defined in another domain.
  end;

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

