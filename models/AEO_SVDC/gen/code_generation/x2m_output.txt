project,AEO_SVDC,AEO_SVDC,,,,,,
domain,AEOrdering,,AEOrdering,,,,,
terminator,Req_IF_Audited,,AEOrdering,,,,,
routine,AEOrdering,,public,reportAuditFailure,1,,,
parameter,jobId,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,auditReport,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  null;%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,AEOrdering,,public,reportAuditSuccess,2,,,
parameter,jobId,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  null;%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,AEOrdering,,public,reportAuditItem,3,,,
parameter,jobId,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,auditReport,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  null;%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Req_IF_Verification,,AEOrdering,,,,,
routine,AEOrdering,,public,audit_event,1,,,
parameter,jobId,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,nodeName,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,application,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,auditEventType,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,auditEventId,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,auditEventTime,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,prevAuditEventIds,in,,,,,,
typeref,sequence of string,,,,,,,
typeref,,,,,,,,
parameter,reportableAuditEventDataItems,in,,,,,,
typeref,sequence of ReportableAuditEventDataType,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,auditEventData: sequence of AESequenceDC::auditEventDataStructure;%0Abegin%0A  for dataItem in reportableAuditEventDataItems loop%0A    declare%0A      auditEventDataItem: AESequenceDC::auditEventDataStructure;%0A    begin%0A      if dataItem.dataKind = "INTRAJOBINV" then%0A        auditEventDataItem.aedKind := AESequenceDC::INTRAJOBINV;%0A      elsif dataItem.dataKind = "EXTRAJOBINV" then%0A        auditEventDataItem.aedKind := AESequenceDC::EXTRAJOBINV;%0A      elsif dataItem.dataKind = "BRANCHCOUNT" then%0A        auditEventDataItem.aedKind := AESequenceDC::BRANCHCOUNT;%0A      elsif dataItem.dataKind = "LOOPCOUNT" then%0A        auditEventDataItem.aedKind := AESequenceDC::LOOPCOUNT;%0A      elsif dataItem.dataKind = "MERGECOUNT" then%0A        auditEventDataItem.aedKind := AESequenceDC::MERGECOUNT;%0A      end if;%0A      auditEventDataItem.aedName := dataItem.dataName;%0A      auditEventDataItem.aedValue := dataItem.dataValue;%0A      auditEventData := auditEventData & auditEventDataItem;%0A    end;%0A  end loop;%0A  AESequenceDC::acceptOrderedEvent(%0A    auditEventTime%2C%0A    application%2C%0A    auditEventType%2C%0A    jobId%2C%0A    prevAuditEventIds%2C%0A    auditEventId%2C%0A    auditEventData%0A    // nodeName ??%0A  );%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,AEOrdering,,public,failedJob,2,,,
parameter,jobId,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,failureReason,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  AESequenceDC::failedJob(jobId%2C failureReason);%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,AEOrdering,,public,jobComplete,3,,,
parameter,jobId,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  AESequenceDC::jobComplete(jobId);%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,AEOrdering,,public,eventDefinition,4,,,
parameter,jobName,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,sequenceName,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,eventType,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,occurrenceId,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,previousEventTypes,in,,,,,,
typeref,sequence of PreviousEventType,,,,,,,
typeref,,,,,,,,
parameter,isSequenceStart,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,isSequenceEnd,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,isBreak,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,prevEventTypes: sequence of AESequenceDC::eventStructure;%0Abegin%0A  // convert the AEOrdering type to an AESequenceDC type%0A  for previousEventType in previousEventTypes loop%0A    declare%0A      prevEventType: AESequenceDC::eventStructure;%0A    begin%0A      prevEventType.eventTypeName := previousEventType.previousEventTypeName;%0A      prevEventType.occurrenceId := previousEventType.occurrenceId;%0A      prevEventType.constraintDefId := previousEventType.constraintDefinitionId;%0A      prevEventType.constraintValue := previousEventType.constraintValue;%0A      prevEventTypes := prevEventTypes & prevEventType;%0A    end;%0A  end;%0A  // call the public service%0A  AESequenceDC::eventDefinition(%0A    jobName%2C%0A    sequenceName%2C%0A    eventType%2C%0A    occurrenceId%2C%0A    prevEventTypes%2C%0A    isSequenceStart%2C%0A    isSequenceEnd%2C%0A    isBreak%0A  );%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,AEOrdering,,public,jobTypeDeleted,5,,,
parameter,jobTypeName,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  AESequenceDC::deprecateJobDefinition(jobTypeName);%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,AEOrdering,,public,intraJobInvariantDefinition,6,,,
parameter,auditEventDataName,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,jobDefinitionName,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,associatedEvents,in,,,,,,
typeref,sequence of IntraJobInvDataType,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,assocEvents: sequence of AESequenceDC::intraJobInvDataStructure;%0Abegin%0A  for evt in associatedEvents loop%0A    assocEvents := assocEvents & (evt.auditEventType%2C evt.occurrenceId%2C evt.alternativeDataItemName);%0A  end loop;%0A  AESequenceDC::intraJobInvariantDefinition(jobDefinitionName%2C auditEventDataName%2C assocEvents);%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,AEOrdering,,public,extraJobInvariantDefinition,7,,,
parameter,auditEventDataName,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,sourceJobDefnName,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,sourceEventType,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,sourceOccurrenceId,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,userEvents,in,,,,,,
typeref,sequence of UserEventDataType,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,userEventData: sequence of AESequenceDC::userEventDataStructure;%0Abegin%0A  for evt in userEvents loop%0A    userEventData := userEventData & (evt.jobDefinitionName%2C evt.auditEventType%2C evt.occurrenceId%2C evt.alternativeDataItemName);%0A  end loop;%0A  AESequenceDC::extraJobInvariantDefinition(auditEventDataName%2C sourceJobDefnName%2C sourceEventType%2C sourceOccurrenceId%2C userEventData);%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,AEOrdering,,public,dynamicControlDefinition,8,,,
parameter,jobTypeName,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,dynamicControlName,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,dynamicControlType,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,sourceEventType,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,sourceOccurrenceId,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,userEventType,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,userOccurrenceId,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,sVDCDynamicControlType : AESequenceDC::dynamicControlTypeEnum;%0A%0Abegin%0A  %0A  AESequenceDC::dynamicControlDefinition(jobTypeName%2C dynamicControlName%2C AESequenceDC::dynamicControlTypeEnum'value(dynamicControlType)%2C sourceEventType%2C sourceOccurrenceId%2C userEventType%2C userOccurrenceId);%0A  %0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,AEOrdering,,public,jobDefinition,9,,,
parameter,jobName,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,eventDefinitions,in,,,,,,
typeref,sequence of EventDefinitionType,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,svdcEventDefinitions : sequence of AESequenceDC::eventDefinitionStructure;%0A%0Abegin%0A  %0A  // call the public service%0A  AESequenceDC::createJobDefinition(jobName%2C sequence of AESequenceDC::eventDefinitionStructure(eventDefinitions));%0A%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Req_IF_InvariantStore,Audit Event Ordering,AEOrdering,,,,,
routine,AEOrdering,,public,setLoadRate,1,,,
parameter,loadRate,in,,,,,,
typeref,duration,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A	%0A	IStore::setLoadRate(loadRate);%0A	%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Reporting,Audit Event Ordering,AEOrdering,,,,,
terminator,,,,,,,,
domain,,,,,,,,
domain,AESequenceDC,,SequenceVerificationDataCentric,,,,,
terminator,JobAdmin,,SequenceVerificationDataCentric,,,,,
routine,AESequenceDC,,public,deleteJob,1,,,
parameter,jobID,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  AEOrdering::deleteJob(jobID);%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Persistence_Req_IF,,SequenceVerificationDataCentric,,,,,
routine,AESequenceDC,,public,PersistInvariant,1,,,
parameter,extraJobInvariantName,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,invariantValue,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,validFrom,in,,,,,,
typeref,timestamp,,,,,,,
typeref,,,,,,,,
parameter,validTo,in,,,,,,
typeref,timestamp,,,,,,,
typeref,,,,,,,,
parameter,sourceJobDefinitionType,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,sourceAuditEventType,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,sourceAuditEventOccurrenceId,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,logMessage : string;%0A%0Abegin%0A%0A  IStore::persistInvariant(extraJobInvariantName%2C%0A                               invariantValue%2C%0A                               validFrom%2C%0A                               validTo%2C%0A                               sourceJobDefinitionType%2C%0A                               sourceAuditEventType%2C%0A                               sourceAuditEventOccurrenceId);%0A%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,AESequenceDC,,public,RestoreNamedInvariant,3,,,
parameter,extraJobInvariantName,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,invariantValue,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,logMessage : string;%0A%0Abegin%0A%0A  IStore::restoreNamedInvariant(extraJobInvariantName%2C%0A                                    invariantValue);%0A  %0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
domain,,,,,,,,
domain,IStore,,InvariantStore,,,,,
terminator,StoreClient,,InvariantStore,,,,,
routine,IStore,,public,addInvariants,1,,,
parameter,invariantsToReport,in,,,,,,
typeref,sequence of persistedInvariantStructure,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,restoredInvariants: sequence of AESequenceDC::persistedInvariantStructure;%0Abegin%0A  for dataItem in invariantsToReport loop%0A    declare%0A      restoredInvariant: AESequenceDC::persistedInvariantStructure;%0A    begin%0A      restoredInvariant.invariantName := dataItem.invariantName;%0A      restoredInvariant.invariantValue := dataItem.invariantValue;%0A      restoredInvariant.validFrom := dataItem.validFrom;%0A      restoredInvariant.validTo := dataItem.validTo;%0A      restoredInvariant.sourceJobDefinitionType := dataItem.sourceJobDefinitionType;%0A      restoredInvariant.sourceAuditEventType := dataItem.sourceAuditEventType;%0A      restoredInvariant.sourceAuditEventOccurrenceId := dataItem.sourceAuditEventOccurrenceId;%0A      restoredInvariants := restoredInvariants & restoredInvariant;%0A    end;%0A  end loop;%0A%0A  AESequenceDC::restoreInvariants(restoredInvariants);%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
domain,,,,,,,,
domain,JSONValidation,,,,,,,
domain,,,,,,,,
domain,JSON,,,,,,,
domain,,,,,,,,
project,,,,,,,,
