//! ACTIVITY BEGIN. '0801760f-91a7-422b-bc4b-3d4d2d329f7a' DO NOT EDIT THIS LINE.
private service AEOrdering::checkJobComplete () is
logMessage : string;
jobs : sequence of instance of Job;
auditEvents : sequence of instance of AuditEvent;

begin
	
	logMessage := "AEOrdering::checkJobComplete";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
	logMessage := "AEOrdering::checkJobComplete - Test job complete";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
	
	// verify that there are no jobs
	jobs := find Job();
	Assertions::assertTrue((jobs'length = 0), "Test Job Complete: Jobs have not been deleted");
	// verify that there are no events
	auditEvents := find AuditEvent();
	Assertions::assertTrue((auditEvents'length = 0), "Test Job Complete: Audit events have not been deleted");
		
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'b99cf356-baee-45eb-a09a-1b65922b2b33' DO NOT EDIT THIS LINE.
private service AEOrdering::testConfigTestData () is
reportedJobDefinitions : sequence of instance of _TEST_Req_IF_Verification_jobDefinition;
intraEventDataDef : instance of _TEST_Req_IF_Verification_intraJobInvariantDefinition;
extraEventDataDef : instance of _TEST_Req_IF_Verification_extraJobInvariantDefinition;
dynamicControlDefinition : instance of _TEST_Req_IF_Verification_dynamicControlDefinition;
verificationTimerControls : sequence of instance of _TEST_Req_IF_Verification_reportVerificationTimerControls;
verificationTimerControl : instance of _TEST_Req_IF_Verification_reportVerificationTimerControls;

begin
	
	// When the domain has started it should report the details of the event definitions to verifications
	reportedJobDefinitions := find _TEST_Req_IF_Verification_jobDefinition();
	Assertions::assertTrue((reportedJobDefinitions'length = 2), "Test Config File: Failed to find the correct number of reported event definitions, expected 2 found " & (reportedJobDefinitions'length)'image);
	
	for jobDefinition in reportedJobDefinitions loop
		if jobDefinition.jobName = "AEOrdering-Test" then
			if jobDefinition.eventDefinitions'length = 8 then
				for reportEventDefinition in jobDefinition.eventDefinitions loop
					if reportEventDefinition.sequenceName = "SEQUENCE1" and reportEventDefinition.eventType = "aaa" and reportEventDefinition.occurrenceId = 1 and reportEventDefinition.isSequenced = true then
						null;
					elsif reportEventDefinition.sequenceName = "SEQUENCE1" and reportEventDefinition.eventType = "bbb" and reportEventDefinition.occurrenceId = 1 and reportEventDefinition.isSequenced = true then
					    Assertions::assertTrue((reportEventDefinition.previousEventTypes'length = 1), "Unexepected previous event types eventType = bbb");
						for previousEventType in reportEventDefinition.previousEventTypes loop
							Assertions::assertTrue((previousEventType.previousEventTypeName = "aaa" and previousEventType.occurrenceId = 1), "");
						end loop;
					elsif reportEventDefinition.sequenceName = "SEQUENCE1" and reportEventDefinition.eventType = "ccc" and reportEventDefinition.occurrenceId = 1 and reportEventDefinition.isSequenced = true then
					    Assertions::assertTrue((reportEventDefinition.previousEventTypes'length = 1), "Unexepected previous event types eventType = ccc");
						for previousEventType in reportEventDefinition.previousEventTypes loop
							Assertions::assertTrue((previousEventType.previousEventTypeName = "bbb" and previousEventType.occurrenceId = 1 and previousEventType.constraintDefinitionId = "cccEventXOR" and previousEventType.constraintValue = "XOR"), "");
						end loop;
					elsif reportEventDefinition.sequenceName = "SEQUENCE1" and reportEventDefinition.eventType = "ddd" and reportEventDefinition.occurrenceId = 1 and reportEventDefinition.isSequenced = true then
					    Assertions::assertTrue((reportEventDefinition.previousEventTypes'length = 1), "Unexepected previous event types eventType = ddd");
						for previousEventType in reportEventDefinition.previousEventTypes loop
							Assertions::assertTrue((previousEventType.previousEventTypeName = "ccc" and previousEventType.occurrenceId = 1), "");
						end loop;
					elsif reportEventDefinition.sequenceName = "SEQUENCE1" and reportEventDefinition.eventType = "eee" and reportEventDefinition.occurrenceId = 1 and reportEventDefinition.isSequenced = true then
					    Assertions::assertTrue((reportEventDefinition.previousEventTypes'length = 1), "Unexepected previous event types eventType = eee");
						for previousEventType in reportEventDefinition.previousEventTypes loop
							Assertions::assertTrue((previousEventType.previousEventTypeName = "ddd" and previousEventType.occurrenceId = 1), "");
						end loop;
					elsif reportEventDefinition.sequenceName = "SEQUENCE2" and reportEventDefinition.eventType = "fff" and reportEventDefinition.occurrenceId = 1 and reportEventDefinition.isSequenced = true then
					    Assertions::assertTrue((reportEventDefinition.previousEventTypes'length = 0), "Unexepected previous event types eventType = fff");
					elsif reportEventDefinition.sequenceName = "" and reportEventDefinition.eventType = "yyy" and reportEventDefinition.occurrenceId = 1 and reportEventDefinition.isSequenced = false then
					    Assertions::assertTrue((reportEventDefinition.previousEventTypes'length = 0), "Unexepected previous event types eventType = fff");
					elsif reportEventDefinition.sequenceName = "" and reportEventDefinition.eventType = "zzz" and reportEventDefinition.occurrenceId = 1 and reportEventDefinition.isSequenced = false then
					    Assertions::assertTrue((reportEventDefinition.previousEventTypes'length = 0), "Unexepected previous event types eventType = fff");
					else
						Assertions::assertTrue(false, "Unknown reported event definitions for AEOrdering-Test");  
					end if;
				end loop;
			else
				Assertions::assertTrue(false, "Test Config File: Failed to find the correct number of reported event definitions for AEOrdering-Test, expected 8 found " & (jobDefinition.eventDefinitions'length)'image);  
			end if;
		elsif jobDefinition.jobName = "Other-Test-Job" then
			if jobDefinition.eventDefinitions'length = 3 then
				null;
			else
				Assertions::assertTrue(false, "Test Config File: Failed to find the correct number of reported event definitions for Other-Test-Job, expected 3 found " & (jobDefinition.eventDefinitions'length)'image);  
			end if;
		else
			Assertions::assertTrue(false, "Test Config File: Unknown job reported, jobName = " & jobDefinition.jobName);  
		end if;
	end loop;
	
	extraEventDataDef := find_one _TEST_Req_IF_Verification_extraJobInvariantDefinition(auditEventDataName = "Data1" and sourceJobDefnName = "AEOrdering-Test" and sourceEventType = "aaa" and sourceOccurrenceId = 1);
    Assertions::assertTrue((extraEventDataDef /= null), "Test Config Test Data: Failed to find extra job invariant event data definition auditEventDataName = Data1, jobName = AEOrdering-Test, sourceEventType = aaa and occurrenceId = 1");
	for userEvent in extraEventDataDef.userEvents loop
		if userEvent.jobDefinitionName = "Other-Test-Job" and userEvent.auditEventType = "Other-aaa" and userEvent.occurrenceId = 1 and userEvent.alternativeDataItemName = "Other-Data1" then
			null;
		elsif userEvent.jobDefinitionName = "Other-Test-Job" and userEvent.auditEventType = "Other-bbb" and userEvent.occurrenceId = 1 and userEvent.alternativeDataItemName = "Data1" then
			null;
		else
    		Assertions::assertTrue((false), "Test Config Test Data: Failed to find extra job invariant event data definition user events auditEventDataName = Data1, jobName = AEOrdering-Test, sourceEventType = aaa and occurrenceId = 1");
		end if;
	end loop;

	extraEventDataDef := find_one _TEST_Req_IF_Verification_extraJobInvariantDefinition(auditEventDataName = "Data4" and sourceJobDefnName = "AEOrdering-Test" and sourceEventType = "ddd" and sourceOccurrenceId = 1);
    Assertions::assertTrue((extraEventDataDef /= null), "Test Config Test Data: Failed to find extra job invariant event data definition auditEventDataName = Data4, jobName = AEOrdering-Test, sourceEventType = ddd and occurrenceId = 1");
	for userEvent in extraEventDataDef.userEvents loop
		if userEvent.jobDefinitionName = "Other-Test-Job" and userEvent.auditEventType = "Other-ddd" and userEvent.occurrenceId = 1 and userEvent.alternativeDataItemName = "Other-Data1" then
			null;
		else
    		Assertions::assertTrue((false), "Test Config Test Data: Failed to find extra job invariant event data definition user events auditEventDataName = Data4, jobName = AEOrdering-Test, sourceEventType = ddd and occurrenceId = 1");
		end if;
	end loop;

	intraEventDataDef := find_one _TEST_Req_IF_Verification_intraJobInvariantDefinition(auditEventDataName = "Data2" and jobDefinitionName = "AEOrdering-Test");
    Assertions::assertTrue((intraEventDataDef /= null), "Test Config Test Data: Failed to find intra job invariant event data definition auditEventDataName = Data2 and jobName = AEOrdering-Test");
	for associatedEvent in intraEventDataDef.associatedEvents loop
		if associatedEvent.auditEventType = "aaa" and associatedEvent.occurrenceId = 1 and associatedEvent.alternativeDataItemName = "Data2" then
			null;
		elsif associatedEvent.auditEventType = "bbb" and associatedEvent.occurrenceId = 1 and associatedEvent.alternativeDataItemName = "Data2" then
			null;
		elsif associatedEvent.auditEventType = "ccc" and associatedEvent.occurrenceId = 1 and associatedEvent.alternativeDataItemName = "Data2" then
			null;
		else
    		Assertions::assertTrue((false), "Test Config Test Data: Failed to find intra job invariant event data definition user events auditEventDataName = Data2, jobName = AEOrdering-Test");
		end if;
	end loop;
	
	dynamicControlDefinition := find_one _TEST_Req_IF_Verification_dynamicControlDefinition(jobTypeName = "AEOrdering-Test" and dynamicControlName = "cccLOOPCOUNT" and dynamicControlType = "LOOPCOUNT" and 
		                                                                                sourceEventType = "bbb" and sourceOccurrenceId = 1 and userEventType = "ccc" and userOccurrenceId = 1);
    Assertions::assertTrue((dynamicControlDefinition /= null), "Test Config Test Data: Failed to find dynamic control definition definition jobTypeName = AEOrdering-Test and dynamicControlName = cccLOOPCOUNT and dynamicControlType = LOOPCOUNT and sourceEventType = bbb and sourceOccurrenceId = 1 and userEventType = ccc and userOccurrenceId = 1");
	

	verificationTimerControls := find _TEST_Req_IF_Verification_reportVerificationTimerControls();
	Assertions::assertTrue((verificationTimerControls'length = 2), "Test Config File: Failed to find the correct number of reported cerification timer controls, expected 2 found " & (verificationTimerControls'length)'image);
	verificationTimerControl := find_one verificationTimerControls();
    Assertions::assertTrue((verificationTimerControl.maxIntraSequenceEventTimeoutPeriod = duration'seconds(1)), "Test Config Test Data: Invalid maxIntraSequenceEventTimeoutPeriod");
    Assertions::assertTrue((verificationTimerControl.waitPeriodForAllJobsCompletedCheck = duration'days(1)), "Test Config Test Data: Invalid waitPeriodForAllJobsCompletedCheck");
    Assertions::assertTrue((verificationTimerControl.waitPeriodForJobDeletion = duration'minutes(30)), "Test Config Test Data: Invalid waitPeriodForJobDeletion");
    Assertions::assertTrue((verificationTimerControl.waitPeriodForInvariantDeletion = duration'days(1)), "Test Config Test Data: Invalid waitPeriodForInvariantDeletion");
    Assertions::assertTrue((verificationTimerControl.timeoutPeriodForRetreivingStoredInvariants = duration'seconds(10)), "Test Config Test Data: Invalid timeoutPeriodForRetreivingStoredInvariants");
    Assertions::assertTrue((verificationTimerControl.timeoutPeriodForHangingJob = duration'seconds(15)), "Test Config Test Data: Invalid timeoutPeriodForHangingJob");
	delete verificationTimerControls;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'aea13e97-558f-455d-b0f4-a35c8a1a18f9' DO NOT EDIT THIS LINE.
private service AEOrdering::setConfigFile ( configFilePath : in string,
                                           configFile : in string ) is
systemSpec : instance of SystemSpec;
emptyJobDefinitionFiles : sequence of JobDefinitionFileType;

begin
	systemSpec := find_one SystemSpec();
	systemSpec.configFilePath := configFilePath;
	systemSpec.configFile := configFile;
	generate SystemSpec.checkConfigUpdate() to systemSpec;
	Test::service_event_queue();

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '09cea82e-6cf3-471a-a4b8-a20c2e17a89f' DO NOT EDIT THIS LINE.
private service AEOrdering::clearDomain ( clearJobs : in boolean,
                                         clearSpecs : in boolean ) is
jobTypes : sequence of instance of JobType;
auditEventTypes : sequence of instance of AuditEventType;
dataItemTypes : sequence of instance of DataItemType;

begin
	
	// clear out all the classes and relationships in the domain expect for System Spec
	if clearJobs = true then
		for job in find Job() loop
			job.jobDeleted();
		end loop;
	end if;
	
	if clearSpecs = true then
		jobTypes := find JobType();
		unlink jobTypes R12;
		unlink jobTypes R14;
		delete jobTypes;
		auditEventTypes := find AuditEventType();
		unlink auditEventTypes R7;
		unlink auditEventTypes R16;
		unlink auditEventTypes R19;
		delete auditEventTypes;
		dataItemTypes := find DataItemType();
		unlink dataItemTypes R18.constrains.DataItemType;
		delete dataItemTypes;
		delete find_all SourceDataItemForwardReference();
	end if;
	
	// clear out the StoredJobIdentifiers
	delete find_all StoredJobIdentifier();
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '98777b60-3327-43c5-9e6f-31705c49dabe' DO NOT EDIT THIS LINE.
private service AEOrdering::testDeprecatedJob () is
configFile : string := "aeordering_spec_test_deprecated.json";
jobType : instance of JobType;
verificationAuditEvent : instance of _TEST_Req_IF_Verification_jobTypeDeleted;
systemSpec : instance of SystemSpec;

begin
	
	// set the config file to be the deprecated job
	systemSpec := find_one SystemSpec();
	AEOrdering::setConfigFile(systemSpec.configFilePath, configFile);
	
	// check that the job has been marked as deprecated
	jobType := find_one JobType(jobTypeName = "AEOrdering-Test" and deprecated = true);
	Assertions::assertTrue((jobType /= null), "Test Deprecated Job: The job has not been marked as deprecated");
	Assertions::assertTrue((jobType.jobTypeExpiryTime = @2050-06-26T16:00:00Z@), "Test Deprecated Job: The deprecated expiry time is invalid");
	Assertions::assertTrue((jobType.expiryTimer'scheduled_at = @2050-06-26T16:00:00Z@), "Test Deprecated Job: The deprecated expiry timer is invalid");
	
	// fire the event for the timer
	generate JobType.expireJobType() to jobType;
	Test::service_event_queue();
	
	// verify that the expired job has been reported to verification
	verificationAuditEvent := find_one _TEST_Req_IF_Verification_jobTypeDeleted(jobTypeName = "AEOrdering-Test");
	Assertions::assertTrue((verificationAuditEvent /= null), "Test Deprecated Job: Failed to report deletion of deprecated job");	
	

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '0085272e-3882-4e8b-8689-b1064c8b6fb1' DO NOT EDIT THIS LINE.
private service AEOrdering::checkInvalidJobDefinition ( jobId : in string,
                                                       eventId : in string ) is
logMessage : string;
failedJob : instance of FailedJob;
failedAuditEvent : instance of FailedAuditEvent;
reportAuditFailure :  instance of _TEST_Req_IF_Audited_reportAuditFailure;

begin
        
    logMessage := "AEOrdering::checkInvalidJobDefinition";
    Logger::log(Logger::Information, "AEOrdering", logMessage);
    
	reportAuditFailure := find_one _TEST_Req_IF_Audited_reportAuditFailure(jobId = jobId);
	Assertions::assertTrue((reportAuditFailure /= null), "Failed to find report audit failure jobId = " & jobId & ", eventId = " & eventId);
    failedJob := find_one FailedJob(jobId = jobId);
	Assertions::assertTrue((failedJob /= null), "Failed to find Failed Job = " & jobId);
    if failedJob /= null then
        failedAuditEvent := find_one (failedJob -> R2.Job -> R9.AuditEvent -> R4.FailedAuditEvent)(auditEventId = eventId);
		Assertions::assertTrue((failedAuditEvent /= null), "Failed to find Failed Job = " & eventId);
    end if;
	delete reportAuditFailure;
    
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '1be21e25-8302-41ac-b1e9-d7441a39ec80' DO NOT EDIT THIS LINE.
private service AEOrdering::checkJobFailures ( jobId : in string,
                                              eventId : in string ) is
logMessage : string;
failedJob : instance of FailedJob;
job : instance of Job;
failedAuditEvent : instance of FailedAuditEvent;

begin
        
	logMessage := "AEOrdering::checkJobFailures";
    Logger::log(Logger::Information, "AEOrdering", logMessage);
    
    failedJob := find_one FailedJob(jobId = jobId);
	Assertions::assertTrue((failedJob /= null), "Failed to find Failed Job = " & jobId);
    if failedJob /= null then
    	failedAuditEvent := find_one (failedJob -> R2.Job -> R9.AuditEvent -> R4.FailedAuditEvent)(auditEventId = eventId);
		Assertions::assertTrue((failedAuditEvent /= null), "Failed to find Failed Audit Event = " & eventId);
    end if;   

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'b678df2c-c819-488d-b391-d752d15618c5' DO NOT EDIT THIS LINE.
private service AEOrdering::checkOrderedJob () is
logMessage : string;
inProgressJob : instance of InProgressJob;
job : instance of Job;
verificationAuditEvents : sequence of instance of _TEST_Req_IF_Verification_audit_event;
verificationAuditEvent : instance of _TEST_Req_IF_Verification_audit_event;
jobId1 : string := "95a3b3a7-fada-41d5-b7e2-902079e81001";

begin
        
	logMessage := "AEOrdering::checkOrderedJob";
    Logger::log(Logger::Information, "AEOrdering", logMessage);
    
    // verify that all the jobs have been reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 6), "Test Ordered Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "1" and jobName = "AEOrdering-Test");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Ordered Job: Failed to find` verification audit event id = 1");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 0), "Test Ordered Job: Failed as verification audit event id = 1 reported prevEventIds was invalid");


    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "2");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Ordered Job: Failed to find verification audit event id = 2");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "1"), "Test Ordered Job: Failed as verification audit event id = 2 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "3");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Ordered Job: Failed to find verification audit event id = 3");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "2"), "Test Ordered Job: Failed as verification audit event id = 3 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "4");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Ordered Job: Failed to find verification audit event id = 4");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "3"), "Test Ordered Job: Failed as verification audit event id = 4 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "5");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Ordered Job: Failed to find verification audit event id = 5");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "4"), "Test Ordered Job: Failed as verification audit event id = 5 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "6");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Ordered Job: Failed to find verification audit event id = 6");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "5"), "Test Ordered Job: Failed as verification audit event id = 6 reported prevEventIds was invalid");

    
    inProgressJob := find_one InProgressJob(jobId = jobId1);
	Assertions::assertTrue((inProgressJob /= null), "Test Ordered Job: Failed to find Failed Job 1");
    if inProgressJob /= null then
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "1", "");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "2", "1");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "3", "2");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "4", "3");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "5", "4");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "6", "5");
				// verify that the out of sequence counts are all zero for the job
		job := inProgressJob -> R2.Job;
		Assertions::assertTrue((job.maxOutOfSequence = 0), "Test Ordered Job: Failed max out sequence = " & job.maxOutOfSequence'image);
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((inProgressJob -> R2.Job).totalOutOfSequence = 0, "Test Ordered Job: Failed total out of sequence = " & job.totalOutOfSequence'image);
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((job.outOfSequenceEventCount = 0), "Test Ordered Job: Failed out of sequence event count = " & job.outOfSequenceEventCount'image);
    end if;

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'e82f5ca8-2b51-425f-b952-9c74422f0ec8' DO NOT EDIT THIS LINE.
private service AEOrdering::checkOutOfOrderJob () is
logMessage : string;
inProgressJob : instance of InProgressJob;
reportedAuditEvent : instance of ReportedAuditEvent;
prevAuditEvent : instance of ReportedAuditEvent;
job : instance of Job;
jobId1 : string := "95a3b3a7-fada-41d5-b7e2-902079e81001";
jobId2 : string := "95a3b3a7-fada-41d5-b7e2-902079e81002";
jobId3 : string := "95a3b3a7-fada-41d5-b7e2-902079e81003";
jobId4 : string := "95a3b3a7-fada-41d5-b7e2-902079e81004";

begin
        
	logMessage := "AEOrdering::checkOutOrderedJob";
    Logger::log(Logger::Information, "AEOrdering", logMessage);
    
    inProgressJob := find_one InProgressJob(jobId = jobId1);
	Assertions::assertTrue((inProgressJob /= null), "Test Out of Order Job: Failed to find Failed Job 1");
    if inProgressJob /= null then
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "1", "");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "2", "1");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "3", "2");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "4", "3");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "5", "4");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "6", "5");
		// verify that the out of sequence counts are all zero for the job
		job := inProgressJob -> R2.Job;
		Assertions::assertTrue((job.maxOutOfSequence = 2), "Test Out of Order Job: Failed max out sequence = " & job.maxOutOfSequence'image);
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((inProgressJob -> R2.Job).totalOutOfSequence = 3, "Test Out of Order Job: Failed total out of sequence = " & job.totalOutOfSequence'image);
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((job.outOfSequenceEventCount = 0), "Test Out of Order Job: Failed out of sequence event count = " & job.outOfSequenceEventCount'image);
    end if;

    inProgressJob := find_one InProgressJob(jobId = jobId2);
	Assertions::assertTrue((inProgressJob /= null), "Test Out of Order Job: Failed to find Failed Job 2");
    if inProgressJob /= null then
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "11", "");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "12", "11");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "13", "12");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "14", "13");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "15", "14");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "16", "15");
		// verify that the out of sequence counts are all zero for the job
		job := inProgressJob -> R2.Job;
		Assertions::assertTrue((job.maxOutOfSequence = 4), "Test Out of Order Job: Failed max out sequence = " & job.maxOutOfSequence'image);
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((inProgressJob -> R2.Job).totalOutOfSequence = 4, "Test Out of Order Job: Failed total out of sequence = " & job.totalOutOfSequence'image);
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((job.outOfSequenceEventCount = 0), "Test Out of Order Job: Failed out of sequence event count = " & job.outOfSequenceEventCount'image);
    end if;
        
    inProgressJob := find_one InProgressJob(jobId = jobId3);
	Assertions::assertTrue((inProgressJob /= null), "Test Out of Order Job: Failed to find Failed Job 3");
    if inProgressJob /= null then
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "21", "");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "22", "21");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "23", "22");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "24", "23");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "25", "24");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "26", "25");
		// verify that the out of sequence counts are all zero for the job
		job := inProgressJob -> R2.Job;
		Assertions::assertTrue((job.maxOutOfSequence = 2), "Test Out of Order Job: Failed max out sequence = " & job.maxOutOfSequence'image);
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((inProgressJob -> R2.Job).totalOutOfSequence = 3, "Test Out of Order Job: Failed total out of sequence = " & job.totalOutOfSequence'image);
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((job.outOfSequenceEventCount = 0), "Test Out of Order Job: Failed out of sequence event count = " & job.outOfSequenceEventCount'image);
    end if;
   
    inProgressJob := find_one InProgressJob(jobId = jobId4);
	Assertions::assertTrue((inProgressJob /= null), "Test Out of Order Job: Failed to find Failed Job 4");
    if inProgressJob /= null then
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "27", "");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "28", "27");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "29", "28");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "30", "38");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "31", "29");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "32", "29");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "33", "30");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "34", "31");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "34", "32");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "34", "33");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "35", "34");
		// verify that the out of sequence counts are all zero for the job
		job := inProgressJob -> R2.Job;
		Assertions::assertTrue((job.maxOutOfSequence = 3), "Test Out of Order Job: Failed max out sequence = " & job.maxOutOfSequence'image);
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((inProgressJob -> R2.Job).totalOutOfSequence = 4, "Test Out of Order Job: Failed total out of sequence = " & job.totalOutOfSequence'image);
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((job.outOfSequenceEventCount = 0), "Test Out of Order Job: Failed out of sequence event count = " & job.outOfSequenceEventCount'image);
    end if;
   
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '9b77fe71-7b53-4f64-a9ea-a31cd0b97354' DO NOT EDIT THIS LINE.
private service AEOrdering::checkReverseOrderJob () is
logMessage : string;
inProgressJob : instance of InProgressJob;
reportedAuditEvent : instance of ReportedAuditEvent;
prevAuditEvent : instance of ReportedAuditEvent;
job : instance of Job;
jobId1 : string := "95a3b3a7-fada-41d5-b7e2-902079e81001";

begin
        
	logMessage := "AEOrdering::checkReverseOrderedJob";
    Logger::log(Logger::Information, "AEOrdering", logMessage);
    
    inProgressJob := find_one InProgressJob(jobId = jobId1);
    Assertions::assertTrue((inProgressJob /= null), "Test Reverse Order Job: Failed to find Failed Job");
    if inProgressJob /= null then
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "1", "");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "2", "1");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "3", "2");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "4", "3");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "5", "4");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "6", "5");
		// verify that the out of sequence counts are all zero for the job
		job := inProgressJob -> R2.Job;
		Assertions::assertTrue((job.maxOutOfSequence = 5), "Test Reverse Order Job: Failed max out sequence = " & job.maxOutOfSequence'image);
		
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((inProgressJob -> R2.Job).totalOutOfSequence = 5, "Test Reverse Order Job: Failed total out of sequence = " & job.totalOutOfSequence'image);
		
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((job.outOfSequenceEventCount = 0), "Test Reverse Order Job: Failed out of sequence event count = " & job.outOfSequenceEventCount'image);
		
    end if;
    
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'fd33aecf-72b2-4e42-87bd-eb2e2f3ef412' DO NOT EDIT THIS LINE.
private service AEOrdering::testInvalidJobDefinition () is
logMessage : string;
auditEventTime : timestamp;
failedJob : instance of FailedJob;
failedAuditEvent : instance of FailedAuditEvent;
reportAuditFailures : sequence of instance of _TEST_Req_IF_Audited_reportAuditFailure;
prevEventIds : sequence of string;
emptyPrevEventIds : sequence of string;
auditEventData : AuditEventDataType;
jobId1 : string := "95a3b3a7-fada-41d5-b7e2-902079e81001";
jobId2 : string := "95a3b3a7-fada-41d5-b7e2-902079e81002";
jobId3 : string := "95a3b3a7-fada-41d5-b7e2-902079e81003";

begin
	
	logMessage := "AEOrdering::testInvalidJobDefinition";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
	AEOrdering::clearDomain(true, false);
	
	// Test 1 report an event invalid node
	logMessage := "AEOrdering::testInvalidJobDefinition - Test invalid job definiton";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
	auditEventTime := timestamp'now;
	AEOrdering::AcceptEvent(jobId1, "jobId1", "NoEvent", "1", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	
	// service the event queue
	Test::service_event_queue();
	
	// verify that the event was reported to Audited as failed
	AEOrdering::checkInvalidJobDefinition(jobId1, "1");
	
	// Test 2 report an event with invalid app
	AEOrdering::AcceptEvent(jobId2, "jobId2", "NoEvent", "2", auditEventTime'image, emptyPrevEventIds, auditEventData);
	
	// service the event queue
	Test::service_event_queue();
	
	// verify that the event was reported to Audited as failed
	AEOrdering::checkInvalidJobDefinition(jobId2, "2");
		
	// report an event with invalid event type
	AEOrdering::AcceptEvent(jobId3, "jobId3",  "NoEvent", "3", auditEventTime'image, emptyPrevEventIds, auditEventData);
	
	// service the event queue
	Test::service_event_queue();
		
	// Verify that we have one failed job and one failed audit event
	AEOrdering::checkInvalidJobDefinition(jobId3, "3");

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '3eab39c4-5abc-4ccc-bce3-a8cf784e1a43' DO NOT EDIT THIS LINE.
private service AEOrdering::testJobComplete () is
logMessage : string;
auditEventTime : timestamp;
job : instance of Job;
verificationAuditEvents : sequence of instance of _TEST_Req_IF_Verification_audit_event;
verificationAuditEvent : instance of _TEST_Req_IF_Verification_audit_event;
verificationFailedJobs : sequence of instance of _TEST_Req_IF_Verification_failedJob;
prevEventIds : sequence of string;
emptyPrevEventIds : sequence of string;
auditEventData : AuditEventDataType;
storedJobIdentifier : instance of StoredJobIdentifier;
jobStore : instance of JobStore;
jobId1 : string := "95a3b3a7-fada-41d5-b7e2-902079e81001";
jobId2 : string := "95a3b3a7-fada-41d5-b7e2-902079e81002";
jobId3 : string := "95a3b3a7-fada-41d5-b7e2-902079e81003";

begin
	
	logMessage := "AEOrdering::testJobComplete";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
	AEOrdering::clearDomain(true, false);

	auditEventTime := timestamp'now;

	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "aaa", "1", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	Test::service_event_queue();

	prevEventIds := emptyPrevEventIds & "1"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "bbb", "2", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();

	prevEventIds := emptyPrevEventIds & "2"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "ccc", "3", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	// fire the job complete and then the delete job
	job := find_one Job(jobId = jobId1);
	if job /= null then
		generate Job.jobCompleted() to job;
		Test::service_event_queue();
		generate Job.deleteJob() to job;
		Test::service_event_queue();
	else
		Test::fail("", 1, "Test Job Complete: Failed to find Job");
	end if;
	
	// check that the StoredJobIdentifier has been recorded
	storedJobIdentifier := find_one StoredJobIdentifier(jobId = jobId1);
    Assertions::assertTrue((storedJobIdentifier /= null), "Test Job Complete: Failed to find StoredJobIdentifier");
	
	// verify that the job was completed
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 3), "Test Job Complete: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "1");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Job Complete: Failed to find` verification audit event id = 1");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 0), "Test Job Complete: Failed as verification audit event id = 1 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "2");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Job Complete: Failed to find verification audit event id = 2");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "1"), "Test Job Complete: Failed as verification audit event id = 2 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "3");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Job Complete: Failed to find verification audit event id = 3");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "2"), "Test Job Complete: Failed as verification audit event id = 2 reported prevEventIds was invalid");
	AEOrdering::checkJobComplete();
	delete verificationAuditEvents;
	
	// create a failed job
	auditEventTime := timestamp'now - @PT24H@;
	AEOrdering::AcceptEvent(jobId2, "AEOrdering-Test", "aaa", "1", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	job := find_one Job(jobId = jobId2);
	if job /= null then
		// the job should be failed so generate the delete job event
		generate Job.deleteJob() to job;
		Test::service_event_queue();
	else
		Test::fail("", 1, "Test Job Complete: Failed to find Failed Job");
	end if;
	// verify that the job was completed
	AEOrdering::checkJobComplete();
	
	// create a blocked job
	verificationFailedJobs := find _TEST_Req_IF_Verification_failedJob();
	delete verificationFailedJobs;
	auditEventTime := timestamp'now;
	prevEventIds := emptyPrevEventIds & "1"; 
	AEOrdering::AcceptEvent(jobId3, "AEOrdering-Test", "bbb", "2", auditEventTime'image, prevEventIds, auditEventData);	
	job := find_one Job(jobId = jobId3);
	if job /= null then
		// the job should be failed so generate the delete job event
		AEOrdering::deleteJob(jobId3);
		Test::service_event_queue();
		Test::service_event_queue();
		verificationFailedJobs := find _TEST_Req_IF_Verification_failedJob(jobId = jobId3);
	    Assertions::assertTrue((verificationFailedJobs'length = 1), "Test Job Failure: Invalid number of failed jobs event = " & verificationFailedJobs'length'image);
	    Assertions::assertTrue(((find verificationFailedJobs(jobId = jobId3))'length = 1), "Test Job Failure: Failed to find failed job id = " & jobId3);
		delete verificationFailedJobs;
	else
		Test::fail("", 1, "Test Job Complete: Failed to find Failed Job");
	end if;
	
	// test purge job store
	jobStore := find_one JobStore();
	jobStore.jobStoreAgeLimit := @PT0S@;
	schedule jobStore.jobStoreTimer generate JobStore.purgeJobStore() to jobStore delay @PT1S@;
	Test::fire_scheduled_timers(timestamp'now + duration'seconds(1));
	Test::fire_scheduled_timers(timestamp'now + duration'seconds(1));
	storedJobIdentifier := find_one StoredJobIdentifier(jobId = jobId1);
    Assertions::assertTrue((storedJobIdentifier = null), "Test Job Complete: Failed to find StoredJobIdentifier");
	

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '8fdfdb63-8e43-47d3-82e7-6ab6261dcc60' DO NOT EDIT THIS LINE.
private service AEOrdering::testJobFailure () is
logMessage : string;
auditEventTime : timestamp;
blockedAuditEvent : instance of BlockedAuditEvent;
verificationAuditEvents : sequence of instance of _TEST_Req_IF_Verification_audit_event;
verificationAuditEvent : instance of _TEST_Req_IF_Verification_audit_event;
verificationFailedJobs : sequence of instance of _TEST_Req_IF_Verification_failedJob;
completedJob : instance of ArchivedJob;
verificationJobComplete : instance of _TEST_Req_IF_Verification_jobComplete;
failedJob : instance of FailedJob;
verificationJobFailed : instance of _TEST_Req_IF_Verification_failedJob;
job : instance of Job;
prevEventIds : sequence of string;
emptyPrevEventIds : sequence of string;
auditEventData : AuditEventDataType;
jobId1 : string := "95a3b3a7-fada-41d5-b7e2-902079e81001";
jobId2 : string := "95a3b3a7-fada-41d5-b7e2-902079e81002";
jobId3 : string := "95a3b3a7-fada-41d5-b7e2-902079e81003";
jobId4 : string := "95a3b3a7-fada-41d5-b7e2-902079e81004";

begin
	
	logMessage := "AEOrdering::testJobFailure";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
	AEOrdering::clearDomain(true, false);
	delete (find _TEST_Req_IF_Verification_audit_event());
	delete (find _TEST_Req_IF_Verification_failedJob());
	auditEventTime := timestamp'now;
	
	// start a new job
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "aaa", "1", auditEventTime'image, emptyPrevEventIds, auditEventData);
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 1), "Test Job Failure: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "1");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Job Failure: Failed to find` verification audit event id = 1");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 0), "Test Job Failure: Failed as verification audit event id = 1 reported prevEventIds was invalid");
	delete verificationAuditEvents;
	
	// block an event then time it out so the job fails
	prevEventIds := emptyPrevEventIds & "2"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "ccc", "3", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();

    // verify the blocked event has not been reported
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Job Failure: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
    blockedAuditEvent := find_one BlockedAuditEvent(auditEventId = "3");
    Assertions::assertTrue((blockedAuditEvent /= null), "Test Job Failure: Audit event not blocked");
    if blockedAuditEvent /= null then
    	// fire the event to time the blocked event out
    	generate BlockedAuditEvent.eventFailed() to blockedAuditEvent;
		Test::service_event_queue();
    end if;
    
	// verify that the job was reported as failed to verification
	verificationFailedJobs := find _TEST_Req_IF_Verification_failedJob();
    Assertions::assertTrue((verificationFailedJobs'length = 1), "Test Job Failure: Invalid number of failed jobs event = " & verificationFailedJobs'length'image);
    Assertions::assertTrue(((find verificationFailedJobs(jobId = jobId1))'length = 1), "Test Job Failure: Failed to find failed job id = 1");
	delete verificationFailedJobs;
	
    AEOrdering::checkJobFailures(jobId1, "3");
	
	auditEventTime := timestamp'now - @PT24H@;
	// report an event for a job with a stale time so the job fails
	AEOrdering::AcceptEvent(jobId2, "AEOrdering-Test", "aaa", "21", auditEventTime'image, emptyPrevEventIds, auditEventData);
	
	// verify that no job or event has been reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Job Failure: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
    AEOrdering::checkJobFailures(jobId2, "21");
	delete verificationAuditEvents;
	
	// test that a job is reported as failed if an event arrives after it has completed
	auditEventTime := timestamp'now;

	AEOrdering::AcceptEvent(jobId3, "AEOrdering-Test", "aaa", "31", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	Test::service_event_queue();

    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 1), "Test Job Failure: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	delete verificationAuditEvents;
	
	// fire the job complete
	job := find_one Job(jobId = jobId3);
	if job /= null then
		generate Job.jobCompleted() to job;
		Test::service_event_queue();
		completedJob := find_one ArchivedJob(jobId = jobId3);
		Assertions::assertTrue((completedJob /= null), "Test Job Failure: Job id did not complete for job 3");
		verificationJobComplete := find_one _TEST_Req_IF_Verification_jobComplete(jobId = jobId3);
		Assertions::assertTrue((verificationJobComplete /= null), "Test Job Failure: Job complete was not reported for job 3");
		delete verificationJobComplete;
		// send in  new event now that the job is complete
		prevEventIds := emptyPrevEventIds & "1"; 
		AEOrdering::AcceptEvent(jobId3, "AEOrdering-Test", "bbb", "32", auditEventTime'image, prevEventIds, auditEventData);
		Test::service_event_queue();
		failedJob := find_one FailedJob(jobId = jobId3);
		Assertions::assertTrue((completedJob /= null), "Test Job Failure: Job id did not transition to failed for job 3");
		verificationJobFailed := find_one _TEST_Req_IF_Verification_failedJob(jobId = jobId3);
		Assertions::assertTrue((verificationJobFailed /= null), "Test Job Failure: Job failure was not reported for job 3");
		delete verificationJobFailed;
	else
		Test::fail("", 3, "Test Job Complete: Failed to find Job");
	end if;

	// test if an event in the same job has a different job name it fails
	// report an event for a job 
	AEOrdering::AcceptEvent(jobId4, "AEOrdering-Test", "aaa", "41", auditEventTime'image, emptyPrevEventIds, auditEventData);
	
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 1), "Test Job Failure: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	delete verificationAuditEvents;

	// report an event for a job with an invalid job name
	AEOrdering::AcceptEvent(jobId4, "invalidJobName", "bbb", "42", auditEventTime'image, emptyPrevEventIds, auditEventData);
	
    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "1");
	// verify that no job or event has been reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Job Failure: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
    AEOrdering::checkJobFailures(jobId4, "42");
	delete verificationAuditEvents;
	
	
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'd5519b96-024f-4a4a-bbea-1d5fbb3e387d' DO NOT EDIT THIS LINE.
private service AEOrdering::checkOrder ( job : in instance of Job,
                                        eventId : in string,
                                        prevEventId : in string ) is
logMessage : string;
reportedAuditEvent : instance of ReportedAuditEvent;
prevAuditEvent : instance of ReportedAuditEvent;

begin
	reportedAuditEvent := find_one (job -> R9.AuditEvent -> R4.ReportedAuditEvent)(auditEventId = eventId);
    Assertions::assertTrue((reportedAuditEvent /= null), "Test order check: Failed to find Reported Audit Event");
	
	if prevEventId /= "" then
		prevAuditEvent := find_one (reportedAuditEvent -> R4.AuditEvent -> R11.follows.AuditEvent -> R4.ReportedAuditEvent)(auditEventId = prevEventId);
	    Assertions::assertTrue((reportedAuditEvent /= null), "Test order check: Failed to find follows Reported Audit Event");
	end if;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '085925f4-b2d4-4859-995d-50fb49fec50e' DO NOT EDIT THIS LINE.
private service AEOrdering::testOrderedJob () is
logMessage : string;
auditEventTime : timestamp;
prevEventIds : sequence of string;
emptyPrevEventIds : sequence of string;
auditEventData : AuditEventDataType;
jobId1 : string := "95a3b3a7-fada-41d5-b7e2-902079e81001";

begin
	
	logMessage := "AEOrdering::testOrderedJob";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
	AEOrdering::clearDomain(true, false);
	
	auditEventTime := timestamp'now;
	
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "aaa", "1", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	Test::service_event_queue();
	
	prevEventIds := emptyPrevEventIds & "1"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "bbb", "2", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	prevEventIds := emptyPrevEventIds & "2"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "ccc", "3", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();

	prevEventIds := emptyPrevEventIds & "3"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "ddd", "4", auditEventTime'image, prevEventIds, auditEventData);	
	Test::service_event_queue();

	prevEventIds := emptyPrevEventIds & "4"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "eee", "5", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();

	prevEventIds := emptyPrevEventIds & "5"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "fff", "6", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	// verify the test
	AEOrdering::checkOrderedJob();
	
	// test that the delete job can be called and the jobs are deleted
	AEOrdering::deleteJob(jobId1);
	Assertions::assertTrue(((find Job())'length = 0), "Test Ordered Job: Job has not been deleted");
	
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'f85d3e58-30f3-496b-8afc-252e7a021b2a' DO NOT EDIT THIS LINE.
private service AEOrdering::testOutOfOrderJob () is
logMessage : string;
auditEventTime : timestamp;
verificationAuditEvents : sequence of instance of _TEST_Req_IF_Verification_audit_event;
verificationAuditEvent : instance of _TEST_Req_IF_Verification_audit_event;
prevEventIds : sequence of string;
emptyPrevEventIds : sequence of string;
auditEventData : AuditEventDataType;
jobId1 : string := "95a3b3a7-fada-41d5-b7e2-902079e81001";
jobId2 : string := "95a3b3a7-fada-41d5-b7e2-902079e81002";
jobId3 : string := "95a3b3a7-fada-41d5-b7e2-902079e81003";
jobId4 : string := "95a3b3a7-fada-41d5-b7e2-902079e81004";

begin
	
	logMessage := "AEOrdering::testOrderedJob";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
	AEOrdering::clearDomain(true, false);
	delete (find _TEST_Req_IF_Verification_audit_event());
	
	auditEventTime := timestamp'now;
	
	// job 1	
	// report event 2
	prevEventIds := emptyPrevEventIds & "1"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "bbb", "2", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

	// report event 1
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "aaa", "1", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 2), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "1");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 1");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 0), "Test Out of Order Job: Failed as verification audit event id = 1 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "2");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 1");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "1"), "Test Out of Order Job: Failed as verification audit event id = 2 reported prevEventIds was invalid");

	delete verificationAuditEvents;

	// report event 4
	prevEventIds := emptyPrevEventIds & "3"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "ddd", "4", auditEventTime'image, prevEventIds, auditEventData);	
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
	// report event 5
	prevEventIds := emptyPrevEventIds & "4"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "eee", "5", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
	// report event 3
	prevEventIds := emptyPrevEventIds & "2"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "ccc", "3", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 3), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "3");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 3");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "2"), "Test Out of Order Job: Failed as verification audit event id = 3 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "4");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 4");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "3"), "Test Out of Order Job: Failed as verification audit event id = 4 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "5");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 5");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "4"), "Test Out of Order Job: Failed as verification audit event id = 5 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	
	// report event 6	
	prevEventIds := emptyPrevEventIds & "5"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "fff", "6", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 1), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "6");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 6");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "5"), "Test Out of Order Job: Failed as verification audit event id = 6 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	
	
	// job 2
	// report event 11
	AEOrdering::AcceptEvent(jobId2, "AEOrdering-Test", "aaa", "11", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 1), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "11");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 11");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 0), "Test Out of Order Job: Failed as verification audit event id = 11 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	
	// report event 13
	prevEventIds := emptyPrevEventIds & "12"; 
	AEOrdering::AcceptEvent(jobId2, "AEOrdering-Test", "ccc", "13", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
	// report event 14
	prevEventIds := emptyPrevEventIds & "13"; 
	AEOrdering::AcceptEvent(jobId2, "AEOrdering-Test", "ddd", "14", auditEventTime'image, prevEventIds, auditEventData);	
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
	// report event 15
	prevEventIds := emptyPrevEventIds & "14"; 
	AEOrdering::AcceptEvent(jobId2, "AEOrdering-Test", "eee", "15", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
	// report event 16
	prevEventIds := emptyPrevEventIds & "15"; 
	AEOrdering::AcceptEvent(jobId2, "AEOrdering-Test", "fff", "16", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
	// report event 12
	prevEventIds := emptyPrevEventIds & "11"; 
	AEOrdering::AcceptEvent(jobId2, "AEOrdering-Test", "bbb", "12", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
	// verify that the job and audit event was reported to verification
    Assertions::assertTrue((verificationAuditEvents'length = 5), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "12");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 12");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "11"), "Test Out of Order Job: Failed as verification audit event id = 12 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "13");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 13");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "12"), "Test Out of Order Job: Failed as verification audit event id = 13 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "14");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 14");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "13"), "Test Out of Order Job: Failed as verification audit event id = 13 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "15");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 15");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "14"), "Test Out of Order Job: Failed as verification audit event id = 15 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "16");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 16");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "15"), "Test Out of Order Job: Failed as verification audit event id = 16 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	
	// job 3
	// report event 22
	prevEventIds := emptyPrevEventIds & "21"; 
	AEOrdering::AcceptEvent(jobId3, "AEOrdering-Test", "bbb", "22", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
	// report event 24
	prevEventIds := emptyPrevEventIds & "23"; 
	AEOrdering::AcceptEvent(jobId3, "AEOrdering-Test", "ddd", "24", auditEventTime'image, prevEventIds, auditEventData);	
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
	// report event 21
	AEOrdering::AcceptEvent(jobId3, "AEOrdering-Test", "aaa", "21", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 2), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "21");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 21");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 0), "Test Out of Order Job: Failed as verification audit event id = 21 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "22");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 22");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "21"), "Test Out of Order Job: Failed as verification audit event id = 22 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	
	// report event 25
	prevEventIds := emptyPrevEventIds & "24"; 
	AEOrdering::AcceptEvent(jobId3, "AEOrdering-Test", "eee", "25", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
	// report event 23
	prevEventIds := emptyPrevEventIds & "22"; 
	AEOrdering::AcceptEvent(jobId3, "AEOrdering-Test", "ccc", "23", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 3), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "23");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 23");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "22"), "Test Out of Order Job: Failed as verification audit event id = 23 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "24");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 24");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "23"), "Test Out of Order Job: Failed as verification audit event id = 24 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "25");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 25");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "24"), "Test Out of Order Job: Failed as verification audit event id = 25 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	
	// report event 26
	prevEventIds := emptyPrevEventIds & "25"; 
	AEOrdering::AcceptEvent(jobId3, "AEOrdering-Test", "fff", "26", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 1), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "26");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 26");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "25"), "Test Out of Order Job: Failed as verification audit event id = 26 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	


	// job 4
	// all prev ids are received before forwarding followed by events
	AEOrdering::AcceptEvent(jobId4, "AEOrdering-Test", "aaa", "27", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	Test::service_event_queue();

    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 1), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "27");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 27");

	delete verificationAuditEvents;
	
	prevEventIds := emptyPrevEventIds & "27"; 
	AEOrdering::AcceptEvent(jobId4, "AEOrdering-Test", "bbb", "28", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 1), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "28");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 28");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "27"), "Test Out of Order Job: Failed as verification audit event id = 27 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	
	prevEventIds := emptyPrevEventIds & "31" & "32" & "33"; 
	AEOrdering::AcceptEvent(jobId4, "AEOrdering-Test", "eee", "34", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
	prevEventIds := emptyPrevEventIds & "29"; 
	AEOrdering::AcceptEvent(jobId4, "AEOrdering-Test", "ddd", "31", auditEventTime'image, prevEventIds, auditEventData);	
	Test::service_event_queue();

    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
	prevEventIds := emptyPrevEventIds & "29"; 
	AEOrdering::AcceptEvent(jobId4, "AEOrdering-Test", "ddd", "32", auditEventTime'image, prevEventIds, auditEventData);	
	Test::service_event_queue();
	
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
	prevEventIds := emptyPrevEventIds & "28"; 
	AEOrdering::AcceptEvent(jobId4, "AEOrdering-Test", "ccc", "29", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();

    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 3), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "29");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 29");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "28"), "Test Out of Order Job: Failed as verification audit event id = 28 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "31");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 31");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "29"), "Test Out of Order Job: Failed as verification audit event id = 29 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "32");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 32");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "29"), "Test Out of Order Job: Failed as verification audit event id = 29 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	
	prevEventIds := emptyPrevEventIds & "30"; 
	AEOrdering::AcceptEvent(jobId4, "AEOrdering-Test", "ddd", "33", auditEventTime'image, prevEventIds, auditEventData);	
	Test::service_event_queue();

    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	
	prevEventIds := emptyPrevEventIds & "28"; 
	AEOrdering::AcceptEvent(jobId4, "AEOrdering-Test", "ccc", "30", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();

    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 3), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "30");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 30");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "28"), "Test Out of Order Job: Failed as verification audit event id = 28 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "33");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 33");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "30"), "Test Out of Order Job: Failed as verification audit event id = 30 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "34");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 34");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 3 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "31" and 
    	                    verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first + 1] = "32" and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first + 2] = "33"), "Test Out of Order Job: Failed as verification audit event id = 34 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	
	prevEventIds := emptyPrevEventIds & "34"; 
	AEOrdering::AcceptEvent(jobId4, "AEOrdering-Test", "fff", "35", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 1), "Test Out of Order Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "35");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Out of Order Job: Failed to find verification audit event id = 35");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "34"), "Test Out of Order Job: Failed as verification audit event id = 34 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	
	// verify the model is in the correct state
	AEOrdering::checkOutOfOrderJob();

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '6f199fef-6ae3-44c4-b306-9d76bf7e94c3' DO NOT EDIT THIS LINE.
private service AEOrdering::testReverseOrderedJob () is
logMessage : string;
auditEventTime : timestamp;
verificationAuditEvents : sequence of instance of _TEST_Req_IF_Verification_audit_event;
verificationAuditEvent : instance of _TEST_Req_IF_Verification_audit_event;
prevEventIds : sequence of string;
emptyPrevEventIds : sequence of string;
auditEventData : AuditEventDataType;
jobId1 : string := "95a3b3a7-fada-41d5-b7e2-902079e81001";

begin
	
	logMessage := "AEOrdering::testReverseOrderedJob";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
	verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
	delete verificationAuditEvents;
	AEOrdering::clearDomain(true, false);
	
	auditEventTime := timestamp'now;

	prevEventIds := emptyPrevEventIds & "5"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "fff", "6", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	prevEventIds := emptyPrevEventIds & "4"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "eee", "5", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	prevEventIds := emptyPrevEventIds & "3"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "ddd", "4", auditEventTime'image, prevEventIds, auditEventData);	
	Test::service_event_queue();
		
	prevEventIds := emptyPrevEventIds & "2"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "ccc", "3", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	prevEventIds := emptyPrevEventIds & "1"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "bbb", "2", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "aaa", "1", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	Test::service_event_queue();
	
	
	// verify that the job and audit event was reported to verification
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 6), "Test Reverse Ordered Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "1");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Reverse Ordered Job: Failed to find verification audit event id = 1");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 0), "Test Reverse Ordered Job: Failed as verification audit event id = 11 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "2");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Reverse Ordered Job: Failed to find verification audit event id = 2");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "1"), "Test Reverse Ordered Job: Failed as verification audit event id = 2 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "3");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Reverse Ordered Job: Failed to find verification audit event id = 3");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "2"), "Test Reverse Ordered Job: Failed as verification audit event id = 3 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "4");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Reverse Ordered Job: Failed to find verification audit event id = 4");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "3"), "Test Reverse Ordered Job: Failed as verification audit event id = 4 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "5");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Reverse Ordered Job: Failed to find verification audit event id = 5");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "4"), "Test Reverse Ordered Job: Failed as verification audit event id = 5 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "6");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Reverse Ordered Job: Failed to find verification audit event id = 6");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "5"), "Test Reverse Ordered Job: Failed as verification audit event id = 6 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	
	// verify the model is in the correct state
	AEOrdering::checkReverseOrderJob();
	

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'fb14d3d5-6028-4549-a932-5c42dd68b596' DO NOT EDIT THIS LINE.
private service AEOrdering::testConfigFile () is
reportedEventJobDefinitions : sequence of instance of _TEST_Req_IF_Verification_jobDefinition;
systemSpec : instance of SystemSpec;
configFile : string := "config.json";
verificationTimerControls : sequence of instance of _TEST_Req_IF_Verification_reportVerificationTimerControls;
verificationTimerControl : instance of _TEST_Req_IF_Verification_reportVerificationTimerControls;

begin
	
	AEOrdering::clearDomain(true, true);
	reportedEventJobDefinitions := find _TEST_Req_IF_Verification_jobDefinition();
	delete reportedEventJobDefinitions;
	verificationTimerControls := find _TEST_Req_IF_Verification_reportVerificationTimerControls();
	delete verificationTimerControls;
	systemSpec := find_one SystemSpec();
	systemSpec.configFile := configFile;
	Filesystem::touch_file(Filesystem::filename(systemSpec.configFilePath & configFile));
    
	// fire the timer to check the config file
	generate SystemSpec.checkConfigUpdate() to systemSpec;
	Test::service_event_queue();
	
	Assertions::assertTrue((systemSpec.defaultBlockedAuditEventDuration = @PT24H@), "Test Config File: Failed to set defaultBlockedAuditEventDuration, expected 24H found " & (systemSpec.defaultBlockedAuditEventDuration)'image);  
	Assertions::assertTrue((systemSpec.defaultStaleAuditEventDuration = @PT24H@), "Test Config File: Failed to set defaultStaleAuditEventDuration, expected 24H found " & (systemSpec.defaultStaleAuditEventDuration)'image);  

	// When the domain has started it should report the details of the Job definitions to verifications
	reportedEventJobDefinitions := find _TEST_Req_IF_Verification_jobDefinition();
	Assertions::assertTrue((reportedEventJobDefinitions'length = 2), "Test Config File: Failed to find the correct number of reported event definitions, expected 2 found " & (reportedEventJobDefinitions'length)'image);
	
	for jobDefinition in reportedEventJobDefinitions loop
		if jobDefinition.jobName = "Job1" then
			if jobDefinition.eventDefinitions'length = 17 then
				for reportEventDefinition in jobDefinition.eventDefinitions loop
					if reportEventDefinition.sequenceName = "Sequence1" and reportEventDefinition.eventType = "TestEvent1" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence1" and reportEventDefinition.eventType = "TestEvent2" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence1" and reportEventDefinition.eventType = "TestEvent3" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence1" and reportEventDefinition.eventType = "TestEvent4" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence1" and reportEventDefinition.eventType = "TestEvent5" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence1" and reportEventDefinition.eventType = "TestEvent6" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence1" and reportEventDefinition.eventType = "TestEvent7" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence1" and reportEventDefinition.eventType = "TestEvent8" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence1" and reportEventDefinition.eventType = "TestEvent9" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence1" and reportEventDefinition.eventType = "TestEvent10" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence1" and reportEventDefinition.eventType = "TestEvent11" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence1" and reportEventDefinition.eventType = "TestEvent12" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence1" and reportEventDefinition.eventType = "TestEvent13" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence2" and reportEventDefinition.eventType = "TestEvent14" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence2" and reportEventDefinition.eventType = "TestEvent15" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence3" and reportEventDefinition.eventType = "TestEvent16" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence3" and reportEventDefinition.eventType = "TestEvent17" and reportEventDefinition.occurrenceId = 1 then
					   null;
					else
						Assertions::assertTrue(false, "Unknown reported event definitions for Job 1");  
					end if;
				end loop;
			else
				Assertions::assertTrue(false, "Test Config File: Failed to find the correct number of reported event definitions for Job 1, expected 17 found " & (jobDefinition.eventDefinitions'length)'image);  
			end if;
		elsif jobDefinition.jobName = "Job2" then
			if jobDefinition.eventDefinitions'length = 8 then
				for reportEventDefinition in jobDefinition.eventDefinitions loop
					if reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent18" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent19" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent20" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent21" and reportEventDefinition.occurrenceId = 2 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent20" and reportEventDefinition.occurrenceId = 3 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent21" and reportEventDefinition.occurrenceId = 4 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent24" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent25" and reportEventDefinition.occurrenceId = 1 then
					   null;
					else
						Assertions::assertTrue(false, "Unknown reported event definitions for Job 2");  
					end if;
				end loop;
			else
				Assertions::assertTrue(false, "Test Config File: Failed to find the correct number of reported event definitions for Job 2, expected 8 found " & (jobDefinition.eventDefinitions'length)'image);  
			end if;
		else
			Assertions::assertTrue(false, "Test Config File: Unknown job reported, jobName = " & jobDefinition.jobName);  
		end if;
	end loop;

	verificationTimerControls := find _TEST_Req_IF_Verification_reportVerificationTimerControls();
	Assertions::assertTrue((verificationTimerControls'length = 1), "Test Config File: Failed to find the correct number of reported cerification timer controls, expected 1 found " & (verificationTimerControls'length)'image);
	verificationTimerControl := find_one verificationTimerControls();
    Assertions::assertTrue((verificationTimerControl.maxIntraSequenceEventTimeoutPeriod = @PT1S@), "Test Config Test Data: Invalid maxIntraSequenceEventTimeoutPeriod, value = " & verificationTimerControl.maxIntraSequenceEventTimeoutPeriod'image);
    Assertions::assertTrue((verificationTimerControl.waitPeriodForAllJobsCompletedCheck = duration'days(1)), "Test Config Test Data: Invalid waitPeriodForAllJobsCompletedCheck");
    Assertions::assertTrue((verificationTimerControl.waitPeriodForJobDeletion = duration'minutes(30)), "Test Config Test Data: Invalid waitPeriodForJobDeletion");
    Assertions::assertTrue((verificationTimerControl.waitPeriodForInvariantDeletion = duration'days(1)), "Test Config Test Data: Invalid waitPeriodForInvariantDeletion");
    Assertions::assertTrue((verificationTimerControl.timeoutPeriodForRetreivingStoredInvariants = duration'seconds(10)), "Test Config Test Data: Invalid timeoutPeriodForRetreivingStoredInvariants");
    Assertions::assertTrue((verificationTimerControl.timeoutPeriodForHangingJob = duration'seconds(15)), "Test Config Test Data: Invalid timeoutPeriodForHangingJob");
	delete verificationTimerControls;
	
		
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '0cc16d09-63c4-4dc2-acd5-7d2fc752eb0a' DO NOT EDIT THIS LINE.
private service AEOrdering::testForkAndMerge () is
logMessage : string;
auditEventTime : timestamp;
verificationAuditEvents : sequence of instance of _TEST_Req_IF_Verification_audit_event;
verificationAuditEvent : instance of _TEST_Req_IF_Verification_audit_event;
inProgressJob : instance of InProgressJob;
job : instance of Job;
prevEventIds : sequence of string;
emptyPrevEventIds : sequence of string;
auditEventData : AuditEventDataType;
jobId1 : string := "95a3b3a7-fada-41d5-b7e2-902079e81001";
jobName : string := "AEOrdering-Test";

begin
	
	logMessage := "AEOrdering::fork and merge";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
	AEOrdering::clearDomain(true, false);
	
	auditEventTime := timestamp'now;
	
	AEOrdering::AcceptEvent(jobId1, jobName, "aaa", "1", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	Test::service_event_queue();
	
	prevEventIds := emptyPrevEventIds & "1"; 
	AEOrdering::AcceptEvent(jobId1, jobName, "bbb", "2", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	

	prevEventIds := emptyPrevEventIds & "2"; 
	AEOrdering::AcceptEvent(jobId1, jobName, "ccc", "3", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();

	prevEventIds := emptyPrevEventIds & "2"; 	
	AEOrdering::AcceptEvent(jobId1, jobName, "ccc", "4", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();

	// Add a merge event before the final event to be merged and verify it does not get reported
	prevEventIds := emptyPrevEventIds & "3" & "4" & "5"; 
	AEOrdering::AcceptEvent(jobId1, jobName, "ddd", "6", auditEventTime'image, prevEventIds, auditEventData);	
	Test::service_event_queue();

	// verify the test
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 4), "Test Fork And Merge Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "1");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Fork And Merge Job: Failed to find verification audit event id = 1");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 0), "Test Fork And Merge Job: Failed as verification audit event id = 11 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "2");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Fork And Merge Job: Failed to find verification audit event id = 2");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "1"), "Test Fork And Merge Job: Failed as verification audit event id = 2 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "3");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Fork And Merge Job: Failed to find verification audit event id = 3");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "2"), "Test Fork And Merge Job: Failed as verification audit event id = 3 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "4");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Fork And Merge Job: Failed to find verification audit event id = 4");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "2"), "Test Fork And Merge Job: Failed as verification audit event id = 4 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	
	prevEventIds := emptyPrevEventIds & "2"; 
	AEOrdering::AcceptEvent(jobId1, jobName, "ccc", "5", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	prevEventIds := emptyPrevEventIds & "6"; 
	AEOrdering::AcceptEvent(jobId1, jobName, "eee", "7", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();

	prevEventIds := emptyPrevEventIds & "7"; 
	AEOrdering::AcceptEvent(jobId1, jobName, "fff", "8", auditEventTime'image, prevEventIds, auditEventData);
	Test::service_event_queue();
	
	// verify the test
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 4), "Test Fork And Merge Job: Invalid number of verification audit event = " & verificationAuditEvents'length'image);

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "5");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Fork And Merge Job: Failed to find verification audit event id = 5");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "2"), "Test Fork And Merge Job: Failed as verification audit event id = 5 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "6");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Fork And Merge Job: Failed to find verification audit event id = 6");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 3 and 
    	                    verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "3" and
    	                    verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first + 1] = "4" and
    	                    verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first + 2] = "5"), "Test Fork And Merge Job: Failed as verification audit event id = 6 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "7");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Fork And Merge Job: Failed to find verification audit event id = 7");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "6"), "Test Fork And Merge Job: Failed as verification audit event id = 7 reported prevEventIds was invalid");

    verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "8");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Fork And Merge Job: Failed to find verification audit event id = 8");
    Assertions::assertTrue((verificationAuditEvent.prevAuditEventIds'length = 1 and verificationAuditEvent.prevAuditEventIds[verificationAuditEvent.prevAuditEventIds'first] = "7"), "Test Fork And Merge Job: Failed as verification audit event id = 8 reported prevEventIds was invalid");

	delete verificationAuditEvents;
	
    inProgressJob := find_one InProgressJob(jobId = jobId1);
	Assertions::assertTrue((inProgressJob /= null), "Test Fork And Merge Job: Failed to find Failed Job 1");
    if inProgressJob /= null then
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "1", "");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "2", "1");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "3", "2");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "4", "2");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "5", "2");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "6", "6");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "7", "6");
		AEOrdering::checkOrder(inProgressJob -> R2.Job, "8", "7");
		// verify that the out of sequence counts are all zero for the job
		job := inProgressJob -> R2.Job;
		Assertions::assertTrue((job.maxOutOfSequence = 1), "Test Fork And Merge Job: Failed max out sequence = " & job.maxOutOfSequence'image);
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((inProgressJob -> R2.Job).totalOutOfSequence = 1, "Test Ordered Job: Failed total out of sequence = " & job.totalOutOfSequence'image);
		// verify that the out of sequence counts are all zero for the job
		Assertions::assertTrue((job.outOfSequenceEventCount = 0), "Test Fork And Merge Job: Failed out of sequence event count = " & job.outOfSequenceEventCount'image);
    end if;

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '32afe937-e1a3-4661-a9fe-5be093ecda71' DO NOT EDIT THIS LINE.
private service AEOrdering::testOrderedJobWithData () is
logMessage : string;
auditEventTime : timestamp;
prevEventIds : sequence of string;
emptyPrevEventIds : sequence of string;
testAuditEventData : AuditEventDataType;
moreAuditEventData : AuditEventDataType;
emptyAuditEventData : AuditEventDataType;
verificationAuditEvent : instance of _TEST_Req_IF_Verification_audit_event;
verificationFailedJobs : sequence of instance of _TEST_Req_IF_Verification_failedJob;
jobId1 : string := "95a3b3a7-fada-41d5-b7e2-902079e81001";
jobId2 : string := "95a3b3a7-fada-41d5-b7e2-902079e81002";

begin
	
	logMessage := "AEOrdering::testOrderedJobWithData";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
	delete find _TEST_Req_IF_Verification_failedJob();
	AEOrdering::clearDomain(true, false);
	
	auditEventTime := timestamp'now;
	testAuditEventData.dataItems["Data1"] := "Test1";
	testAuditEventData.dataItems["Data2"] := "Test2";
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "aaa", "1", auditEventTime'image, emptyPrevEventIds, testAuditEventData);	
	Test::service_event_queue();
	
	prevEventIds := emptyPrevEventIds & "1"; 
	testAuditEventData := emptyAuditEventData;
	testAuditEventData.dataItems["cccLOOPCOUNT"] := "3";
	testAuditEventData.dataItems["dddBRANCHCOUNT"] := "2";
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "bbb", "2", auditEventTime'image, prevEventIds, testAuditEventData);
	Test::service_event_queue();
	
	prevEventIds := emptyPrevEventIds & "2"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "ccc", "3", auditEventTime'image, prevEventIds, testAuditEventData);
	Test::service_event_queue();

	prevEventIds := emptyPrevEventIds & "3";
	testAuditEventData := emptyAuditEventData;
	testAuditEventData.dataItems["Data4"] := "Test4";
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "ddd", "4", auditEventTime'image, prevEventIds, testAuditEventData);	
	Test::service_event_queue();

	prevEventIds := emptyPrevEventIds & "4"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "eee", "5", auditEventTime'image, prevEventIds, testAuditEventData);
	Test::service_event_queue();

	prevEventIds := emptyPrevEventIds & "5"; 
	AEOrdering::AcceptEvent(jobId1, "AEOrdering-Test", "fff", "6", auditEventTime'image, prevEventIds, testAuditEventData);
	Test::service_event_queue();
	
	// verify the test
	AEOrdering::checkOrderedJob();
	
	// verify the audit event data
	verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "1");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Ordered Job: Failed to find` verification audit event id = 1");
	Logger::log(Logger::Information, "AEOrdering", "verification audit event length: " & verificationAuditEvent.reportableAuditEventDataItems'length'image);
    Assertions::assertTrue((verificationAuditEvent.reportableAuditEventDataItems'length = 2), "Test Ordered Job With Data: Failed as verification audit event data Items /= 2");
    for dataItem in verificationAuditEvent.reportableAuditEventDataItems loop
	    if dataItem.dataName = "Data1" then
		    Assertions::assertTrue((dataItem.dataValue = "Test1"), "Test Ordered Job: Failed as verification audit event data item Data 1 value /= Test1");
		    Assertions::assertTrue((dataItem.dataKind = "EXTRAJOBINV"), "Test Ordered Job With Data: Failed as verification audit event data item Data 1 data kind /= EXTRAJOBINV");
	    elsif dataItem.dataName = "Data2" then
		    Assertions::assertTrue((dataItem.dataValue = "Test2"), "Test Ordered Job: Failed as verification audit event data item Data 2 value /= Test2");
		    Assertions::assertTrue((dataItem.dataKind = "INTRAJOBINV"), "Test Ordered Job With Data: Failed as verification audit event data item Data 1 data kind /= INTRAJOBINV");
	    end if;
	end loop;
	verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "4");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Ordered Job: Failed to find` verification audit event id = 4");
    Assertions::assertTrue((verificationAuditEvent.reportableAuditEventDataItems'length = 1), "Test Ordered Job With Data: Failed as verification audit event data Items /= 1");
    for dataItem in verificationAuditEvent.reportableAuditEventDataItems loop
	    if dataItem.dataName = "Data4" then
		    Assertions::assertTrue((dataItem.dataValue = "Test4"), "Test Ordered Job: Failed as verification audit event data item Data 1 value /= Test1");
		    Assertions::assertTrue((dataItem.dataKind = "EXTRAJOBINV"), "Test Ordered Job With Data: Failed as verification audit event data item Data 1 data kind /= EXTRAJOBINV");
		end if;
	end loop;
	verificationAuditEvent := find_one _TEST_Req_IF_Verification_audit_event(auditEventId = "2");
    Assertions::assertTrue((verificationAuditEvent /= null), "Test Ordered Job: Failed to find` verification audit event id = 2");
    Assertions::assertTrue((verificationAuditEvent.reportableAuditEventDataItems'length = 2), "Test Ordered Job With Data: Failed as verification audit event data Items /= 2");
    for dataItem in verificationAuditEvent.reportableAuditEventDataItems loop
	    if dataItem.dataName = "cccLOOPCOUNT" then
		    Assertions::assertTrue((dataItem.dataValue = "3"), "Test Ordered Job: Failed as verification audit event data item Data 1 value /= 3");
		    Assertions::assertTrue((dataItem.dataKind = "LOOPCOUNT"), "Test Ordered Job With Data: Failed as verification audit event data item Data 1 data kind /= LOOPCOUNT");
		end if;
	    if dataItem.dataName = "dddBRANCHCOUNT" then
		    Assertions::assertTrue((dataItem.dataValue = "2"), "Test Ordered Job: Failed as verification audit event data item Data 1 value /= 2");
		    Assertions::assertTrue((dataItem.dataKind = "BRANCHCOUNT"), "Test Ordered Job With Data: Failed as verification audit event data item Data 1 data kind /= BRANCHCOUNT");
		end if;
	end loop;
	
	
	// test that the delete job can be called and the jobs are deleted
	AEOrdering::deleteJob(jobId1);
	Assertions::assertTrue(((find Job())'length = 0), "Test Ordered Job With Data: Job has not been deleted");
	
	// test invalid dynamic control data	
	auditEventTime := timestamp'now;
	testAuditEventData := emptyAuditEventData;
	testAuditEventData.dataItems["cccLOOPCOUNT"] := "0";
	AEOrdering::AcceptEvent(jobId2, "AEOrdering-Test", "bbb", "2-1", auditEventTime'image, emptyPrevEventIds, testAuditEventData);	
	Test::service_event_queue();

	// verify that the job was reported as failed to verification
	verificationFailedJobs := find _TEST_Req_IF_Verification_failedJob();
    Assertions::assertTrue((verificationFailedJobs'length = 1), "Test Job Failure: Invalid number of failed jobs event = " & verificationFailedJobs'length'image);
    Assertions::assertTrue(((find verificationFailedJobs(jobId = jobId2))'length = 1), "Test Job Failure: Failed to find failed job id = 2");
	delete verificationFailedJobs;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '60138ace-c525-4185-9443-4b3374de7bdb' DO NOT EDIT THIS LINE.
private service AEOrdering::testFileIngest () is
systemSpec : instance of SystemSpec;
reportedEventJobDefinitions : sequence of instance of _TEST_Req_IF_Verification_jobDefinition;
jobDefinitionFile : Filesystem::filename := "NewJobDefinition.json";
newJobDefinitionFile : Filesystem::filename := "Job2.json";
configFile : string := "config0.json";

begin
	
	AEOrdering::clearDomain(true, true);
	reportedEventJobDefinitions := find _TEST_Req_IF_Verification_jobDefinition();
	delete reportedEventJobDefinitions;
	systemSpec := find_one SystemSpec();
	systemSpec.configFile := configFile;
	Filesystem::touch_file(Filesystem::filename(systemSpec.configFilePath & configFile));
    
	generate SystemSpec.checkConfigUpdate() to systemSpec;
	Test::service_event_queue();
	// test adding in a new job definition file
	reportedEventJobDefinitions := find _TEST_Req_IF_Verification_jobDefinition();
	delete reportedEventJobDefinitions;
	Filesystem::copy_file(Filesystem::filename("config/") & jobDefinitionFile, Filesystem::filename("config/") & newJobDefinitionFile);
	Filesystem::move_file(Filesystem::filename("config/") & newJobDefinitionFile, Filesystem::filename(systemSpec.jobDefinitionDirectory & "/") & newJobDefinitionFile);
	generate SystemSpec.checkConfigUpdate() to systemSpec;
	Test::service_event_queue();
	Filesystem::delete_file(Filesystem::filename(systemSpec.jobDefinitionDirectory & "/") & newJobDefinitionFile);

	reportedEventJobDefinitions := find _TEST_Req_IF_Verification_jobDefinition();
	Assertions::assertTrue((reportedEventJobDefinitions'length = 1), "Test File Ingest: Failed to find the correct number of reported event definitions, expected 1 found " & (reportedEventJobDefinitions'length)'image);
	
	for jobDefinition in reportedEventJobDefinitions loop
		if jobDefinition.jobName = "Job2" then
			if jobDefinition.eventDefinitions'length = 8 then
				for reportEventDefinition in jobDefinition.eventDefinitions loop
					if reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent18" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent19" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent20" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent21" and reportEventDefinition.occurrenceId = 2 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent20" and reportEventDefinition.occurrenceId = 3 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent21" and reportEventDefinition.occurrenceId = 4 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent24" and reportEventDefinition.occurrenceId = 1 or
					   reportEventDefinition.sequenceName = "Sequence4" and reportEventDefinition.eventType = "TestEvent25" and reportEventDefinition.occurrenceId = 1 then
					   null;
					else
						Assertions::assertTrue(false, "Unknown reported event definitions for Job 2");  
					end if;
				end loop;
			else
				Assertions::assertTrue(false, "Test Config File: Failed to find the correct number of reported event definitions for Job 1, expected 17 found " & (jobDefinition.eventDefinitions'length)'image);  
			end if;
		else
			Assertions::assertTrue(false, "Test Config File: Unknown job reported, jobName = " & jobDefinition.jobName);  
		end if;
	end loop;

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '4c1d0223-fb96-4947-b2c5-4da976d4f9b0' DO NOT EDIT THIS LINE.
private service AEOrdering::testLaneValidation () is
logMessage : string;
auditEventTime : timestamp;
verificationAuditEvents : sequence of instance of _TEST_Req_IF_Verification_audit_event;
verificationAuditEvent : instance of _TEST_Req_IF_Verification_audit_event;
jobId : string := "95a3b3a7-fada-41d5-b7e2-902079e810d5";
prevEventIds : sequence of string;
emptyPrevEventIds : sequence of string;
auditEventData : AuditEventDataType;
systemSpec : instance of SystemSpec;

begin
	
	logMessage := "AEOrdering::testLaneValidation";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
	delete verificationAuditEvents;
	AEOrdering::clearDomain(true, false);
	auditEventTime := timestamp'now;

	AEOrdering::AcceptEvent(jobId, "AEOrdering-Test", "aaa", "1", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	Test::service_event_queue();

	// verify that the job was accepted and the event reported
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 1), "Test Lane Validation: Invalid number of verification audit event = " & verificationAuditEvents'length'image);
	Assertions::assertTrue((find_one Job(jobId = jobId) /= null), "Test Lane Validation: Failed to find Job");
	delete verificationAuditEvents;
	
	// check the lower bound
	systemSpec := find_one SystemSpec();
	AEOrdering::clearDomain(true, false);
	systemSpec.startJobGroup := integer'parse("d6",16);
	auditEventTime := timestamp'now;

	AEOrdering::AcceptEvent(jobId, "AEOrdering-Test", "aaa", "1", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	Test::service_event_queue();

	// verify that the job was not accepted and no events were reported
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Lane Validation: Invalid number of verification audit event expected 0 got " & verificationAuditEvents'length'image);
	Assertions::assertTrue((find_one Job(jobId = jobId) = null), "Test Lane Validation: Failed lower bound. Job exists");
	delete verificationAuditEvents;

	// check the upper bound
	AEOrdering::clearDomain(true, false);
	systemSpec.startJobGroup := integer'parse("00",16);
	systemSpec.endJobGroup := integer'parse("d4",16);
	auditEventTime := timestamp'now;

	AEOrdering::AcceptEvent(jobId, "AEOrdering-Test", "aaa", "1", auditEventTime'image, emptyPrevEventIds, auditEventData);	
	Test::service_event_queue();

	// verify that the job was not accepted and no events were reported
    verificationAuditEvents:= find _TEST_Req_IF_Verification_audit_event();
    Assertions::assertTrue((verificationAuditEvents'length = 0), "Test Lane Validation: Invalid number of verification audit event expected 0 got " & verificationAuditEvents'length'image);
	Assertions::assertTrue((find_one Job(jobId = jobId) = null), "Test Lane Validation: Failed lower bound. Job exists");
	delete verificationAuditEvents;	

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

