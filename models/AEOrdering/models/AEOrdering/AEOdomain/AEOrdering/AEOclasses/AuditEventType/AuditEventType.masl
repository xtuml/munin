//! ACTIVITY BEGIN. '5b355e81-b15f-44af-87ca-70f6ec5ca38a' DO NOT EDIT THIS LINE.
public service AEOrdering::AuditEventType.validEvent ( auditEvent : in instance of AuditEvent,
                                                      failureReason : out string ) return boolean is
eventType : instance of AuditEventType;
validEvent : boolean := true;
job : instance of Job;
theAuditEventData : AuditEventDataType;
dataValue : integer;
kvps : dictionary of string;

begin

	job := auditEvent -> R9.Job;
	eventType := find_one AuditEventType(eventType = auditEvent.reportedEventType and jobTypeName = job.reportedJobName);
	// failed to identify the event
	if eventType = null then
		validEvent := false;
		failureReason := "event type is not allowed for job name";
		Logger::log(Logger::Warning, "pv.aeo.auditeventtype.validevent",
		  aeoLog("aeordering_invalid_event_type", failureReason, job.jobId, auditEvent.reportedJobName, auditEvent.auditEventId, auditEvent.reportedEventType, kvps));
	else
		// check if the reported job name matches the reported job name held for the job
		// this may be different as the job is created when the first event on the job id is received
		// subsequent events against this job id should have the same job name if not it a failure
		if auditEvent.reportedJobName /= job.reportedJobName then
			validEvent := false;		
			failureReason := "job names are different";
			kvps["jobJobName"] := job.reportedJobName;
			kvps["eventJobName"] := auditEvent.reportedJobName;
			kvps["jobTypeName"] := (eventType -> R12.JobType).jobTypeName;
			Logger::log(Logger::Warning, "pv.aeo.auditeventtype.validevent",
			  aeoLog("aeordering_reported_job_name", failureReason, job.jobId, auditEvent.reportedJobName, auditEvent.auditEventId, auditEvent.reportedEventType, kvps));
		end if;
		
		// check if the event has dynamic controls that the value is valid. Only integer values are allowed and they have to be greater than 0
		theAuditEventData := auditEvent.auditEventData;
		for dynamicControl in (find AuditEventType(eventType = auditEvent.reportedEventType and jobTypeName = job.reportedJobName)) -> R19.DynamicControl loop
			if theAuditEventData.dataItems'contains(dynamicControl.dynamicControlName) = true then
				dataValue := integer'parse(theAuditEventData.dataItems[dynamicControl.dynamicControlName]);
				if dataValue < 1 then
					validEvent := false;
					failureReason := "event type has invalid dynamic control";
					Logger::log(Logger::Warning, "pv.aeo.auditeventtype.validevent",
					  aeoLog("aeordering_invalid_dynamic_control", failureReason, job.jobId, auditEvent.reportedJobName, auditEvent.auditEventId, auditEvent.reportedEventType, kvps));
				end if;
			end if;
		end loop;
		if validEvent = true then
			link eventType R7 auditEvent;
		end if;
	end if;
	return validEvent;
exception
	when others =>
		failureReason := "exception: event type has invalid dynamic control";
		Logger::log(Logger::Warning, "pv.aeo.auditeventtype.validevent",
		  aeoLog("aeordering_invalid_dynamic_control", failureReason, job.jobId, auditEvent.reportedJobName, auditEvent.auditEventId, auditEvent.reportedEventType, kvps));
		return false;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

