//! ACTIVITY BEGIN. 'b38f7f4c-1bb3-42e4-a42f-80debcdc30cc' DO NOT EDIT THIS LINE.
public instance service AEOrdering::JobType.loadEventTypes ( jobTypeJSONObject : in JSON::JSONObject ) is
logMessage : string;
jobDefinitionName : string;
eventTypeJSONElement : JSON::JSONElement;
eventDefJSONObject : JSON::JSONObject;
prevEventTypeJSONElement : JSON::JSONElement;
prevEventDefJSONObject : JSON::JSONObject;
dynamicControlJSONObject : JSON::JSONObject;
eventTypeName : string;
sequenceName : string;
occurrenceId : integer;
applicationName : string;
sequenceStart : boolean;
sequenceEnd : boolean;
isBreak : boolean;
emptyPreviousEventTypes : sequence of PreviousEventType;
previousEventTypes : sequence of PreviousEventType;
previousEventName : string;
previousEventOccurrenceId : integer;
application : instance of Application;
eventType : instance of AuditEventType;
constraintDefinitionId : string;
constraintValue : string;
hasDynamicControl : boolean := false;
dynamicControl : instance of DynamicControl;
dynamicControlName : string;
dynamicControlType : string;
userEventType : string;
userOccurrenceId : integer;

begin
	
	logMessage := "AEOrdering::JobType.loadEventTypes";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
	
	// check the job definition name in the config file matches this job definition name
	jobDefinitionName := JSON::get_string(jobTypeJSONObject["JobDefinitionName"]);
	if this.jobTypeName = jobDefinitionName then
		if jobTypeJSONObject'contains("Events") and jobTypeJSONObject["Events"].kind = JSON::Array then
			for eventTypeJSONElement in JSON::get_array(jobTypeJSONObject["Events"]) loop
				eventTypeName := "";
				sequenceName := "";
				occurrenceId := 1;
				applicationName := "";
				sequenceStart := false;
				sequenceEnd := false;
				isBreak := false;
				hasDynamicControl := false;
				previousEventTypes := emptyPreviousEventTypes;
				eventDefJSONObject := JSON::get_object(eventTypeJSONElement);
				eventTypeName := JSON::get_string(eventDefJSONObject["EventName"]);
				sequenceName := JSON::get_string(eventDefJSONObject["SequenceName"]);
				occurrenceId := JSON::get_integer(eventDefJSONObject["OccurrenceId"]);
				applicationName := JSON::get_string(eventDefJSONObject["Application"]);
				if eventDefJSONObject'contains("SequenceStart") then
					sequenceStart := JSON::get_boolean(eventDefJSONObject["SequenceStart"]);
				end if;
				if eventDefJSONObject'contains("SequenceEnd") then
					sequenceEnd := JSON::get_boolean(eventDefJSONObject["SequenceEnd"]);
				end if;
				if eventDefJSONObject'contains("IsBreak") then
					isBreak := JSON::get_boolean(eventDefJSONObject["IsBreak"]);
				end if;
				// check for any dynamic controls
				if eventDefJSONObject'contains("DynamicControl") and eventDefJSONObject["DynamicControl"].kind = JSON::Object then
					dynamicControlJSONObject := JSON::get_object(eventDefJSONObject["DynamicControl"]);
					if dynamicControlJSONObject'contains("DynamicControlName") and dynamicControlJSONObject'contains("DynamicControlType") and dynamicControlJSONObject'contains("UserEventType") and dynamicControlJSONObject'contains("UserOccurrenceId") then
						hasDynamicControl := true;
						dynamicControlName := JSON::get_string(dynamicControlJSONObject["DynamicControlName"]);
						dynamicControlType := JSON::get_string(dynamicControlJSONObject["DynamicControlType"]);
						userEventType := JSON::get_string(dynamicControlJSONObject["UserEventType"]);
						userOccurrenceId := JSON::get_integer(dynamicControlJSONObject["UserOccurrenceId"]); 
					end if;
				end if;
				if eventDefJSONObject'contains("PreviousEvents") and eventDefJSONObject["PreviousEvents"].kind = JSON::Array then
					for prevEventTypeJSONElement in JSON::get_array(eventDefJSONObject["PreviousEvents"]) loop
						previousEventName := "";
						previousEventOccurrenceId := 1;
						prevEventDefJSONObject := JSON::get_object(prevEventTypeJSONElement);
						previousEventName := JSON::get_string(prevEventDefJSONObject["PreviousEventName"]);
						previousEventOccurrenceId := JSON::get_integer(prevEventDefJSONObject["PreviousOccurrenceId"]);
						constraintDefinitionId := "";
						constraintValue := "";
						if prevEventDefJSONObject'contains("ConstraintDefinitionId") and prevEventDefJSONObject'contains("ConstraintValue") then
							constraintDefinitionId := JSON::get_string(prevEventDefJSONObject["ConstraintDefinitionId"]);
							constraintValue := JSON::get_string(prevEventDefJSONObject["ConstraintValue"]);
						end if;
						previousEventTypes := previousEventTypes & (previousEventName, previousEventOccurrenceId, constraintDefinitionId, constraintValue);
					end loop;
				end if;
				// now we have extracted the data create the event
				application := find_one Application(applicationName = applicationName);
				if application = null then
					application := create Application(applicationName => applicationName);
				end if;
				
				eventType := find_one AuditEventType(eventType = eventTypeName and applicationName = applicationName and occurrenceId = occurrenceId);
				if eventType = null then
					eventType := create unique AuditEventType(eventType => eventTypeName, occurrenceId => occurrenceId, 
						                               applicationName => applicationName, sequenceName => sequenceName,
						                               isSequenceStart => sequenceStart, isSequenceEnd => sequenceEnd, 
						                               staleAuditEventDuration => this.staleAuditEventDuration, 
						                               blockedAuditEventDuration => this.blockedAuditEventDuration, 
						                               previousEventTypes => previousEventTypes, isBreak => isBreak);
					link eventType R6 application;
					link eventType R12 this;
				else
					eventType.isSequenceEnd := sequenceEnd;
					eventType.isSequenceStart := sequenceStart;
					eventType.previousEventTypes := previousEventTypes;
				end if;				
				
				// check if there is a dynamic control and if not create one
				dynamicControl := eventType -> R19.DynamicControl;
				if hasDynamicControl = true then
					if dynamicControl = null then
						dynamicControl := create unique DynamicControl();
						link eventType R19 dynamicControl;
					end if;
					dynamicControl.dynamicControlName := dynamicControlName;
					dynamicControl.controlType := dynamicControlType;
					dynamicControl.userEventType := userEventType;
					dynamicControl.userOccurrenceId := userOccurrenceId;
				end if;
			end loop;
		end if;
	else
		raise program_error;
	end if;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '4cb90deb-ec72-4c55-a54c-050a3e3307ad' DO NOT EDIT THIS LINE.
public instance service AEOrdering::JobType.updateAuditEventDurations ( eventRulesJSONArray : in JSON::JSONArray ) is
logMessage : string;
eventRuleJSONObject : JSON::JSONObject;
auditEventType : instance of AuditEventType;
auditEventTypeName : string;
applicationName : string;

begin
	
	logMessage := "AEOrdering::JobType.updateAuditEventDurations";
	Logger::log(Logger::Information, "AEOrdering", logMessage);
	
	for eventRuleJSONElement in eventRulesJSONArray loop
		eventRuleJSONObject := JSON::get_object(eventRuleJSONElement);
		auditEventTypeName := JSON::get_string(eventRuleJSONObject["EventName"]);
		applicationName := JSON::get_string(eventRuleJSONObject["ApplicationName"]);
		auditEventType := find_one AuditEventType(eventType = auditEventTypeName and applicationName = applicationName);
		if auditEventType /= null then
			if eventRuleJSONObject'contains("StaleAuditEventDuration") then
				auditEventType.staleAuditEventDuration := duration'parse(JSON::get_string(eventRuleJSONObject["StaleAuditEventDuration"]));
			end if;
			if eventRuleJSONObject'contains("BlockedAuditEventDuration") then
				auditEventType.blockedAuditEventDuration := duration'parse(JSON::get_string(eventRuleJSONObject["BlockedAuditEventDuration"]));
			end if;
		end if;
	end loop;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '92f32a2d-c26e-437a-a132-bfcd1e409a15' DO NOT EDIT THIS LINE.
public instance service AEOrdering::JobType.loadEventDataItemTypes ( eventDataTypesJSONArray : in JSON::JSONArray ) is
logMessage : string;
jobTypeName : string;
eventTypeName : string;
occurrenceId : integer;
eventDataName : string;
eventDataType : string;
jobType : instance of JobType;
sourceAuditEventType : instance of AuditEventType;
auditEventType : instance of AuditEventType;
eventTypeJSONElement : JSON::JSONElement;
eventDefJSONObject : JSON::JSONObject;
eventDataTypeJSONObject : JSON::JSONObject;
userEventJSONObject : JSON::JSONObject;
dataItemType : instance of DataItemType;
constrainedDataItems : sequence of instance of DataItemType;
constrainedDataItem : instance of DataItemType;

begin
	
	logMessage := "AEOrdering::JobType.loadEventTypes";
	Logger::log(Logger::Information, "AEOrdering", logMessage);

	for eventDataTypeJSONElement in eventDataTypesJSONArray loop
		eventDataTypeJSONObject := JSON::get_object(eventDataTypeJSONElement);
		eventDataName := JSON::get_string(eventDataTypeJSONObject["EventDataName"]);
		eventDataType := JSON::get_string(eventDataTypeJSONObject["EventDataType"]);
		if eventDataType = "EXTRAJOBINV" then
			jobTypeName := JSON::get_string(eventDataTypeJSONObject["SourceEventJobDefinitionName"]);
			jobType := find_one JobType(jobTypeName = jobTypeName);
			if jobType = null then
				raise program_error;
			end if;
			eventTypeName := JSON::get_string(eventDataTypeJSONObject["SourceEventType"]);
			occurrenceId := JSON::get_integer(eventDataTypeJSONObject["SourceEventOccurrenceId"]);
			sourceAuditEventType := find_one AuditEventType(eventType = eventTypeName and occurrenceId = occurrenceId);
			if sourceAuditEventType = null then
				raise program_error;
			end if;
			dataItemType := find_one (jobType -> R14.DataItemType)(dataItemName = eventDataName);
			if dataItemType = null then
				dataItemType := create unique DataItemType(dataItemName => eventDataName, dataItemType => eventDataType);
				link jobType R14 dataItemType;
				link dataItemType R16 sourceAuditEventType;
			end if;
			if eventDataTypeJSONObject'contains("UserEvents") and eventDataTypeJSONObject["UserEvents"].kind = JSON::Array then
				for eventDataItemsJSONElement in JSON::get_array(eventDataTypeJSONObject["UserEvents"]) loop
					constrainedDataItems := dataItemType -> R18.constrains.DataItemType;
					userEventJSONObject := JSON::get_object(eventDataItemsJSONElement);
					jobTypeName := JSON::get_string(userEventJSONObject["JobDefinitionName"]);
					jobType := find_one JobType(jobTypeName = jobTypeName);
					if jobType = null then
						raise program_error;
					end if;
					eventTypeName := JSON::get_string(userEventJSONObject["UserEventType"]);
					occurrenceId := JSON::get_integer(userEventJSONObject["OccurrenceId"]);
					eventDataName := JSON::get_string(userEventJSONObject["UserEventDataItemName"]);
					auditEventType := find_one AuditEventType(eventType = eventTypeName and occurrenceId = occurrenceId);
					if auditEventType = null then
						raise program_error;
					end if;
					// check that the data item has not already been created with a different data item type
					if find_one (auditEventType -> R16.DataItemType)(dataItemName = eventDataName and dataItemType /= eventDataType) /= null then
						raise program_error;
					end if;
					if find_one constrainedDataItems(jobTypeName = jobTypeName and eventType = eventTypeName and occurrenceId = occurrenceId and dataItemName = eventDataName) = null then
						constrainedDataItem := create unique DataItemType(dataItemName => eventDataName, dataItemType => eventDataType);
						link jobType R14 constrainedDataItem;
						link constrainedDataItem R16 auditEventType;
						link constrainedDataItem R18.isConstrainedBy dataItemType;
					end if;
				end loop;
			end if;
		else
			// this is an intra job definition
			jobTypeName := JSON::get_string(eventDataTypeJSONObject["JobDefinitionName"]);
			jobType := find_one JobType(jobTypeName = jobTypeName);
			if jobType = null then
				raise program_error;
			end if;
			if eventDataTypeJSONObject'contains("Events") and eventDataTypeJSONObject["Events"].kind = JSON::Array then
				for eventDataItemsJSONElement in JSON::get_array(eventDataTypeJSONObject["Events"]) loop
					userEventJSONObject := JSON::get_object(eventDataItemsJSONElement);
					eventTypeName := JSON::get_string(userEventJSONObject["EventType"]);
					occurrenceId := JSON::get_integer(userEventJSONObject["OccurrenceId"]);
					eventDataName := JSON::get_string(userEventJSONObject["EventDataItemName"]);
					auditEventType := find_one AuditEventType(eventType = eventTypeName and occurrenceId = occurrenceId);
					if auditEventType = null then
						raise program_error;
					end if;
					dataItemType := find_one (jobType -> R14.DataItemType)(dataItemName = eventDataName);
					if dataItemType = null then
						dataItemType := create unique DataItemType(dataItemName => eventDataName, dataItemType => eventDataType);
						link jobType R14 dataItemType;
						link dataItemType R16 auditEventType;
					else
						constrainedDataItems := dataItemType -> R18.constrains.DataItemType;
						if find_one constrainedDataItems(jobTypeName = jobTypeName and eventType = eventTypeName and occurrenceId = occurrenceId and dataItemName = eventDataName) = null then
							constrainedDataItem := create unique DataItemType(dataItemName => eventDataName, dataItemType => eventDataType);
							link jobType R14 constrainedDataItem;
							link constrainedDataItem R16 auditEventType;
							link constrainedDataItem R18.isConstrainedBy dataItemType;
						end if;
					end if;
				end loop;
			end if;
		end if;
		
	end loop;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

