//! ACTIVITY BEGIN. 'b38f7f4c-1bb3-42e4-a42f-80debcdc30cc' DO NOT EDIT THIS LINE.
public instance service AEOrdering::JobType.loadEventTypes ( jobTypeJSONObject : in JSON::JSONObject ) is
logMessage : string;
jobDefinitionName : string;
eventTypeJSONElement : JSON::JSONElement;
eventDefJSONObject : JSON::JSONObject;
prevEventTypeJSONElement : JSON::JSONElement;
prevEventDefJSONObject : JSON::JSONObject;
dynamicControlJSONObject : JSON::JSONObject;
eventTypeName : string;
sequenceName : string;
occurrenceId : integer;
sequenceStart : boolean;
sequenceEnd : boolean;
isBreak : boolean;
critical : boolean;
emptyPreviousEventTypes : sequence of PreviousEventType;
previousEventTypes : sequence of PreviousEventType;
previousEventName : string;
previousEventOccurrenceId : integer;
eventType : instance of AuditEventType;
constraintDefinitionId : string;
constraintValue : string;
hasDynamicControl : boolean := false;
dynamicControl : instance of DynamicControl;
dynamicControlName : string;
dynamicControlType : string;
userEventType : string;
userOccurrenceId : integer;

begin
	
	// check the job definition name in the config file matches this job definition name
	jobDefinitionName := JSON::get_string(jobTypeJSONObject["JobDefinitionName"]);
	if this.jobTypeName = jobDefinitionName then
		if jobTypeJSONObject'contains("Events") and jobTypeJSONObject["Events"].kind = JSON::Array then
			for eventTypeJSONElement in JSON::get_array(jobTypeJSONObject["Events"]) loop
				eventTypeName := "";
				sequenceName := "";
				occurrenceId := 1;
				sequenceStart := false;
				sequenceEnd := false;
				isBreak := false;
				hasDynamicControl := false;
				critical := false;
				previousEventTypes := emptyPreviousEventTypes;
				eventDefJSONObject := JSON::get_object(eventTypeJSONElement);
				eventTypeName := JSON::get_string(eventDefJSONObject["EventName"]);
				sequenceName := JSON::get_string(eventDefJSONObject["SequenceName"]);
				occurrenceId := JSON::get_integer(eventDefJSONObject["OccurrenceId"]);
				if eventDefJSONObject'contains("SequenceStart") then
					sequenceStart := JSON::get_boolean(eventDefJSONObject["SequenceStart"]);
				end if;
				if eventDefJSONObject'contains("SequenceEnd") then
					sequenceEnd := JSON::get_boolean(eventDefJSONObject["SequenceEnd"]);
				end if;
				if eventDefJSONObject'contains("IsBreak") then
					isBreak := JSON::get_boolean(eventDefJSONObject["IsBreak"]);
				end if;
				if eventDefJSONObject'contains("IsCritical") then
					critical := JSON::get_boolean(eventDefJSONObject["IsCritical"]);
				end if;
    			if eventDefJSONObject'contains("PreviousEvents") and eventDefJSONObject["PreviousEvents"].kind = JSON::Array then
					for prevEventTypeJSONElement in JSON::get_array(eventDefJSONObject["PreviousEvents"]) loop
						previousEventName := "";
						previousEventOccurrenceId := 1;
						prevEventDefJSONObject := JSON::get_object(prevEventTypeJSONElement);
						previousEventName := JSON::get_string(prevEventDefJSONObject["PreviousEventName"]);
						previousEventOccurrenceId := JSON::get_integer(prevEventDefJSONObject["PreviousOccurrenceId"]);
						constraintDefinitionId := "";
						constraintValue := "";
						if prevEventDefJSONObject'contains("ConstraintDefinitionId") and prevEventDefJSONObject'contains("ConstraintValue") then
							constraintDefinitionId := JSON::get_string(prevEventDefJSONObject["ConstraintDefinitionId"]);
							constraintValue := JSON::get_string(prevEventDefJSONObject["ConstraintValue"]);
						end if;
						previousEventTypes := previousEventTypes & (previousEventName, previousEventOccurrenceId, constraintDefinitionId, constraintValue);
					end loop;
				end if;
				
				eventType := find_one AuditEventType(eventType = eventTypeName and occurrenceId = occurrenceId and jobTypeName = this.jobTypeName);
				if eventType = null then
					eventType := create unique AuditEventType(eventType => eventTypeName, occurrenceId => occurrenceId, jobTypeName => this.jobTypeName,
						                               sequenceName => sequenceName, isSequenceStart => sequenceStart, isSequenceEnd => sequenceEnd, 
						                               staleAuditEventDuration => this.staleAuditEventDuration, 
						                               blockedAuditEventDuration => this.blockedAuditEventDuration, 
						                               previousEventTypes => previousEventTypes, isBreak => isBreak,
						                               critical => critical, isSequenced => true);
					link eventType R12 this;
				else
					eventType.isSequenceEnd := sequenceEnd;
					eventType.isSequenceStart := sequenceStart;
					eventType.previousEventTypes := previousEventTypes;
				end if;				
				if eventDefJSONObject'contains("StaleAuditEventDuration") then
					eventType.staleAuditEventDuration := duration'parse(JSON::get_string(eventDefJSONObject["StaleAuditEventDuration"]));
				end if;
				if eventDefJSONObject'contains("BlockedAuditEventDuration") then
					eventType.blockedAuditEventDuration := duration'parse(JSON::get_string(eventDefJSONObject["BlockedAuditEventDuration"]));
				end if;
				
				// check for any dynamic controls
				if eventDefJSONObject'contains("DynamicControl") then
				    for dynamicControlJSONElement in JSON::get_array(eventDefJSONObject["DynamicControl"]) loop
                        dynamicControlJSONObject := JSON::get_object(dynamicControlJSONElement);
                        dynamicControlName := JSON::get_string(dynamicControlJSONObject["DynamicControlName"]);
                        dynamicControlType := JSON::get_string(dynamicControlJSONObject["DynamicControlType"]);
                        userEventType := JSON::get_string(dynamicControlJSONObject["UserEventType"]);
                        userOccurrenceId := JSON::get_integer(dynamicControlJSONObject["UserOccurrenceId"]); 
						dynamicControl := find_one (eventType -> R19.DynamicControl)(dynamicControlName = dynamicControlName);
						if dynamicControl = null then
							dynamicControl := create unique DynamicControl();
							link eventType R19 dynamicControl;
							dynamicControl.dynamicControlName := dynamicControlName;
							dynamicControl.controlType := dynamicControlType;
							dynamicControl.userEventType := userEventType;
							dynamicControl.userOccurrenceId := userOccurrenceId;
						end if;
					end loop;
				end if;

				// check for event data
				if eventDefJSONObject'contains("EventData") then
				    for eventDataJSONElement in JSON::get_array(eventDefJSONObject["EventData"]) loop
                        declare
                            eventDataJSONObject: JSON::JSONObject;
                            dataItemType: instance of DataItemType;
                            sourceDataItemType: instance of DataItemType;
                        begin
				            eventDataJSONObject := JSON::get_object(eventDataJSONElement);

				            // create a new event data item type and link to the current job
				            dataItemType := create unique DataItemType();
				            dataItemType.dataItemName := JSON::get_string(eventDataJSONObject["EventDataName"]);
				            dataItemType.dataItemType := JSON::get_string(eventDataJSONObject["EventDataType"]);
				            link dataItemType R14 this;
				            link dataItemType R16 eventType;
				            
				            if eventDataJSONObject'contains("SourceEventDataName") then
				                // search for source data item type for the current user data item type
				                if dataItemType.dataItemType = "INTRAJOBINV" then
				                    sourceDataItemType := find_one (
				                        find (this->R12.AuditEventType) (
				                            eventType = JSON::get_string(eventDataJSONObject["SourceEventType"]) and
				                            occurrenceId = JSON::get_integer(eventDataJSONObject["SourceEventOccurrenceId"])
				                        )->R16.DataItemType)(dataItemName = JSON::get_string(eventDataJSONObject["SourceEventDataName"]));
				                    if sourceDataItemType /= null then
				                        link sourceDataItemType R18.constrains dataItemType;
				                    else
                                        logMessage := "AEOrdering::JobType.loadEventTypes : Failed to process INTRAJOBINV event data item type for unknown Source Event Type " & JSON::get_string(eventDataJSONObject["SourceEventType"]) & ", Occurrence Id " & JSON::get_integer(eventDataJSONObject["SourceEventOccurrenceId"])'image;
                                        AsyncLogger::log(Logger::Error, "AEOrdering", logMessage);
                                        raise program_error;
				                    end if;
				                else
				                    sourceDataItemType := find_one (
				                        find JobType (jobTypeName = JSON::get_string(eventDataJSONObject["SourceJobDefinitionName"]))
				                        ->R12.AuditEventType->R16.DataItemType)(dataItemName = JSON::get_string(eventDataJSONObject["SourceEventDataName"]));
				                    if sourceDataItemType /= null then
				                        link sourceDataItemType R18.constrains dataItemType;
				                    else
				                        // create a forward reference to a data item defined in a different job
				                        link dataItemType R21 create SourceDataItemForwardReference(
				                            dataItemTypeId => dataItemType.dataItemTypeId,
				                            sourceJobTypeName => JSON::get_string(eventDataJSONObject["SourceJobDefinitionName"]),
				                            sourceDataItemName => JSON::get_string(eventDataJSONObject["SourceEventDataName"])
				                        );
				                    end if;
				                end if;
				            end if;
				        end;
				    end loop;
				end if;
	
			end loop;
		end if;
		if jobTypeJSONObject'contains("UnhappyEvents") and jobTypeJSONObject["UnhappyEvents"].kind = JSON::Array then
			for eventTypeJSONElement in JSON::get_array(jobTypeJSONObject["UnhappyEvents"]) loop
				eventTypeName := "";
				sequenceName := "";
				occurrenceId := 1;
				sequenceStart := false;
				sequenceEnd := false;
				isBreak := false;
				hasDynamicControl := false;
				previousEventTypes := emptyPreviousEventTypes;
				eventDefJSONObject := JSON::get_object(eventTypeJSONElement);
				eventTypeName := JSON::get_string(eventDefJSONObject["EventName"]);
				
				// now we have extracted the data create the event
				eventType := find_one AuditEventType(eventType = eventTypeName and occurrenceId = occurrenceId and jobTypeName = this.jobTypeName);
				if eventType = null then
					eventType := create unique AuditEventType(eventType => eventTypeName, occurrenceId => occurrenceId, 
						                               jobTypeName => this.jobTypeName, sequenceName => sequenceName,
						                               isSequenceStart => sequenceStart, isSequenceEnd => sequenceEnd, 
						                               staleAuditEventDuration => this.staleAuditEventDuration, 
						                               blockedAuditEventDuration => this.blockedAuditEventDuration, 
						                               previousEventTypes => previousEventTypes, isBreak => isBreak, 
						                               critical => false, isSequenced => false);
					link eventType R12 this;
				end if;				
			end loop;
		end if;
	else
		logMessage := "AEOrdering::JobType.loadEventTypes : Failed to process event type for unknown Job Type " & jobTypeName;
		AsyncLogger::log(Logger::Error, "AEOrdering", logMessage);
		raise program_error;
	end if;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '4cb90deb-ec72-4c55-a54c-050a3e3307ad' DO NOT EDIT THIS LINE.
public instance service AEOrdering::JobType.updateAuditEventDurations ( eventRulesJSONArray : in JSON::JSONArray ) is
logMessage : string;
eventRuleJSONObject : JSON::JSONObject;
auditEventType : instance of AuditEventType;
auditEventTypeName : string;

begin
	
	for eventRuleJSONElement in eventRulesJSONArray loop
		eventRuleJSONObject := JSON::get_object(eventRuleJSONElement);
		auditEventTypeName := JSON::get_string(eventRuleJSONObject["EventName"]);
		auditEventType := find_one AuditEventType(eventType = auditEventTypeName and jobTypeName = this.jobTypeName);
		if auditEventType /= null then
			if eventRuleJSONObject'contains("StaleAuditEventDuration") then
				auditEventType.staleAuditEventDuration := duration'parse(JSON::get_string(eventRuleJSONObject["StaleAuditEventDuration"]));
			end if;
			if eventRuleJSONObject'contains("BlockedAuditEventDuration") then
				auditEventType.blockedAuditEventDuration := duration'parse(JSON::get_string(eventRuleJSONObject["BlockedAuditEventDuration"]));
			end if;
		end if;
	end loop;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

