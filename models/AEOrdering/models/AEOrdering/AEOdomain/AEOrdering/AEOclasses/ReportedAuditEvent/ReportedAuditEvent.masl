//! ACTIVITY BEGIN. 'c6da956b-01c1-4061-8e07-9f0c61f1548c' DO NOT EDIT THIS LINE.
public instance service AEOrdering::ReportedAuditEvent.reportEvent () is
kvps : dictionary of string;
auditEvent : instance of AuditEvent;
job : instance of Job;
blockedAuditEvent : instance of BlockedAuditEvent;
lastReportedAuditEvent : instance of AuditEvent;
reportedAuditEvent : instance of ReportedAuditEvent;
theAuditEventData : AuditEventDataType;
reportableAuditEventData : ReportableAuditEventDataType;
allReportableAuditEventData : sequence of ReportableAuditEventDataType;
auditEventTypes : set of instance of AuditEventType;

begin
		
	this.eventReportedTime := timestamp'now;
	
	// report the event
	auditEvent := this -> R4.AuditEvent;
	job := auditEvent -> R9.Job;
	if job -> R3.AuditEvent /= null then
		unlink job R3;
	end if;
	link auditEvent R3 job;
	if auditEvent -> R1.Job /= null then
		unlink auditEvent R1;
		job.outOfSequenceEventCount := (job -> R1.AuditEvent)'length;
	end if;
	
	// build the audit data details to be reported for invariants
	theAuditEventData := auditEvent.auditEventData;
	auditEventTypes := find AuditEventType(eventType = auditEvent.reportedEventType and jobTypeName = job.reportedJobName);
	for auditEventData in auditEventTypes -> R16.DataItemType loop
		if theAuditEventData.dataItems'contains(auditEventData.dataItemName) = true then
			reportableAuditEventData.dataName := auditEventData.dataItemName;
			reportableAuditEventData.dataKind := auditEventData.dataItemType;
			reportableAuditEventData.dataValue := theAuditEventData.dataItems[auditEventData.dataItemName];
			allReportableAuditEventData := allReportableAuditEventData & reportableAuditEventData;
		end if;
	end loop;
	
	// build the audit data details to be reported for dynamic controls
	for dynamicControl in auditEventTypes -> R19.DynamicControl loop
		if theAuditEventData.dataItems'contains(dynamicControl.dynamicControlName) = true then
			reportableAuditEventData.dataName := dynamicControl.dynamicControlName;
			reportableAuditEventData.dataKind := dynamicControl.controlType;
			reportableAuditEventData.dataValue := theAuditEventData.dataItems[dynamicControl.dynamicControlName];
			allReportableAuditEventData := allReportableAuditEventData & reportableAuditEventData;
		end if;
	end loop;
	if (Logger::enabled(Logger::Debug, "pv.aeo.reportedauditevent")) then
		kvps["previousEventId"] := auditEvent.reportedPrevEventIds'image;
		Logger::log(Logger::Debug, "pv.aeo.reportedauditevent",
		  aeoLog("aeordering_report_event", "reporting event", job.jobId, job.reportedJobName, auditEvent.auditEventId, auditEvent.eventType, kvps));
	end if;
	Req_IF_Verification~>audit_event(job.jobId, auditEvent.reportedJobName, auditEvent.reportedEventType, auditEvent.auditEventId, auditEvent.reportedAuditEventTime, auditEvent.reportedPrevEventIds, allReportableAuditEventData);
	// check for any following events that need reporting
	for followedByEvent in (auditEvent -> R11.isFollowedBy.AuditEvent) loop
		// if all previous events have been received then we can report this blocked event
		if this.verifyPreviousEventsAvailable(followedByEvent) = true then
			// this event should be blocked and if it is not then an error has occurred
			blockedAuditEvent := followedByEvent -> R4.BlockedAuditEvent;
			if blockedAuditEvent /= null then
				unlink blockedAuditEvent R4 followedByEvent;
				reportedAuditEvent := create ReportedAuditEvent(auditEventId => followedByEvent.auditEventId);
				link reportedAuditEvent R4 followedByEvent;
				cancel blockedAuditEvent.blockedEventTimer;
				delete blockedAuditEvent;
				followedByEvent.eventState := EventStateEnum.REPORTED;
				if (Logger::enabled(Logger::Debug, "pv.aeo.reportedauditevent")) then
					kvps["followedByEventId"] := followedByEvent.auditEventId;
					kvps["followedByEventType"] := followedByEvent.eventType;
					kvps["previousEventId"] := this.auditEventId;
					Logger::log(Logger::Debug, "pv.aeo.reportedauditevent",
					  aeoLog("aeordering_blocked_event", "reporting blocked event", job.jobId, job.reportedJobName, auditEvent.auditEventId, auditEvent.eventType, kvps));
				end if;
				reportedAuditEvent.reportEvent();
			else
				kvps["expectedBlockedEventId"] := followedByEvent.auditEventId;
				Logger::log(Logger::Fatal, "pv.aeo.reportedauditevent",
				  aeoLog("aeordering_verifier_failure", "followed by event was not blocked", job.jobId, job.reportedJobName, auditEvent.auditEventId, auditEvent.eventType, kvps));
				raise program_error;
			end if;
		else
			if (Logger::enabled(Logger::Debug, "pv.aeo.reportedauditevent")) then
				kvps["followedByEventId"] := followedByEvent.auditEventId;
				kvps["followedByEventType"] := followedByEvent.eventType;
				kvps["previousEventId"] := this.auditEventId;
				Logger::log(Logger::Debug, "pv.aeo.reportedauditevent",
				  aeoLog("aeordering_blocked_not_received", "not all previous events reported do not report this event", job.jobId, job.reportedJobName, auditEvent.auditEventId, auditEvent.eventType, kvps));
			end if;
		end if;
	end loop;

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '4c07a037-130b-4e0d-8979-c6a5421a4b20' DO NOT EDIT THIS LINE.
public instance service AEOrdering::ReportedAuditEvent.verifyPreviousEventsAvailable ( followingEvent : in instance of AuditEvent ) return boolean is
kvps : dictionary of string;
reportedPreceedingEvents : sequence of instance of PreviousAuditEvent;
allPreviousEventsReceived : boolean := true;
previousEvent : instance of AuditEvent;

begin
	// check that all the previous events for this followed by event have been received
	reportedPreceedingEvents := followingEvent -> R13.PreviousAuditEvent;
	if (Logger::enabled(Logger::Debug, "pv.aeo.reportedauditeent")) then
		Logger::log(Logger::Debug, "pv.aeo.reportedauditeent",
		  aeoLog("aeordering_prev_available", "", "", "", followingEvent.auditEventId, followingEvent.eventType, kvps));
	end if;
	for reportedPreceedingEvent in reportedPreceedingEvents loop
		previousEvent := find_one AuditEvent(auditEventId = reportedPreceedingEvent.previousAuditEventId and eventState = EventStateEnum.REPORTED);
		if previousEvent = null then
			allPreviousEventsReceived := false;
			exit;
		else
			if (Logger::enabled(Logger::Debug, "pv.aeo.reportedauditeent")) then
				kvps["reportedPreceedingEvent"] := reportedPreceedingEvent.previousAuditEventId;
				kvps["previousEventId"] := previousEvent.auditEventId;
				kvps["previousEeventType"] := previousEvent.eventType;
				kvps["eventState"] := previousEvent.eventState'image;
				Logger::log(Logger::Debug, "pv.aeo.reportedauditeent",
				  aeoLog("aeordering_prev_available2", "", "", "", "", "", kvps));
			end if;
		end if;
	end loop;
	
	return allPreviousEventsReceived;

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

