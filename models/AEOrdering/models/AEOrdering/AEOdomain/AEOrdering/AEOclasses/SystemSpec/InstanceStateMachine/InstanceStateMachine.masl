//! ACTIVITY BEGIN. 'ff1e8b5d-11f3-496a-825a-79a87399f6d3' '2f5d88f3-93c0-4287-b943-38ef80510f15' DO NOT EDIT THIS LINE.
state AEOrdering::SystemSpec.Created () is
begin
  null;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'ff1e8b5d-11f3-496a-825a-79a87399f6d3' '6429e330-5929-44e0-ac73-7a2be9959a84' DO NOT EDIT THIS LINE.
state AEOrdering::SystemSpec.ConfigChecked () is
logMessage : string;
fileStatus : Filesystem::file_status;
fileName : Filesystem::filename;

begin

    if this.lastModificationTime() /= this.configFileModificationTime then
        generate SystemSpec.loadConfig() to this;
    else
        schedule this.configTimer generate SystemSpec.checkConfigUpdate() to this delay this.specUpdateRate;
    end if;
	
exception
	when others => 	
	
		logMessage := "AEOrdering::SystemSpec.ConfigChecked : failed to load configuration file";
		Logger::log(Logger::Error, "AEOrdering", logMessage);
		raise program_error;
		
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'ff1e8b5d-11f3-496a-825a-79a87399f6d3' '2c9652a0-3e8f-4199-b65f-cee09cee74ea' DO NOT EDIT THIS LINE.
state AEOrdering::SystemSpec.ConfigUpdated () is
logMessage : string;
fileName : Filesystem::filename;
jobType : instance of JobType;
configJSONString : string;
configJSONElement : JSON::JSONElement;
configJSONObject : JSON::JSONObject;
configValidationResult : JSON::JSONObject;
jobTypeJSONString : string;
jobTypeJSONElement : JSON::JSONElement;
jobTypeValidationResult : JSON::JSONObject;
jobTypeJSONObject : JSON::JSONObject;
userEvent : UserEventDataType;
emptyUserEvent : UserEventDataType;
userEvents : sequence of UserEventDataType;
emptyUserEvents : sequence of UserEventDataType;
associatedEvent : IntraJobInvDataType;
emptyAssociatedEvent : IntraJobInvDataType;
associatedEvents : sequence of IntraJobInvDataType;
emptyAssociatedEvents : sequence of IntraJobInvDataType;
jobStore : instance of JobStore;
jobStoreName : string := "JobIdStore.log";
jobStoreLocation : string := "./";
jobStoreAgeLimit : duration := @P7D@;
today : sequence of integer;
midnight : timestamp;
fileControl : instance of FileControl;
invariantStoreLoadRate : duration;
filePermissions : Filesystem::permissions;
constrainingDataItem : instance of DataItemType;
constrainingDataItemName : string;
intraJobInvDataItems : set of instance of DataItemType;

begin
    
	filePermissions.group.read := true;
	filePermissions.other.read := true;
	filePermissions.group.write := true;
	filePermissions.other.write := true;
	filePermissions.group.execute := true;
	filePermissions.other.execute := false;
    
    // check the config file has not been removed
    fileName := Filesystem::filename(this.configFilePath & this.configFile);
    if Filesystem::file_exists(fileName) then
        // read the contents of the config file 
        configJSONString := Filesystem::read_file(fileName);
        configJSONElement := JSON::parse(configJSONString);
        configValidationResult := JSONValidation::validate(configJSONElement, #PROP["orderingConfigSchema"]#);
        if JSON::get_boolean(configValidationResult["valid"]) then
            // extract the spec data items
            configJSONObject := JSON::get_object(configJSONElement);
            if configJSONObject'contains("SpecUpdateRate") then
                this.specUpdateRate := duration'parse(JSON::get_string(configJSONObject["SpecUpdateRate"]));
            end if;
            if configJSONObject'contains("MaxOutOfSequenceEvents") then
                this.maxOutOfSequenceEvents := JSON::get_integer(configJSONObject["MaxOutOfSequenceEvents"]);
            end if;
            if configJSONObject'contains("MaximumJobTime") then
                this.maximumJobTime := duration'parse(JSON::get_string(configJSONObject["MaximumJobTime"]));
            end if;
            if configJSONObject'contains("JobCompletePeriod") then
                this.jobCompletePeriod := duration'parse(JSON::get_string(configJSONObject["JobCompletePeriod"]));
            end if;
            if configJSONObject'contains("IncomingDirectory") then
                this.incomingDirectory := JSON::get_string(configJSONObject["IncomingDirectory"]);
                // check if the directory exists and if not create it
				if Filesystem::file_exists(Filesystem::filename(this.incomingDirectory)) = false then
					Filesystem::create_directory(Filesystem::filename(this.incomingDirectory));
				end if;
				Filesystem::add_permissions(Filesystem::filename(this.incomingDirectory),filePermissions);
            end if;
            if configJSONObject'contains("ProcessingDirectory") then
                this.processingDirectory := JSON::get_string(configJSONObject["ProcessingDirectory"]);
                // check if the directory exists and if not create it
				if Filesystem::file_exists(Filesystem::filename(this.processingDirectory)) = false then
					Filesystem::create_directory(Filesystem::filename(this.processingDirectory));
				end if;
				Filesystem::add_permissions(Filesystem::filename(this.processingDirectory),filePermissions);
            end if;
            if configJSONObject'contains("ProcessedDirectory") then
                this.processedDirectory := JSON::get_string(configJSONObject["ProcessedDirectory"]);
                // check if the directory exists and if not create it
				if Filesystem::file_exists(Filesystem::filename(this.processedDirectory)) = false then
					Filesystem::create_directory(Filesystem::filename(this.processedDirectory));
				end if;
				Filesystem::add_permissions(Filesystem::filename(this.processedDirectory),filePermissions);
            end if;
            if configJSONObject'contains("JobDefinitionDirectory") then
                this.jobDefinitionDirectory := JSON::get_string(configJSONObject["JobDefinitionDirectory"]);
            end if;
            if configJSONObject'contains("JobStoreLocation") then
                jobStoreLocation := JSON::get_string(configJSONObject["JobStoreLocation"]);
            end if;
            if configJSONObject'contains("JobStoreAgeLimit") then
                jobStoreAgeLimit := duration'parse(JSON::get_string(configJSONObject["JobStoreAgeLimit"]));
            end if;
            if configJSONObject'contains("InvariantStoreLoadRate") then
                invariantStoreLoadRate := duration'parse(JSON::get_string(configJSONObject["InvariantStoreLoadRate"]));
                if this.invariantStoreLoadRate /= invariantStoreLoadRate then
                	this.invariantStoreLoadRate := invariantStoreLoadRate;
                	Req_IF_InvariantStore~>setLoadRate(this.invariantStoreLoadRate);
                end if;
            end if;
            if configJSONObject'contains("FileControlWaitTime") then
                this.fileControlWaitTime := duration'parse(JSON::get_string(configJSONObject["FileControlWaitTime"]));
            end if;
            // read in the jobs that we expect to process
            if configJSONObject'contains("Jobs") and configJSONObject["Jobs"].kind = JSON::Array then
                // TODO process job specific parameters
            end if;
        else
            logMessage := "AEOrdering::SystemSpec.ConfigUpdated : Config file invalid:\n" & JSON::dump(configValidationResult, true);
            Logger::log(Logger::Debug, "AEOrdering", logMessage);
            raise JSON::JSONException("Config file invalid");
        end if;
        
        // process job definitions
        if Filesystem::file_exists(Filesystem::filename(this.jobDefinitionDirectory)) then
            for jobDefinitionFile in Filesystem::list_directory(Filesystem::filename(this.jobDefinitionDirectory)) loop
                // if the file extension is ".json", assume the file is a job definition
                if Strings::ends_with(jobDefinitionFile, ".json") then
                    jobTypeJSONString := Filesystem::read_file(Filesystem::filename(this.jobDefinitionDirectory & "/" & string(jobDefinitionFile)));
                    jobTypeJSONElement := JSON::parse(jobTypeJSONString);
                    jobTypeValidationResult := JSONValidation::validate(jobTypeJSONElement, #PROP["jobDefinitionSchema"]#);
                    if JSON::get_boolean(jobTypeValidationResult["valid"]) then
                        jobTypeJSONObject := JSON::get_object(jobTypeJSONElement);
                        // find or create the job
                        jobType := find_one JobType(jobTypeName = JSON::get_string(jobTypeJSONObject["JobDefinitionName"]));
                        if jobType = null then
                            jobType := create JobType(
                                jobTypeName => JSON::get_string(jobTypeJSONObject["JobDefinitionName"]),
                                deprecated => false,
                                jobTypeExpiryTime => timestamp'now + duration'weeks(1000),
                                staleAuditEventDuration => duration'weeks(1000),
                                blockedAuditEventDuration => duration'weeks(1000),
                                Current_State => Created
                            );
                            generate JobType.activateJobType() to jobType;
                        end if;
                        // extract the spec data items
                        jobType.loadEventTypes(JSON::get_object(jobTypeJSONElement));
                        // TODO update event specific rules
                    else
                        logMessage := "AEOrdering::SystemSpec.ConfigUpdated : Job definition file invalid:\n" & JSON::dump(jobTypeValidationResult, true);
                        Logger::log(Logger::Debug, logMessage);
                        raise JSON::JSONException("Job definition file invalid");
                    end if;
                end if;
            end loop;
        end if;
        
        // resolve data item forward references
        for dataItemForwardRef in find SourceDataItemForwardReference() loop
            dataItemForwardRef.resolve();
        end loop;
        
        // set the config file mod time
        this.configFileModificationTime := this.lastModificationTime();
        
        // report the latest set of events to the sequence domain
        for job in find JobType() loop
            for auditEventType in (job -> R12.AuditEventType() ordered_by (auditEventTypeId)) loop
                Req_IF_Verification~>eventDefinition(auditEventType.jobTypeName, auditEventType.sequenceName, auditEventType.eventType, auditEventType.occurrenceId, 
                	                                 auditEventType.previousEventTypes, auditEventType.isSequenceStart, auditEventType.isSequenceEnd, auditEventType.isBreak);
            end loop;
            // report any dynamic controls
            for dynamicControl in (job -> R12.AuditEventType -> R19.DynamicControl) loop
            	Req_IF_Verification~>dynamicControlDefinition(job.jobTypeName, dynamicControl.dynamicControlName, dynamicControl.controlType, dynamicControl.eventType, dynamicControl.occurrenceId, dynamicControl.userEventType, dynamicControl.userOccurrenceId);
            end loop;
            
	        // report the latest set of intra job inv event data to the sequence domain
	        intraJobInvDataItems := job -> R14.DataItemType(dataItemType = "INTRAJOBINV");
	        if intraJobInvDataItems'length > 0 then
		        for dataItemType in intraJobInvDataItems loop
		        	associatedEvent := emptyAssociatedEvent;
		            associatedEvent.auditEventType := dataItemType.eventType;
		            associatedEvent.occurrenceId := dataItemType.occurrenceId;
		            associatedEvent.alternativeDataItemName := dataItemType.dataItemName;
		            associatedEvents := associatedEvents & associatedEvent;
		            constrainingDataItem := dataItemType -> R18.isConstrainedBy.DataItemType;
		            if constrainingDataItem /= null then
		               constrainingDataItemName := constrainingDataItem.dataItemName;
		           end if;
		        end loop;
	            Req_IF_Verification~>intraJobInvariantDefinition(constrainingDataItemName, job.jobTypeName, associatedEvents);
	         end if;
        end loop;
        
        // report the latest set of extra job inv event data to the sequence domain
        for dataItemType in find DataItemType(dataItemType = "EXTRAJOBINV") loop
            if dataItemType -> R18.isConstrainedBy.DataItemType = null then
                // build up the event data items
                userEvents := emptyUserEvents;
                for constrainedDataItem in dataItemType -> R18.constrains.DataItemType loop
                    userEvent := emptyUserEvent;
                    userEvent.jobDefinitionName := constrainedDataItem.jobTypeName;
                    userEvent.auditEventType := constrainedDataItem.eventType;
                    userEvent.occurrenceId := constrainedDataItem.occurrenceId;
                    userEvent.alternativeDataItemName := constrainedDataItem.dataItemName;
                    userEvents := userEvents & userEvent;
                end loop;
                Req_IF_Verification~>extraJobInvariantDefinition(dataItemType.dataItemName, dataItemType.jobTypeName, dataItemType.eventType, dataItemType.occurrenceId, userEvents);
            end if;
        end loop;

        // if the job store does not exist then create it
        jobStore := find_one JobStore();
        if jobStore = null then
        	fileControl := find_one FileControl();
        	jobStoreName := "JobIdStore" & "-" &  fileControl.startJobGroup'image & "-" & fileControl.endJobGroup'image;
        	jobStore := create JobStore(jobStoreName => jobStoreName, jobStoreLocation => jobStoreLocation, jobStoreAgeLimit => jobStoreAgeLimit, Current_State => Created);
        	JobStore.loadJobStore();
        	today := timestamp'now'split_ymd();
        	midnight := timestamp'combine_ymd(today[1], today[2], today[3] + 1);
        	schedule jobStore.jobStoreTimer generate JobStore.purgeJobStore() to jobStore at midnight; 
        end if;
        // schedule to check the config file
        schedule this.configTimer generate SystemSpec.checkConfigUpdate() to this delay this.specUpdateRate;
    else
        logMessage := "AEOrdering::ConfigUpdated : failed to locate config file. Specified file = " & this.configFilePath & this.configFile;
        Logger::log(Logger::Error, "AEOrdering", logMessage);
        raise program_error;
    end if;
    
exception
    when program_error =>
        logMessage := "AEOrdering::SystemSpec.ConfigUpdated : failed to load configuration file";
        Logger::log(Logger::Error, "AEOrdering", logMessage);
        raise program_error;
    when others =>     
        logMessage := "AEOrdering::SystemSpec.ConfigUpdated : failed to load configuration file";
        Logger::log(Logger::Error, "AEOrdering", logMessage);
        raise program_error;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

