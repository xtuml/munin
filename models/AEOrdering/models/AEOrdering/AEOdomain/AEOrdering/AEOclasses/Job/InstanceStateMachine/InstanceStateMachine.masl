//! ACTIVITY BEGIN. 'ee1fb944-54a4-406f-b70a-53153f627d75' '8497e01e-e940-4a76-8a9f-56e416dea28d' DO NOT EDIT THIS LINE.
state AEOrdering::Job.Created () is
begin
  null;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'ee1fb944-54a4-406f-b70a-53153f627d75' '12a258d6-d8d0-4390-90de-849a46f1dd6e' DO NOT EDIT THIS LINE.
state AEOrdering::Job.InProgress () is
logMessage : string;
systemSpec : instance of SystemSpec;

begin
		
	// start the maximum job time to verify that he job is complete 
	systemSpec := find_one SystemSpec();
	schedule this.jobTimer generate Job.jobCompleted() to this delay systemSpec.maximumJobTime;
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'ee1fb944-54a4-406f-b70a-53153f627d75' 'cbef2035-18c3-4dfb-8e34-dbac4f9e6555' DO NOT EDIT THIS LINE.
state AEOrdering::Job.Archived () is
logMessage : string;
inProgressJob : instance of InProgressJob;
archivedJob : instance of ArchivedJob;
systemSpec : instance of SystemSpec;

begin
	
	cancel this.jobTimer;

	// migrate to archived job
	inProgressJob := this -> R2.InProgressJob;
	unlink inProgressJob R2 this;
	delete inProgressJob;
	archivedJob := create ArchivedJob(jobId => this.jobId);
	link archivedJob R2 this;
	
	// set the completion time and start the job complete period
	this.jobCompletionTime := timestamp'now;
	
	// add the job to the job store as there should be no more events
	JobStore.addJobToStore(this.jobId);
	
	// inform Verification that the job is complete
	Req_IF_Verification~>jobComplete(this.jobId);
	systemSpec := find_one SystemSpec();
	schedule this.jobTimer generate Job.deleteJob() to this delay systemSpec.jobCompletePeriod;
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'ee1fb944-54a4-406f-b70a-53153f627d75' '069fc43d-616e-4a1e-8bb5-111f8d32ec3a' DO NOT EDIT THIS LINE.
state AEOrdering::Job.Failed () is
logMessage : string;
systemSpec : instance of SystemSpec;
instrumentationEventId : string;
instrumentationEventType : string;

begin

	cancel this.jobTimer;
	
	// add the job to the job store as there should be no more events
	JobStore.addJobToStore(this.jobId);
	
	// start the job complete period
	systemSpec := find_one SystemSpec();
	schedule this.jobTimer generate Job.deleteJob() to this delay systemSpec.jobCompletePeriod;

    // Report that AEO considers that the respective Job has failed as part of the 
    // verification of the Protocol Verifier itself.
    instrumentationEventId := "Unused";
    instrumentationEventType := "AEO_PVJobFails";
    Req_IF_BehaviourVerification~>sendInstrumentationEvent(this.jobId, instrumentationEventId, instrumentationEventType);
  
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'ee1fb944-54a4-406f-b70a-53153f627d75' '4d6cdb20-682a-45cb-9520-e2ae3c11293a' DO NOT EDIT THIS LINE.
state AEOrdering::Job.Deleted () is
instrumentationEventId : string;
instrumentationEventType : string;
jobName : string;

begin
  // Report that AEO has deleted the respective Job as part of the 
  // verification process of the Protocol Verifier itself.
  jobName := "TBD";
  instrumentationEventId := "Unused";
  instrumentationEventType := "AEO_PVJobDeleted";
  Req_IF_BehaviourVerification~>sendInstrumentationEvent(jobName, this.jobId, instrumentationEventId, instrumentationEventType);

  this.jobDeleted();

end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'ee1fb944-54a4-406f-b70a-53153f627d75' 'd5e0d359-24ec-4439-bb79-74c7d3be2459' DO NOT EDIT THIS LINE.
state AEOrdering::Job.VerifiedJobSuccess () is
failureReason : string;

begin

	cancel this.jobTimer;
	
	// check if there are any outstanding blocked events
	if (this -> R1.AuditEvent)'length > 0 then
		failureReason := "JobId = " & this.jobId & " : FailureReason = Job has timed out with blocked events that were not processed.";
		this.failJob(failureReason);
	else
		// no outstanding blocked events so archive the job
		generate Job.archiveJob() to this;
	end if;

end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

