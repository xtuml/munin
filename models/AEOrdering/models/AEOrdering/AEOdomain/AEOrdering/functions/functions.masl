//! ACTIVITY BEGIN. '74d12669-f0f1-4050-8f62-08b090fb01ce' DO NOT EDIT THIS LINE.
public service AEOrdering::AcceptEvent ( jobId : in string,
                                        jobName : in string,
                                        auditEventType : in string,
                                        auditEventId : in string,
                                        auditEventTime : in string,
                                        prevAuditEventIds : in sequence of string,
                                        auditEventData : in AuditEventDataType ) is
job : instance of Job;
inProgressJob : instance of InProgressJob;
failedJob : instance of FailedJob;
auditEvent : instance of AuditEvent;
jobFailureReason : string;
failureReason : string;
systemSpec : instance of SystemSpec;
kvps : dictionary of string;
instrumentationEventId : string;
instrumentationEventType : string;
worker : instance of Worker;
pes : string := "";
pe  : string := "";

begin

	if (Logger::enabled(Logger::Debug, "pv.aeo.acceptevent")) then
		for pe in prevAuditEventIds loop
			pes := pes & pe;
		end loop;
		kvps["previds"] := pes;
		Logger::log(Logger::Debug, "pv.aeo.acceptevent",
		  aeoLog("aeordering_accept_event", "receiving event", jobId, jobName, auditEventId, auditEventType, kvps));
	end if;
	systemSpec := find_one SystemSpec();
	job := find_one Job(jobId = jobId);
	if job = null then
		job := create Job(jobId => jobId, outOfSequenceEventCount => 0, jobStartTime => timestamp'now, totalOutOfSequence => 0, maxOutOfSequence => 0, reportedJobName => jobName, Current_State => Created);
		if find_one JobType(jobTypeName = jobName) /= null then
			inProgressJob := create InProgressJob(jobId => job.jobId);
			link inProgressJob R2 job;
			generate Job.jobStarted() to job;
			if (Logger::enabled(Logger::Debug, "pv.aeo.acceptevent")) then
				Logger::log(Logger::Debug, "pv.aeo.acceptevent",
				  aeoLog("aeordering_job_processed", "starting job", job.jobId, jobName, auditEventId, auditEventType, kvps));
			end if;
			// ...and then report that AEO has started processing a new job as part of the 
			// verification of the Protocol Verifier itself.
			instrumentationEventId := "Unused";
			instrumentationEventType := "AEO_PVJobStart";
			Req_IF_BehaviourVerification~>sendInstrumentationEvent("ProtocolVerifier", job.jobId, instrumentationEventId, instrumentationEventType);
		else
			// we have created the job but the reported job name does not match a known JobType
			// so we need to fail the job
			failedJob := create FailedJob(jobId => job.jobId, failureReason => "Invalid job name supplied", jobFailureTime => timestamp'now);
			failureReason := "JobId = " & job.jobId & "FailureReason = Invalid job name supplied, jobName = " & jobName;
			link failedJob R2 job;
			// inform Job Management that the job is complete
			worker := find_one Worker();
			Req_IF_JobManagement~>jobCompleted(worker.workerId, jobId);
			generate Job.jobFailed() to job;
		end if;
	end if;
	
	// create the audit event
	if job -> R2.FailedJob /= null then
		jobFailureReason := "JobId = " & job.jobId & " : FailureReason = Job has failed";
	elsif job -> R2.ArchivedJob /= null then
		jobFailureReason := "JobId = " & job.jobId & " : FailureReason = Job is already archived";
	end if;
	auditEvent := AuditEvent.createAuditEvent(job, jobName, auditEventType, auditEventId, auditEventTime, prevAuditEventIds, auditEventData, failureReason);
	
	// check if the audit event is blocked
	if auditEvent = null or job -> R2.ArchivedJob /= null or job -> R2.FailedJob /= null then
		job.failJob(jobFailureReason);
	elsif auditEvent -> R4.BlockedAuditEvent /= null then
		link auditEvent R1 job;
		job.outOfSequenceEventCount := (job -> R1.AuditEvent)'length;
		// if this out of sequence event count is higher than the current max out of sequence then update the current max out of sequence
		if job.outOfSequenceEventCount > job.maxOutOfSequence then
			job.maxOutOfSequence := job.outOfSequenceEventCount;
		end if;
		// if we have exceeded the max out of sequence events then fail the job
		if job.outOfSequenceEventCount >= systemSpec.maxOutOfSequenceEvents then
			failureReason := "JobId = " & job.jobId & "FailureReason = Maximum out of sequence events reached, max = " & systemSpec.maxOutOfSequenceEvents'image;
			job.failJob(failureReason);
		end if;
		
	// check if we need to report a jobFailure
	elsif auditEvent -> R4.FailedAuditEvent /= null and job -> R2.InProgressJob /= null then
		job.failJob(failureReason);
	end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'd313277c-1d1c-4def-8303-bc6aa6b950dd' DO NOT EDIT THIS LINE.
public service AEOrdering::deleteJob ( jobId : in string ) is
theJob : instance of Job;

begin
  theJob := find_one Job(jobId = jobId);
  if theJob /= null then
    // Check if the job has any blocked events and if so fail the job otherwise delete the job
	if (theJob -> R9.AuditEvent -> R4.BlockedAuditEvent)'length > 0 then
	  theJob.failJob("JobId = " & jobId & " : FailureReason = Job ended with blocked events");
    else  
    	generate Job.archiveJob() to theJob;
    end if;
  else
    // TODO - Raise log message that reports that the specified job does not exist  
  end if;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '0928dd89-5bac-46c1-89a7-a1ca3beaac16' DO NOT EDIT THIS LINE.
public service AEOrdering::AcceptJsonEvent ( workerId : in UUID::formatted_uuid,
                                            auditEvent : in string ) is
systemSpec : instance of SystemSpec;
jsonElement: JSON::JSONElement;
jsonObject : JSON::JSONObject;
validate : boolean := false;
prevIds: sequence of string;
evtData: dictionary;
worker : instance of Worker;
kvps : dictionary of string;

begin

	worker := find_one Worker(workerId = workerId);
	if worker /= null then
		if worker.registered = true then
			jsonElement := JSON::parse(auditEvent);
			if jsonElement.kind = JSON::Object then
				jsonObject := JSON::get_object(jsonElement);
				if jsonObject'keys'length = 1 and jsonObject'keys'any = "__comment__" then
					// ignore comment objects
					if (Logger::enabled(Logger::Debug, "pv.aeo.acceptjsonevent")) then
						kvps["comment"] := JSON::get_string(jsonObject[jsonObject'keys'any]);
						Logger::log(Logger::Debug, "pv.aeo.acceptjsonevent",
						  aeoLog("aeordering_accept_json_event", "receiving event JSON with comment", "", "", "", "", kvps));
					end if;
				else

					// validate the event against schema
					systemSpec := find_one SystemSpec();
					if systemSpec.schemaValidated(jsonObject) = true then
						
						// process the event
						if jsonObject'contains("previousEventIds") then
							if jsonObject["previousEventIds"].kind = JSON::Array then
								for prev_id_json in JSON::get_array(jsonObject["previousEventIds"]) loop
									prevIds := prevIds & JSON::get_string(prev_id_json);
								end loop;
							elsif jsonObject["previousEventIds"].kind = JSON::String then
								prevIds := prevIds & JSON::get_string(jsonObject["previousEventIds"]);
							end if;
						end if;
						for key in jsonObject'keys loop
							if key /= "jobId" and
							   key /= "jobName" and
							   key /= "eventType" and
							   key /= "eventId" and
							   key /= "timestamp" and
							   key /= "previousEventIds" then
								if jsonObject[key].kind = JSON::String then
									evtData[key] := JSON::get_string(jsonObject[key]);
								else
									evtData[key] := JSON::dump(jsonObject[key]);
								end if;
							end if;
						end loop;
						AcceptEvent(JSON::get_string(jsonObject["jobId"]), JSON::get_string(jsonObject["jobName"]), JSON::get_string(jsonObject["eventType"]),
									JSON::get_string(jsonObject["eventId"]), JSON::get_string(jsonObject["timestamp"]), prevIds, evtData);
					end if;
				end if;
			end if;
		else
			// the worker is not registered but job management thinks it is
			// deregister the worker and log an error
			Req_IF_JobManagement~>deregisterWorker(workerId);
			kvps["workerId"] := string(workerId);
			Logger::log(Logger::Error, "pv.aeo.acceptjsonevent",
			  aeoLog("aeordering_rcvd_unregistered", "received event for unregistered worker", "", "", "", "", kvps));
		end if;
	else
		// This event is not for this worker.  Ignore it.
	end if;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '47e54723-c42e-4896-8f6b-222426f59115' DO NOT EDIT THIS LINE.
public service AEOrdering::workerRegistered ( workerId : in UUID::formatted_uuid ) is
worker : instance of Worker;

begin
    worker := find_one Worker(workerId = workerId);
    if worker /= null then
    	generate Worker.registrationAccepted() to worker;
	end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '809725ba-6a72-4611-88a3-955ffdc7bec3' DO NOT EDIT THIS LINE.
public service AEOrdering::workerUnregistered ( workerId : in UUID::formatted_uuid ) is
worker : instance of Worker;
kvps : dictionary of string;

begin
    worker := find_one Worker(workerId = workerId);
    if worker /= null then
        kvps["workerId"] := string(workerId);
        Logger::log(Logger::Information, "pv.aeo.workerunregistered",
          aeoLog("aeordering_worker_unregistered_received", "received event for unregistered worker", "", "", "", "", kvps));
        generate Worker.deregistered() to worker;
    end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '979cf805-bf5c-445b-9027-fe365f39280d' DO NOT EDIT THIS LINE.
public service AEOrdering::registerWorker () is
worker : instance of Worker;

begin
	worker := find_one Worker();
	if worker /= null and worker.registered = false then
		generate Worker.requestRegistration() to worker;
	end if;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '8b45dbe0-80ee-4c7a-a90a-4037cbff70c6' DO NOT EDIT THIS LINE.
public service AEOrdering::deregisterWorker () is
worker : instance of Worker;

begin
	worker := find_one Worker();
	if worker /= null and worker.registered = true then
		generate Worker.requestDeregistration() to worker;
	end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'c9240636-ce74-4ad8-b115-0d32b5e97fa2' DO NOT EDIT THIS LINE.
public service AEOrdering::jobCompletionConfirmed ( workerId : in UUID::formatted_uuid,
                                                   jobId : in string ) is
worker : instance of Worker;
job : instance of Job;

begin
    worker := find_one Worker(workerId = workerId);
    if worker /= null then
    	job := find_one Job(jobId = jobId);
    	if job /= null then
	    	generate Job.deleteJob() to job;
		end if;
	end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'b0135310-396f-4580-99b3-a3acba08de50' DO NOT EDIT THIS LINE.
private service AEOrdering::aeoLog ( tag : in string,
                                    message : in string,
                                    jobId : in string,
                                    jobName : in string,
                                    eventId : in string,
                                    eventName : in string,
                                    key_value_pairs : in dictionary of string ) return string is
jsonElement : JSON::JSONElement;
key : string;
logMessageKeyValuePairs : dictionary of string;

begin
  logMessageKeyValuePairs["tag"] := tag;
  logMessageKeyValuePairs["message"] := message;
  logMessageKeyValuePairs["jobId"] := jobId;
  logMessageKeyValuePairs["jobName"] := jobName;
  logMessageKeyValuePairs["eventId"] := eventId;
  logMessageKeyValuePairs["eventName"] := eventName;
  for key in key_value_pairs'keys loop
    logMessageKeyValuePairs[key] := key_value_pairs[key];
  end loop;
  jsonElement := JSON::to_json( logMessageKeyValuePairs );
  return JSON::dump( jsonElement );
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '514a37de-9293-457c-af09-761c82437003' DO NOT EDIT THIS LINE.
private service AEOrdering::AcceptJsonAuditEvents ( workerId : in UUID::formatted_uuid,
                                                   auditEvents : in JSON::JSONArray ) is
systemSpec : instance of SystemSpec;
jsonElement: JSON::JSONElement;
jsonObject : JSON::JSONObject;
prevIds: sequence of string;
emptyPrevIds: sequence of string;
evtData: dictionary;
emptyEvtData: dictionary;
worker : instance of Worker;
kvps : dictionary of string;

begin
    worker := find_one Worker(workerId = workerId);
    if worker /= null then
        if worker.registered = true then
            systemSpec := find_one SystemSpec();
            for jsonElement in auditEvents loop
                prevIds := emptyPrevIds;
                if jsonElement.kind = JSON::Object then
                    jsonObject := JSON::get_object(jsonElement);
                    if jsonObject'keys'length = 1 and jsonObject'keys'any = "__comment__" then
                        // ignore comment objects
                        if (Logger::enabled(Logger::Debug, "pv.aeo.acceptjsonauditevents")) then
                            kvps["comment"] := JSON::get_string(jsonObject[jsonObject'keys'any]);
                            Logger::log(Logger::Debug, "pv.aeo.acceptjsonauditevents",
                              aeoLog("aeordering_accept_json_event", "receiving event JSON with comment", "", "", "", "", kvps));
                        end if;
                    else

                        // validate the event against schema
                        if systemSpec.schemaValidated(jsonObject) = true then

                            // process the event
                            if jsonObject'contains("previousEventIds") then
                                if jsonObject["previousEventIds"].kind = JSON::Array then
                                    for prev_id_json in JSON::get_array(jsonObject["previousEventIds"]) loop
                                        prevIds := prevIds & JSON::get_string(prev_id_json);
                                    end loop;
                                elsif jsonObject["previousEventIds"].kind = JSON::String then
                                    prevIds := prevIds & JSON::get_string(jsonObject["previousEventIds"]);
                                end if;
                            end if;
                            evtData := emptyEvtData;
                            for key in jsonObject'keys loop
                                if key /= "jobId" and
                                   key /= "jobName" and
                                   key /= "eventType" and
                                   key /= "eventId" and
                                   key /= "timestamp" and
                                   key /= "previousEventIds" then
                                    if jsonObject[key].kind = JSON::String then
                                        evtData[key] := JSON::get_string(jsonObject[key]);
                                    else
                                        evtData[key] := JSON::dump(jsonObject[key]);
                                    end if;
                                end if;
                            end loop;
                            AcceptEvent(JSON::get_string(jsonObject["jobId"]), JSON::get_string(jsonObject["jobName"]), JSON::get_string(jsonObject["eventType"]),
                              JSON::get_string(jsonObject["eventId"]), JSON::get_string(jsonObject["timestamp"]), prevIds, evtData);
                        else
                            // schema validation error
                            kvps["workerId"] := string(workerId);
                            Logger::log(Logger::Error, "pv.aeo.acceptjsonauditevents",
                              aeoLog("aeordering_schema_invalid", "received event failed schema validation", "", "", "", "", kvps));
                        end if;
                    end if;
                end if;
            end loop;
        else
            // The worker is not registered but job management thinks it is.
            // Deregister the worker and log an error.
            Req_IF_JobManagement~>deregisterWorker(workerId);
            kvps["workerId"] := string(workerId);
            Logger::log(Logger::Error, "pv.aeo.acceptjsonauditevents",
              aeoLog("aeordering_rcvd_unregistered", "received event for unregistered worker", "", "", "", "", kvps));
        end if;
    else
        // This event is not for this worker.  Ignore it.
    end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

