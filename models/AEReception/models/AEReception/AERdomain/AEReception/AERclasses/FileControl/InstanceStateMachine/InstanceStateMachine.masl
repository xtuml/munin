//! ACTIVITY BEGIN. 'f265001f-97e1-4e0d-b14f-defefb0bbfab' 'f107bb75-87f9-4d8b-b539-892818c3e4ef' DO NOT EDIT THIS LINE.
state AEReception::FileControl.Created () is
begin
  null;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'f265001f-97e1-4e0d-b14f-defefb0bbfab' '3242925b-9d77-4233-be69-afeb0a895d4b' DO NOT EDIT THIS LINE.
state AEReception::FileControl.WaitingForFile () is
logMessage : string;
receptionSpec : instance of ReceptionSpec;
fileNames : sequence of Filesystem::filename;
eventFile : instance of EventFile;
fileToBeProcessed : Filesystem::filename;
lock: Filesystem::file_lock;
fileAssigned : boolean := false;
filePermissions : Filesystem::permissions;

begin

	// find a file to process
	receptionSpec := find_one ReceptionSpec();
	fileNames := Filesystem::list_directory(Filesystem::filename(receptionSpec.incomingDirectory));
	for currentFile in fileNames loop
		begin
			if Filesystem::lock_file(Filesystem::filename(receptionSpec.incomingDirectory & "/") & currentFile, Filesystem::ExclusiveLock, lock, false) then
				fileToBeProcessed := Filesystem::filename(receptionSpec.processingDirectory & "/") & currentFile;
				Filesystem::move_file( Filesystem::filename(receptionSpec.incomingDirectory & "/") & currentFile, Filesystem::filename(fileToBeProcessed));
				// verify that the move worked
				if Filesystem::file_exists(Filesystem::filename(fileToBeProcessed)) then
					eventFile := create EventFile(fileName => string(currentFile), assigned => true);
					link this R1 eventFile;
					generate FileControl.allocateFile(eventFile) to this;
					fileAssigned := true;
					logMessage := "AEReception::FileControl.assignFile - assigning file " & eventFile.fileName;
					Logger::log(Logger::Information, "AEReception", logMessage);
					exit; // for loop
				end if;
			end if;
		exception
			when others => null;
		end;
	end loop;
	if fileAssigned = false then
		schedule this.fileControlTimer generate FileControl.checkCapacity() to this delay receptionSpec.fileControlWaitTime;
	end if;
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'f265001f-97e1-4e0d-b14f-defefb0bbfab' '0e9ddd05-8211-4291-b0a1-3203854776a8' DO NOT EDIT THIS LINE.
state AEReception::FileControl.ProcessingFile ( eventFile : in instance of EventFile ) is
logMessage : string;
receptionSpec : instance of ReceptionSpec;
receptionJob : instance of Reception;
fileToBeProcessed : string;
validate : boolean := false;

begin
	
	logMessage := "AEReception::FileControl.ProcessingFile";
	Logger::log(Logger::Information, "AEReception", logMessage);
		
	// create the reception job and link to the event file it has to process
	receptionSpec := find_one ReceptionSpec();
	fileToBeProcessed := receptionSpec.processingDirectory & "/" & eventFile.fileName;
	receptionJob := create unique Reception (filePath => fileToBeProcessed, aeDelay => receptionSpec.eventThrottleRate, eventsProcessed => 0, Current_State => starting);
	link receptionJob R2 eventFile;
	if receptionSpec.schemaValidate = true then
		this.schemaValidationCount := this.schemaValidationCount + 1;
		if this.schemaValidationCount = receptionSpec.schemaValidateFrequency then
			validate := true;
			this.schemaValidationCount := 0;
		end if;
	end if;
	generate Reception.ready_to_parse(validate) to receptionJob;
	// check for more capacity
	generate FileControl.checkCapacity() to this;
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'f265001f-97e1-4e0d-b14f-defefb0bbfab' '21ed2448-1468-4d2f-8dc7-e25047d11ad8' DO NOT EDIT THIS LINE.
state AEReception::FileControl.WaitingForCapacity () is
logMessage : string;
receptionSpec : instance of ReceptionSpec;
currentJobs : sequence of instance of Reception;

begin
	
//	logMessage := "AEReception::FileControl.WaitingForCapacity";
//	Logger::log(Logger::Information, "AEReception", logMessage);
	
	cancel this.fileControlTimer;
	receptionSpec := find_one ReceptionSpec();
	currentJobs := find Reception(receptionComplete = false);
	if currentJobs'length < receptionSpec.concurrentReceptionLimit then
		generate FileControl.checkForFile() to this;
	else
		// schedule to check for capacity. Should not be needed as conclusion of reception processing should force the check.
		schedule this.fileControlTimer generate FileControl.checkCapacity() to this delay receptionSpec.fileControlWaitTime;
	end if;
  
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

