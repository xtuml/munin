//! ACTIVITY BEGIN. '08c6658b-b7aa-4bee-b72d-024b77c8cfd2' DO NOT EDIT THIS LINE.
public instance service AEReception::JobEventFile.addEvent ( nodeName : in string,
                                                            eventJsonObject : in JSON::JSONObject ) is
auditEvent : JSON::JSONObject;
eventContent : string;

begin
    
    // add the event to the set of audit events for this job
    auditEvent["node"] := JSON::to_json(nodeName);
    auditEvent["eventType"] := eventJsonObject["eventType"];
    auditEvent["jobId"] := JSON::to_json(string(this.jobId));
    auditEvent["eventId"] := eventJsonObject["eventId"];
    auditEvent["timestamp"] := eventJsonObject["timestamp"];
    auditEvent["applicationName"] := eventJsonObject["applicationName"];
	
    // Any other key is an event data item
    for eventDataName in eventJsonObject'keys loop
    	
        if eventDataName /= "jobId" and
           eventDataName /= "jobName" and
           eventDataName /= "applicationName" and
           eventDataName /= "eventType" and
           eventDataName /= "eventId" and
           eventDataName /= "timestamp" and
           eventDataName /= "previousEventIds" and
           eventDataName /= "__comment__" then
        	   
		    auditEvent[eventDataName] := eventJsonObject[eventDataName];
        end if;
    end loop;    
	if eventJsonObject'contains("previousEventIds") then
    	auditEvent["previousEventIds"] := eventJsonObject["previousEventIds"];
    end if;
    
    this.auditEvents := this.auditEvents & JSON::to_json(auditEvent);
    this.eventIds := this.eventIds & JSON::get_string(auditEvent["eventId"]);
    eventContent := "JobId = " & auditEvent["jobId"].data.str & " : EventId = " & auditEvent["eventId"].data.str & " : EventType = " & auditEvent["eventType"].data.str;
    Reporting~>reportEvent(Logger::Information, "reception_event_added", eventContent);

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '5cc58897-99d1-449c-86b2-e9139892f24f' DO NOT EDIT THIS LINE.
public instance service AEReception::JobEventFile.writeJobEventFile () is
receptionSpec : instance of ReceptionSpec;
eventContent : string;

begin
	receptionSpec := find_one ReceptionSpec();	
	Filesystem::write_file(Filesystem::filename(receptionSpec.processedDirectory & "/" & this.jobEventFileName), JSON::dump(this.auditEvents));
	if Filesystem::file_exists(Filesystem::filename(receptionSpec.processedDirectory & "/" & this.jobEventFileName)) and Filesystem::file_exists(Filesystem::filename(this.jobEventFileLocation & "/")) then
		Filesystem::move_file(Filesystem::filename(receptionSpec.processedDirectory & "/" & this.jobEventFileName), Filesystem::filename(this.jobEventFileLocation & "/" & this.jobEventFileName));
	else
		raise program_error;
	end if;
	for eventId in this.eventIds loop
		eventContent := "EventId = " & eventId;
		Reporting~>reportEvent(Logger::Information, "reception_event_written", eventContent);
	end loop;
	this.jobEventFileGenerated := true;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

