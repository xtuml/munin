//! ACTIVITY BEGIN. 'bb579c50-132b-494e-8018-81a7b4ca3778' '167ab2c4-e4fa-415a-a012-1eed723e4434' DO NOT EDIT THIS LINE.
state AEReception::Reception.starting () is
begin
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'bb579c50-132b-494e-8018-81a7b4ca3778' '00f732b9-8e05-41dc-a357-6bdce5e53842' DO NOT EDIT THIS LINE.
state AEReception::Reception.receiving_audit_event () is
logMessage: string;
json_object: JSON::JSONObject;
validation_result: JSON::JSONObject;
event_received: boolean := false;
receptionSpec : instance of ReceptionSpec;
jobEventFileLocation : string;
eventContent : string;
jobId: string;
eventId: string := "UnknownID";
nodeName : string := "NoNode";

begin

    if this.jsonObject'keys'length = 1 and this.jsonObject'keys'any = "__comment__" then
        // ignore comment objects
        logMessage := "AEReception::Reception.receiving_audit_event : JSON comment: " & JSON::get_string(this.jsonObject[this.jsonObject'keys'any]);
        Logger::log(Logger::Debug, "AEReception", "JSON comment: " & JSON::get_string(this.jsonObject[this.jsonObject'keys'any]));
    else
        // report the event received
        if this.jsonObject'contains("eventId") then
          	eventId := JSON::get_string(this.jsonObject["eventId"]);
        end if;
		eventContent := "EventId = " & eventId;
		Reporting~>reportEvent(Logger::Information, "reception_event_received", eventContent);

        // validate the event
        if this.validate then
        	validation_result := JSONValidation::validate(JSON::to_json(this.jsonObject), #PROP["auditEventSchema"]#);
			if JSON::get_boolean(validation_result["valid"]) = true then
				eventContent := "EventId = " & eventId;
				Reporting~>reportEvent(Logger::Information, "reception_event_valid", eventContent);
			else
				eventContent := "EventId = " & eventId;
				Reporting~>reportEvent(Logger::Error, "reception_event_invalid", eventContent);
				logMessage := "AEReception::Reception.receiving_audit_event : Dropping invalid event with ID: " & eventId & "\n" & JSON::dump(validation_result, true);
				Logger::log(Logger::Debug, "AEReception", logMessage);
			end if;
		end if;

		// only process valid events (or if validation is disabled)
		if this.validate = false or JSON::get_boolean(validation_result["valid"]) = true then
			// extract the job ID from the JSON structure
			jobId := JSON::get_string(this.jsonObject["jobId"]);
			
			// publish the event to ordering
			declare
			  prevIds: sequence of string;
			  evtData: dictionary;
			begin
				if this.jsonObject'contains("previousEventIds") then
					if this.jsonObject["previousEventIds"].kind = JSON::Array then
						for prev_id_json in JSON::get_array(this.jsonObject["previousEventIds"]) loop
							prevIds := prevIds & JSON::get_string(prev_id_json);
						end loop;
					elsif this.jsonObject["previousEventIds"].kind = JSON::String then
                        prevIds := prevIds & JSON::get_string(this.jsonObject["previousEventIds"]);
                    end if;
				end if;
				for key in this.jsonObject'keys loop
					if key /= "jobId" and
					   key /= "jobName" and
					   key /= "eventType" and
					   key /= "eventId" and
					   key /= "timestamp" and
					   key /= "previousEventIds" then
						if this.jsonObject[key].kind = JSON::String then
							evtData[key] := JSON::get_string(this.jsonObject[key]);
						else
							evtData[key] := JSON::dump(this.jsonObject[key]);
						end if;
					end if;
				end loop;
				Ordering~>AcceptEvent(
					JSON::get_string(this.jsonObject["jobId"]),
					nodeName,
					JSON::get_string(this.jsonObject["applicationName"]),
					JSON::get_string(this.jsonObject["eventType"]),
					JSON::get_string(this.jsonObject["eventId"]),
					JSON::get_string(this.jsonObject["timestamp"]),
					prevIds,
					evtData
				);
			end;
			
    	end if;
    end if;

    generate Reception.no_more_events() to this;

end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'bb579c50-132b-494e-8018-81a7b4ca3778' 'af392d9f-ad3c-4926-8aee-c8e9eb8dffa9' DO NOT EDIT THIS LINE.
state AEReception::Reception.done () is
logMessage : string;
receptionSpec : instance of ReceptionSpec;

begin
	

	receptionSpec := find_one ReceptionSpec();
	// keep the reception job until the deletion timer fires
	this.receptionComplete := true;
	
	// schedule the deletion
	schedule this.deletionTimer generate Reception.reception_expired() to this delay receptionSpec.receptionDeletionTime;
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'bb579c50-132b-494e-8018-81a7b4ca3778' 'b800b83d-014a-4d72-9661-d34476c735a0' DO NOT EDIT THIS LINE.
state AEReception::Reception.parsing ( auditEvent : in string ) is
logMessage : string;
json_element: JSON::JSONElement;
eventContent : string;

begin

    json_element := JSON::parse(auditEvent);
	if json_element.kind = JSON::Object then
        this.jsonObject := JSON::get_object(json_element);
        generate Reception.ready_for_event() to this;
    else
        logMessage := "AEReception::Reception.parsing : Incorrect JSON format : " & auditEvent;
        Logger::log(Logger::Error, "AEReception", logMessage);
		eventContent := "FailureReason = Incorrect JSON format = " & auditEvent;;
		Reporting~>reportEvent(Logger::Error, "reception_file_process_error", eventContent);
        generate Reception.parse_failed() to this;
    end if;

exception

    when JSON::JSONException =>
	   logMessage := "AEReception::Reception.parsing : Failed to parse JSON : " & auditEvent;
	   Logger::log(Logger::Error, "AEReception", logMessage);
		eventContent := "FailureReason = Failed to parse JSON = " & auditEvent;;
		Reporting~>reportEvent(Logger::Error, "reception_file_process_error", eventContent);
	   generate Reception.parse_failed() to this;
	   
	when others =>
	   logMessage := "AEReception::Reception.parsing : Could not process audit events : " & auditEvent;
	   Logger::log(Logger::Error, "AEReception", logMessage);
	   generate Reception.parse_failed() to this;

end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'bb579c50-132b-494e-8018-81a7b4ca3778' 'cc64b9b1-baf2-4721-863b-afbb21126496' DO NOT EDIT THIS LINE.
state AEReception::Reception.ReceptionDeleted () is
begin
	
	// remove the reception
	delete this;
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

