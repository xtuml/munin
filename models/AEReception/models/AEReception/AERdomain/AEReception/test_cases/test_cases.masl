//! ACTIVITY BEGIN. 'd507866f-4579-4744-a871-2284db088ea1' DO NOT EDIT THIS LINE.
private service AEReception::basicTest01 () is
auditEvents : string;
testFile: readonly Filesystem::filename := "./testing/basicTest01.json";
logMessage : string;
receptionSpec : instance of ReceptionSpec;
orderingAcceptEvents : sequence of instance of _TEST_Ordering_AcceptEvent;
orderingAcceptEvent : instance of _TEST_Ordering_AcceptEvent;
json_element: JSON::JSONElement;

begin

  // clear the domain down
  receptionSpec := find_one ReceptionSpec();
  AEReception::clearDomain();
  
  // Open the file and read in the events
  auditEvents := Filesystem::read_file(testFile);
  
  json_element := JSON::parse(auditEvents);
  if json_element.kind = JSON::Array then
     for elementReceived in JSON::get_array(json_element) loop
       if elementReceived.kind = JSON::Object then
         AEReception::AcceptEvents(JSON::dump(elementReceived));  
       end if;
     end loop;
  end if;
  
  // invoke the accept events service
  AEReception::AcceptEvents(auditEvents); 
  
  // service the event queues and scheduled timers up to 2s in the future
  Test::service_event_queue();
  
  // verify that there are 3 events
  orderingAcceptEvents := find _TEST_Ordering_AcceptEvent();
  Assertions::assertTrue(orderingAcceptEvents'length = 3, "Expected 3 events found " & orderingAcceptEvents'length'image);  
  
  // confirm that the first audit event has the correct parameter values
  orderingAcceptEvent := find_one orderingAcceptEvents(auditEventType = "TestEvent1");
  Assertions::assertTrue(orderingAcceptEvent /= null, "basicTest01: Failed to find TestEvent1");
  Assertions::assertEquals("8a783c30-3161-4cca-9ac1-37f6b50fe6e1", orderingAcceptEvent.jobId);
  Assertions::assertEquals("dea5b47b-438b-47b0-8046-585254327fd2", orderingAcceptEvent.auditEventId);
  Assertions::assertTrue(orderingAcceptEvent.prevAuditEventIds'length = 0, "basicTest01: Failed as verification reported prevEventIds was invalid");
  Assertions::assertEquals("2021-05-13T10:07:34Z", orderingAcceptEvent.auditEventTime);
  Assertions::assertEquals("8f309f67-2949-4071-b8c2-fd599b42cb0d", orderingAcceptEvent.application);
  Assertions::assertEquals("NoNode", orderingAcceptEvent.nodeName);
 
  // confirm that the second audit event has the correct parameter values
  orderingAcceptEvent := find_one orderingAcceptEvents(auditEventType = "TestEvent2");
  Assertions::assertTrue(orderingAcceptEvent /= null, "basicTest01: Failed to find TestEvent2");
  Assertions::assertEquals("8a783c30-3161-4cca-9ac1-37f6b50fe6e1", orderingAcceptEvent.jobId);
  Assertions::assertEquals("735cc6c2-05e1-437f-a3e8-3b2cc36803a4", orderingAcceptEvent.auditEventId);
  Assertions::assertTrue(orderingAcceptEvent.prevAuditEventIds'length > 0, "basicTest01: Failed as verification reported prevEventIds was invalid");
  Assertions::assertEquals("2021-05-13T10:07:35Z", orderingAcceptEvent.auditEventTime);
  Assertions::assertEquals("8f309f67-2949-4071-b8c2-fd599b42cb0d", orderingAcceptEvent.application);
  Assertions::assertEquals("NoNode", orderingAcceptEvent.nodeName);
 
  // confirm that the third audit event has the correct parameter values
  orderingAcceptEvent := find_one orderingAcceptEvents(auditEventType = "TestEvent3");
  Assertions::assertTrue(orderingAcceptEvent /= null, "basicTest01: Failed to find TestEvent3");
  Assertions::assertEquals("8a783c30-3161-4cca-9ac1-37f6b50fe6e1", orderingAcceptEvent.jobId);
  Assertions::assertEquals("daf4d86c-084b-49cc-acfb-f558eeef6e80", orderingAcceptEvent.auditEventId);
  Assertions::assertTrue(orderingAcceptEvent.prevAuditEventIds'length > 0, "basicTest01: Failed as verification reported prevEventIds was invalid");
  Assertions::assertEquals("2021-05-13T10:07:36Z", orderingAcceptEvent.auditEventTime);
  Assertions::assertEquals("8f309f67-2949-4071-b8c2-fd599b42cb0d", orderingAcceptEvent.application);
  Assertions::assertEquals("NoNode", orderingAcceptEvent.nodeName);

  Assertions::assertTrue((orderingAcceptEvent.prevAuditEventIds'get_unique intersection "dea5b47b-438b-47b0-8046-585254327fd2")'length = 1, "Missing previous audit event id: " & "dea5b47b-438b-47b0-8046-585254327fd2");
  Assertions::assertTrue((orderingAcceptEvent.prevAuditEventIds'get_unique intersection "735cc6c2-05e1-437f-a3e8-3b2cc36803a4")'length = 1, "Missing previous audit event id: " & "735cc6c2-05e1-437f-a3e8-3b2cc36803a4");


end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'd4d4c832-e7d5-41a4-ace3-c832a06fa75d' DO NOT EDIT THIS LINE.
private service AEReception::testConfigLoad () is
receptionSpec : instance of ReceptionSpec;
configFile : string := "test_config.json";

begin

	// clear the domain down
	AEReception::clearDomain();
	
	// the config file should have been loaded so we want to check that the spec class has been created corretcly
	receptionSpec := find_one ReceptionSpec ();
	Assertions::assertTrue(receptionSpec.receptionDeletionTime = @PT10M@, "invalid  receptionDeletionTime, expected 10M found " & receptionSpec.receptionDeletionTime'image);
	Assertions::assertTrue(receptionSpec.specUpdateRate = @PT2M@, "invalid specUpdateRate, expected 2M found " & receptionSpec.specUpdateRate'image);
	// fire the timer to check if the config class has not been as the config file has not changed
	Test::service_event_queue();
	Test::fire_scheduled_timers(timestamp'now + duration'minutes(2));
	Assertions::assertTrue(receptionSpec.receptionDeletionTime = @PT10M@, "invalid  receptionDeletionTime, expected 10M found " & receptionSpec.receptionDeletionTime'image);
	Assertions::assertTrue(receptionSpec.specUpdateRate = @PT2M@, "invalid specUpdateRate, expected 2M found " & receptionSpec.specUpdateRate'image);
	
	// put a new config file in place
	receptionSpec.configFile := configFile;
	Filesystem::touch_file(Filesystem::filename(receptionSpec.configFilePath & configFile));
	
	// fire the timer to check the config file
	Test::service_event_queue();
	Test::fire_scheduled_timers(timestamp'now + duration'minutes(2));
	
	// verify that the config file has been updated
	Assertions::assertTrue(receptionSpec.receptionDeletionTime = @PT20M@, "invalid  receptionDeletionTime, expected 20M found " & receptionSpec.receptionDeletionTime'image);
	Assertions::assertTrue(receptionSpec.specUpdateRate = @PT10M@, "invalid specUpdateRate, expected 10M found " & receptionSpec.specUpdateRate'image);

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'a9fd047c-7666-4134-8f37-09c1747e14b0' DO NOT EDIT THIS LINE.
private service AEReception::clearDomain () is
begin

	// delete all receptions
	for reception in find Reception() loop
		delete reception;
	end loop;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

