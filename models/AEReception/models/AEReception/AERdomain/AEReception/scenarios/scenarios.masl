//! ACTIVITY BEGIN. '34441031-02bb-4aca-bb64-18df20b7a725' DO NOT EDIT THIS LINE.
private service AEReception::init () is
configFilePath : string;
configFile: string;
logMessage : string;
receptionSpec : instance of ReceptionSpec;

begin

	// get the supplied command line option for the config file and verify it is valid
	configFilePath := CommandLine::get_option_value("-configPath", "config/");
	configFile := CommandLine::get_option_value("-configFile", "config.json");
	if Filesystem::file_exists(Filesystem::filename(configFilePath & configFile)) then
		receptionSpec := find_one ReceptionSpec();
		if receptionSpec = null then
			receptionSpec := create unique ReceptionSpec(configFilePath => configFilePath, configFile => configFile, specUpdateRate => @PT2M@, 
				                                   receptionDeletionTime => @PT10M@, 
				                                   Current_State => Created);
		end if;
		generate ReceptionSpec.loadConfig() to receptionSpec;
	else
		logMessage := "AEReception::init : failed to locate config file. Specified file = " & configFilePath & configFile;
		Logger::log(Logger::Information, "AEReception", logMessage);
		raise program_error;
	end if;

exception
	when others =>
	
		logMessage := "AEReception::init : failed during start up";
		Logger::log(Logger::Error, "AEReception", logMessage);
		raise program_error;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'b618c6b6-06c2-4e2c-9050-9133e025bde1' DO NOT EDIT THIS LINE.
private service AEReception::registerCommandLineArgs () is
begin

  // The domain needs to be started with the command line argument -config that specifies where to find the configuration file;
  begin
    CommandLine::register_value("-configPath", "The path to the configuration file for the service", CommandLine::Optional, "configPath", CommandLine::Required, CommandLine::Single);
  exception
    when program_error => null;  // Ignore error if option has been defined in another domain.
  end;
  begin
    CommandLine::register_value("-configFile", "The configuration file for the service", CommandLine::Optional, "configFile", CommandLine::Required, CommandLine::Single);
  exception
    when program_error => null;  // Ignore error if option has been defined in another domain.
  end;

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

