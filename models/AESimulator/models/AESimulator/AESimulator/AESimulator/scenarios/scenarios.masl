//! ACTIVITY BEGIN. '72df1002-232e-4515-8231-e5da5231c5bf' DO NOT EDIT THIS LINE.
private service AESimulator::registerCommanLineArgs () is
begin
  // The domain needs to be started with the command line argument -test-config
  // that specifies where to find the configuration file;
  CommandLine::register_value(
    "-test-config",
    "The test configuration file",
    CommandLine::Required,
    "test-config",
    CommandLine::Required,
    CommandLine::Single);
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '1e02e3af-a8f5-4c29-b7d2-09120da69fd6' DO NOT EDIT THIS LINE.
private service AESimulator::initialise () is
logMessage : string;
testSpec : instance of TestSpec;
configFileName : Filesystem::filename;
configJSONString : string;
configJSONElement : JSON::JSONElement;
configJSONObject : JSON::JSONObject;
testDefJSONObject : JSON::JSONObject;
testId : integer;
testName : string;
totalTests : integer;
testJobSpecJSONObject : JSON::JSONObject;
testJobSpecName : string;
jobSpecFileName : Filesystem::filename;
jobSpecJSONString : string;
jobSpecJSONElement : JSON::JSONElement;
jobSpecJSONObject : JSON::JSONObject;
eventDefinitionObject : JSON::JSONObject;
eventDataDefinitionObject : JSON::JSONObject;
eventDataName : string;
eventDataValue : string;
eventDataType : string;
testDefinition : instance of TestDefinition;
eventDefinition : instance of EventDefinition;
prevEventDefinition : instance of EventDefinition;
jobSpecName : string;
jobSpec : instance of JobSpec;
testJobSpec : instance of TestJobSpec;
eventDispatchOrder : instance of EventDispatchOrder;
eventDispatchIdList : sequence of string;
emptyEventDispatchIdList : sequence of string;
eventDefintions : sequence of instance of EventDefinition;
prevEventDispatchOrder : instance of EventDispatchOrder;
eventData : instance of EventData;
auditEventFile : instance of AuditEventFile;
configValidationResult : JSON::JSONObject;

begin
  
	logMessage := "AESimulator::initialise";
	Logger::log(Logger::Information, "AESimulator", logMessage);
  
	// check the config file has not been removed
	configFileName := Filesystem::filename(CommandLine::get_option_value("-test-config"));
	testSpec := create unique TestSpec();
  
	if Filesystem::file_exists(Filesystem::filename(configFileName)) then
	    // read the contents of the config file - t
	    configJSONString := Filesystem::read_file(configFileName);
	    configJSONElement := JSON::parse(configJSONString);
//	    configValidationResult := JSONValidation::validate(configJSONElement, #PROP["simulatorConfigSchema"]#);
//	    if JSON::get_boolean(configValidationResult["valid"]) then
	        // extract the spec data items
	        configJSONObject := JSON::get_object(configJSONElement);
	        if configJSONObject'contains("OneFilePerJob") then
	        	testSpec.oneFilePerJob := boolean'parse(JSON::get_string(configJSONObject["OneFilePerJob"]));
	        end if;
	        if configJSONObject'contains("MaxEventsPerFile") then
	        	testSpec.maxEventsPerFile := JSON::get_integer(configJSONObject["MaxEventsPerFile"]);
	        end if;
	        if configJSONObject'contains("FileTimoutPeriod") then
	        	testSpec.fileTimeOutPeriod := duration'parse(JSON::get_string(configJSONObject["FileTimoutPeriod"]));
	        end if;
	        if configJSONObject'contains("JobSpecificationLocation") then
	            testSpec.jobSpecificationLocation := JSON::get_string(configJSONObject["JobSpecificationLocation"]);
	        end if;
	        if configJSONObject'contains("TestFileLocation") then
	            testSpec.testFileLocation := JSON::get_string(configJSONObject["TestFileLocation"]);
	        end if;
	        if configJSONObject'contains("TestFileDestination") then
	            testSpec.testFileDestination := JSON::get_string(configJSONObject["TestFileDestination"]);
	        end if;
	        
	        // read in the test definitions
	        if configJSONObject'contains("Tests") and configJSONObject["Tests"].kind = JSON::Array then
	            for testDefinitionElement in JSON::get_array(configJSONObject["Tests"]) loop
	                testDefJSONObject := JSON::get_object(testDefinitionElement);
	            	testDefinition := create unique TestDefinition(testId => JSON::get_integer(testDefJSONObject["TestId"]), 
	            		                                           testName => JSON::get_string(testDefJSONObject["TestName"]),
	            		                                           totalTests => JSON::get_integer(testDefJSONObject["TotalTests"]),
	            		                                           testFrequency => duration'parse(JSON::get_string(testDefJSONObject["TestFrequency"])),
	            		                                           testCount => 0, Current_State => Created);
	                for testJobSpecElement in JSON::get_array(testDefJSONObject["TestJobSpec"]) loop
		                testJobSpecJSONObject := JSON::get_object(testJobSpecElement);
	                	testJobSpecName := JSON::get_string(testJobSpecJSONObject["TestJobSpecName"]);
	                	eventDispatchIdList := emptyEventDispatchIdList;
	                	eventDispatchIdList := Strings::tokenize(JSON::get_string(testJobSpecJSONObject["EventDispatchOrder"]), ',');
	                	// find the job specification and if it does not exist read it in
	                	jobSpec := find_one JobSpec(jobSpecName = testJobSpecName);
	                	if jobSpec = null then
		                    // load in the audit eventTypes
		                    jobSpecFileName := Filesystem::filename(testSpec.jobSpecificationLocation & "/" & testJobSpecName & ".json");
		                    if Filesystem::file_exists(jobSpecFileName) then
							    jobSpecJSONString := Filesystem::read_file(jobSpecFileName);
							    jobSpecJSONElement := JSON::parse(jobSpecJSONString);
						        jobSpecJSONObject := JSON::get_object(jobSpecJSONElement);
						        if jobSpecJSONObject'contains("JobSpecName") then
						        	jobSpec := create JobSpec(jobSpecName => JSON::get_string(jobSpecJSONObject["JobSpecName"]),
						        		                      jobName => JSON::get_string(jobSpecJSONObject["JobName"]));
					                for eventDefinitionElement in JSON::get_array(jobSpecJSONObject["EventDefinition"]) loop
						                eventDefinitionObject := JSON::get_object(eventDefinitionElement);				                	
					                	eventDefinition := create EventDefinition(eventDefinitionId => JSON::get_string(eventDefinitionObject["EventId"]), 
					                		                                      jobSpecName => jobSpec.jobSpecName, 
					                		                                      eventTypeName => JSON::get_string(eventDefinitionObject["EventName"]), 
					                		                                      nodeName=> JSON::get_string(eventDefinitionObject["NodeName"]), 
					                		                                      applicationName => JSON::get_string(eventDefinitionObject["ApplicationName"]), 
					                		                                      delayDuration => @PT0S@, 
					                		                                      prevId => "", 
					                		                                      sequenceStart => false);
						                if eventDefinitionObject'contains("EventData") then
							                for eventDataDefinitionElement in JSON::get_array(eventDefinitionObject["EventData"]) loop
								                eventDataDefinitionObject := JSON::get_object(eventDataDefinitionElement);
												eventDataName := "";
												if eventDataDefinitionObject'contains("EventDataType") then
													eventDataType := JSON::get_string(eventDataDefinitionObject["EventDataType"]);
												end if;
												if eventDataDefinitionObject'contains("DataName") then
													eventDataName := JSON::get_string(eventDataDefinitionObject["DataName"]);
												end if;
												eventDataValue := "";
												if eventDataDefinitionObject'contains("DataValue") then
													if eventDataName = "LOOPCOUNT" or eventDataName = "BRANCHCOUNT" then
														eventDataValue := JSON::get_integer(eventDataDefinitionObject["DataValue"])'image;
													else
														eventDataValue := JSON::get_string(eventDataDefinitionObject["DataValue"]);
													end if;
												end if;
												if eventDataName /= "" and eventDataType /= "" then
													eventData := create unique EventData(eventDataName => eventDataName, eventDataValue => eventDataValue, eventDataType => eventDataType);
													link eventData R16 eventDefinition;
												end if;
							                end loop;
							            end if;
										if eventDefinitionObject'contains("DispatchDelay") then
											eventDefinition.delayDuration := duration'parse(JSON::get_string(eventDefinitionObject["DispatchDelay"]));
										end if;
										if eventDefinitionObject'contains("PreviousEventId") then
											eventDefinition.prevId := JSON::get_string(eventDefinitionObject["PreviousEventId"]);
										end if;
										if eventDefinitionObject'contains("SequenceStart") then
											eventDefinition.sequenceStart := boolean'parse(JSON::get_string(eventDefinitionObject["SequenceStart"]));
										end if;
										link jobSpec R9 eventDefinition;
										prevEventDefinition := find_one (jobSpec -> R9.EventDefinition)(eventDefinitionId = eventDefinition.prevId);
										if prevEventDefinition /= null then
										  link eventDefinition R1.follows prevEventDefinition;
										else
										  link jobSpec R2 eventDefinition;
										end if;
									end loop;
						        else
								    logMessage := "AESimulator::initialise, job spec has no name. Specified file = " & string(testJobSpecName);
								    Logger::log(Logger::Error, "AESimulator", logMessage);
			                    	raise program_error;
						        end if;
		                    else
							    logMessage := "AESimulator::initialise, failed to locate job spec file. Specified file = " & string(testJobSpecName);
							    Logger::log(Logger::Error, "AESimulator", logMessage);
		                    	raise program_error;
		                    end if;
	                	end if;
						testJobSpec := testDefinition with jobSpec -> R8.TestJobSpec;
	                	if testJobSpec = null then
	                		testJobSpec := create TestJobSpec(testId => testDefinition.testId, jobSpecName => jobSpec.jobSpecName);
	                		link testDefinition R8 jobSpec using testJobSpec;
	                	end if;
	                    // create the event delivery order
	                    prevEventDispatchOrder := null;
						eventDefintions := jobSpec -> R9.EventDefinition;
						for eventDispatchId in eventDispatchIdList loop
						  	eventDefinition := find_one eventDefintions(eventDefinitionId = eventDispatchId and jobSpecName = testJobSpec.jobSpecName);;
						  	if eventDefinition /= null then
						  		eventDispatchOrder := eventDefinition with testDefinition -> R14.EventDispatchOrder;
						  		if eventDispatchOrder = null then
						  			eventDispatchOrder := create EventDispatchOrder(eventDefinitionId => eventDispatchId, 
						  				                                            jobSpecName => testJobSpec.jobSpecName,
						  				                                            testId => testDefinition.testId);
						  			link eventDefinition R14 testDefinition using eventDispatchOrder;
						  			if testJobSpec -> R12.EventDispatchOrder = null then
						  				link testJobSpec R12 eventDispatchOrder;
						  			end if;
						  			if prevEventDispatchOrder /= null then
						  				link eventDispatchOrder R13.previousEvent prevEventDispatchOrder;
						  			end if;
									prevEventDispatchOrder := eventDispatchOrder; 
						  		else
									logMessage := "AESimulator::initialise - invalid configuration duplicate event definition for EventDispatchOrder, eventDispacthId = " & eventDispatchId & "job spec name = " & jobSpecName;
									Logger::log(Logger::Error, "AESimulator", logMessage);
								end if;
							else
								logMessage := "AESimulator::initialise - invalid configuration failed to find event definition for EventDispatchOrder, eventDispacthId = " & eventDispatchId & "job spec name = " & jobSpecName;
								Logger::log(Logger::Error, "AESimulator", logMessage);
								raise program_error;
							end if;
						end loop;
	                end loop;
	            end loop;
	        end if;
	
//		else
//	       	Logger::log(Logger::Debug, "AEOrdering", "Config file invalid:\n" & JSON::dump(configValidationResult, true));
//	       	raise JSON::JSONException("Config file invalid");
//		end if;
    
		// now the config is loaded start the jobs
		if testSpec.oneFilePerJob = false then
			auditEventFile := create unique AuditEventFile(numberOfEvents => 0, isActive => true, fileId => UUID::generate_formatted(), Current_State => Created);
			schedule auditEventFile.fileTimer generate AuditEventFile.generateFile() to auditEventFile delay testSpec.fileTimeOutPeriod;
		end if;
		
		for testDefinition in find TestDefinition() loop
		  generate TestDefinition.startTest() to testDefinition;
		end loop;
    
	else
	    logMessage := "AESimulator::initialise, failed to locate config file. Specified file = " & string(configFileName);
	    Logger::log(Logger::Error, "AESimulator", logMessage);
	    raise program_error;
	end if;
  
exception
  when program_error =>
    logMessage := "AESimulator::initialise, failed to load configuration file";
    Logger::log(Logger::Error, "AESimulator", logMessage);
    raise program_error;
  when others =>   
    logMessage := "AESimulator::initialise, failed to load configuration file";
    Logger::log(Logger::Error, "AESimulator", logMessage);
    raise program_error;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

