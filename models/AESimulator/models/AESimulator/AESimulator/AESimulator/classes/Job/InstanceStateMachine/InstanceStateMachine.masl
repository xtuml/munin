//! ACTIVITY BEGIN. 'f989cd9b-5f45-4cea-9d9e-9def7e782712' 'b028a2a7-c1cb-4e8f-8003-80cf638320ab' DO NOT EDIT THIS LINE.
state AESimulator::Job.Created () is
begin
  null;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'f989cd9b-5f45-4cea-9d9e-9def7e782712' 'a3d120c0-3fe3-40bc-8a63-1a94003e1897' DO NOT EDIT THIS LINE.
state AESimulator::Job.JobStarted () is
logMessage : string;
eventDefinition : instance of EventDefinition;
deployedEvent : instance of DeployedEvent;
testSpec : instance of TestSpec;
auditEventFile : instance of AuditEventFile;
eventFileForJob : instance of EventFileForJob;
jobSpec : instance of JobSpec;
epochDate : timestamp;
epochEventTime : integer;
epochEventDispatchTime : integer;

begin
	
	logMessage := "AESimulator::Job.JobStarted";
	Logger::log(Logger::Information, "AESimulator", logMessage);
	
	testSpec := find_one TestSpec();
	if testSpec.oneFilePerJob = true then
		auditEventFile := create AuditEventFile(isActive => true, fileId => this.jobId, Current_State => Created);
	else
		auditEventFile := find_one AuditEventFile(isActive = true);
	end if;
	eventFileForJob := create EventFileForJob(auditEventFileId => auditEventFile.auditEventFileId, jobId => this.jobId);
	link this R17 auditEventFile using eventFileForJob;
	jobSpec := this -> R3.JobSpec;
	for eventDefinition in jobSpec -> R2.EventDefinition loop
		epochEventTime := (timestamp'now - epochDate)'seconds;
		epochEventDispatchTime := epochEventTime + eventDefinition.delayDuration'seconds;
		deployedEvent := create DeployedEvent(eventId => UUID::generate_formatted(), epochEventCreationTime => epochEventTime, epochEventDispatchTime => epochEventDispatchTime, deployed => false, Current_State => Created);
		link deployedEvent R5 eventDefinition;
		link this R6 deployedEvent;
		generate DeployedEvent.evaluateDispatch() to deployedEvent;
	end loop;
		
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'f989cd9b-5f45-4cea-9d9e-9def7e782712' '9fb52ec7-ee07-4a8a-88a1-914ba55f98fc' DO NOT EDIT THIS LINE.
state AESimulator::Job.JobFinished () is
logMessage : string;
testSpec : instance of TestSpec;
destinationFilename : string;
events  : sequence of instance of DeployedEvent;
auditEventFile : instance of AuditEventFile;
eventFileForJob : instance of EventFileForJob;
jobSpec : instance of JobSpec;
testDefinition : instance of TestDefinition;
testJobSpec : instance of TestJobSpec;

begin
	
	logMessage := "AESimulator::Job.JobFinished";
	Logger::log(Logger::Information, "AESimulator", logMessage);
	testSpec := find_one TestSpec();
	jobSpec := this -> R3.JobSpec;
	testDefinition := this -> R7.TestDefinition;
	testJobSpec := jobSpec with testDefinition -> R8.TestJobSpec;
	unlink testJobSpec R15;

	auditEventFile := find_one (this -> R17.AuditEventFile)(isActive = true);
	if testSpec.oneFilePerJob = true then
		generate AuditEventFile.generateFile() to auditEventFile;
	end if;
	
	eventFileForJob := this with auditEventFile -> R17.EventFileForJob; 
	unlink this R17 auditEventFile using eventFileForJob;
	delete eventFileForJob;
		
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'f989cd9b-5f45-4cea-9d9e-9def7e782712' '43716a91-22b7-4b3d-b6d2-58b6b1527f0b' DO NOT EDIT THIS LINE.
state AESimulator::Job.CreatingEvents () is
logMessage : string;
eventDefinitions : sequence of instance of EventDefinition;
createdEvents : sequence of instance of DeployedEvent;
jobSpec : instance of JobSpec;
testDefinition : instance of TestDefinition;
testJobSpec : instance of TestJobSpec;
eventToDispatch : instance of DeployedEvent;

begin
	
	eventDefinitions := this -> R3.JobSpec -> R9.EventDefinition;
	createdEvents := this -> R6.DeployedEvent;
	logMessage := "AESimulator::Job.DispatchingEvents - events to create = " & eventDefinitions'length'image & ", events created = " & createdEvents'length'image;
	Logger::log(Logger::Information, "AESimulator", logMessage);
	if  eventDefinitions'length = createdEvents'length then
		// locate the first event to dispatch and request that it is dispatched
		jobSpec := this -> R3.JobSpec;
		testDefinition := this -> R7.TestDefinition;
		testJobSpec := jobSpec with testDefinition -> R8.TestJobSpec;
		if testJobSpec /= null then
			generate Job.startEventDispatch() to this;
		else
			logMessage := "AESimulator::Job.DispatchingEvents - job failed test name = " & testDefinition.testName & ", job spec name = " & jobSpec.jobSpecName;
			Logger::log(Logger::Error, "AESimulator", logMessage);
		end if; 
	end if;
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'f989cd9b-5f45-4cea-9d9e-9def7e782712' 'f03e5b8f-adfa-4a00-9755-a9a7b954b53a' DO NOT EDIT THIS LINE.
state AESimulator::Job.DispatchingEvents () is
logMessage : string;
undeployedEvents : sequence of instance of DeployedEvent;
deployedEvents : sequence of instance of DeployedEvent;

begin
	
	// evaluate if all events have been dispatched
	undeployedEvents := this -> R6.DeployedEvent();
	deployedEvents := this -> R10.DeployedEvent();
	logMessage := "AESimulator::Job.DispatchingEvents - events to deploy = " & undeployedEvents'length'image & ", events deployed = " & deployedEvents'length'image;
	Logger::log(Logger::Information, "AESimulator", logMessage);
	if undeployedEvents'length /= deployedEvents'length then
		// select the next event to dispatch
		this.selectEventToDispatch();
	else
		// complete the job
		generate Job.jobComplete() to this;
	end if;
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

