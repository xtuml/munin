domain,AESimulator,AESimulator,,,,,,
object,AuditEventFile,,,,,,,
object,,,,,,,,
object,DeployedEvent,,,,,,,
object,,,,,,,,
object,EventData,,,,,,,
object,,,,,,,,
object,EventDefinition,,,,,,,
object,,,,,,,,
object,EventDispatchOrder,,,,,,,
object,,,,,,,,
object,EventFileForJob,,,,,,,
object,,,,,,,,
object,Job,,,,,,,
object,,,,,,,,
object,JobSpec,,,,,,,
object,,,,,,,,
object,TestDefinition,,,,,,,
object,,,,,,,,
object,TestJobSpec,,,,,,,
object,,,,,,,,
object,TestSpec,,,,,,,
object,,,,,,,,
routine,AESimulator,,private,registerCommanLineArgs,0,,,
codeblock,begin%0A  // The domain needs to be started with the command line argument -test-config%0A  // that specifies where to find the configuration file;%0A  CommandLine::register_value(%0A    "-test-config"%2C%0A    "The test configuration file"%2C%0A    CommandLine::Required%2C%0A    "test-config"%2C%0A    CommandLine::Required%2C%0A    CommandLine::Single);%0Aend service;,,,,,,,
codeblock,,,,,,,,
pragma,startup,,,,,,,
pragmaitem,true,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
routine,,,,,,,,
routine,AESimulator,,private,initialise,0,,,
codeblock,logMessage : string;%0AtestSpec : instance of TestSpec;%0AconfigFileName : Filesystem::filename;%0AconfigJSONString : string;%0AconfigJSONElement : JSON::JSONElement;%0AconfigJSONObject : JSON::JSONObject;%0AtestDefJSONObject : JSON::JSONObject;%0AtestId : integer;%0AtestName : string;%0AtotalTests : integer;%0AtestJobSpecJSONObject : JSON::JSONObject;%0AtestJobSpecName : string;%0AjobSpecFileName : Filesystem::filename;%0AjobSpecJSONString : string;%0AjobSpecJSONElement : JSON::JSONElement;%0AjobSpecJSONObject : JSON::JSONObject;%0AeventDefinitionObject : JSON::JSONObject;%0AeventDataDefinitionObject : JSON::JSONObject;%0AeventDataName : string;%0AeventDataValue : string;%0AeventDataType : string;%0AtestDefinition : instance of TestDefinition;%0AeventDefinition : instance of EventDefinition;%0AprevEventDefinition : instance of EventDefinition;%0AjobSpecName : string;%0AjobSpec : instance of JobSpec;%0AtestJobSpec : instance of TestJobSpec;%0AeventDispatchOrder : instance of EventDispatchOrder;%0AeventDispatchIdList : sequence of string;%0AemptyEventDispatchIdList : sequence of string;%0AeventDefintions : sequence of instance of EventDefinition;%0AprevEventDispatchOrder : instance of EventDispatchOrder;%0AeventData : instance of EventData;%0AauditEventFile : instance of AuditEventFile;%0AconfigValidationResult : JSON::JSONObject;%0A%0Abegin%0A  %0A	logMessage := "AESimulator::initialise";%0A	Logger::log(Logger::Information%2C "AESimulator"%2C logMessage);%0A  %0A	// check the config file has not been removed%0A	configFileName := Filesystem::filename(CommandLine::get_option_value("-test-config"));%0A	testSpec := create unique TestSpec();%0A  %0A	if Filesystem::file_exists(Filesystem::filename(configFileName)) then%0A	    // read the contents of the config file - t%0A	    configJSONString := Filesystem::read_file(configFileName);%0A	    configJSONElement := JSON::parse(configJSONString);%0A//	    configValidationResult := JSONValidation::validate(configJSONElement%2C #PROP["simulatorConfigSchema"]#);%0A//	    if JSON::get_boolean(configValidationResult["valid"]) then%0A	        // extract the spec data items%0A	        configJSONObject := JSON::get_object(configJSONElement);%0A	        if configJSONObject'contains("OneFilePerJob") then%0A	        	testSpec.oneFilePerJob := boolean'parse(JSON::get_string(configJSONObject["OneFilePerJob"]));%0A	        end if;%0A	        if configJSONObject'contains("MaxEventsPerFile") then%0A	        	testSpec.maxEventsPerFile := JSON::get_integer(configJSONObject["MaxEventsPerFile"]);%0A	        end if;%0A	        if configJSONObject'contains("FileTimoutPeriod") then%0A	        	testSpec.fileTimeOutPeriod := duration'parse(JSON::get_string(configJSONObject["FileTimoutPeriod"]));%0A	        end if;%0A	        if configJSONObject'contains("JobSpecificationLocation") then%0A	            testSpec.jobSpecificationLocation := JSON::get_string(configJSONObject["JobSpecificationLocation"]);%0A	        end if;%0A	        if configJSONObject'contains("TestFileLocation") then%0A	            testSpec.testFileLocation := JSON::get_string(configJSONObject["TestFileLocation"]);%0A	        end if;%0A	        if configJSONObject'contains("TestFileDestination") then%0A	            testSpec.testFileDestination := JSON::get_string(configJSONObject["TestFileDestination"]);%0A	        end if;%0A	        %0A	        // read in the test definitions%0A	        if configJSONObject'contains("Tests") and configJSONObject["Tests"].kind = JSON::Array then%0A	            for testDefinitionElement in JSON::get_array(configJSONObject["Tests"]) loop%0A	                testDefJSONObject := JSON::get_object(testDefinitionElement);%0A	            	testDefinition := create unique TestDefinition(testId => JSON::get_integer(testDefJSONObject["TestId"])%2C %0A	            		                                           testName => JSON::get_string(testDefJSONObject["TestName"])%2C%0A	            		                                           totalTests => JSON::get_integer(testDefJSONObject["TotalTests"])%2C%0A	            		                                           testFrequency => duration'parse(JSON::get_string(testDefJSONObject["TestFrequency"]))%2C%0A	            		                                           testCount => 0%2C Current_State => Created);%0A	                for testJobSpecElement in JSON::get_array(testDefJSONObject["TestJobSpec"]) loop%0A		                testJobSpecJSONObject := JSON::get_object(testJobSpecElement);%0A	                	testJobSpecName := JSON::get_string(testJobSpecJSONObject["TestJobSpecName"]);%0A	                	eventDispatchIdList := emptyEventDispatchIdList;%0A	                	eventDispatchIdList := Strings::tokenize(JSON::get_string(testJobSpecJSONObject["EventDispatchOrder"])%2C '%2C');%0A	                	// find the job specification and if it does not exist read it in%0A	                	jobSpec := find_one JobSpec(jobSpecName = testJobSpecName);%0A	                	if jobSpec = null then%0A		                    // load in the audit eventTypes%0A		                    jobSpecFileName := Filesystem::filename(testSpec.jobSpecificationLocation & "/" & testJobSpecName & ".json");%0A		                    if Filesystem::file_exists(jobSpecFileName) then%0A							    jobSpecJSONString := Filesystem::read_file(jobSpecFileName);%0A							    jobSpecJSONElement := JSON::parse(jobSpecJSONString);%0A						        jobSpecJSONObject := JSON::get_object(jobSpecJSONElement);%0A						        if jobSpecJSONObject'contains("JobSpecName") then%0A						        	jobSpec := create JobSpec(jobSpecName => JSON::get_string(jobSpecJSONObject["JobSpecName"])%2C%0A						        		                      jobName => JSON::get_string(jobSpecJSONObject["JobName"]));%0A					                for eventDefinitionElement in JSON::get_array(jobSpecJSONObject["EventDefinition"]) loop%0A						                eventDefinitionObject := JSON::get_object(eventDefinitionElement);				                	%0A					                	eventDefinition := create EventDefinition(eventDefinitionId => JSON::get_string(eventDefinitionObject["EventId"])%2C %0A					                		                                      jobSpecName => jobSpec.jobSpecName%2C %0A					                		                                      eventTypeName => JSON::get_string(eventDefinitionObject["EventName"])%2C %0A					                		                                      nodeName=> JSON::get_string(eventDefinitionObject["NodeName"])%2C %0A					                		                                      applicationName => JSON::get_string(eventDefinitionObject["ApplicationName"])%2C %0A					                		                                      delayDuration => @PT0S@%2C %0A					                		                                      prevId => ""%2C %0A					                		                                      sequenceStart => false);%0A						                if eventDefinitionObject'contains("EventData") then%0A							                for eventDataDefinitionElement in JSON::get_array(eventDefinitionObject["EventData"]) loop%0A								                eventDataDefinitionObject := JSON::get_object(eventDataDefinitionElement);%0A												eventDataName := "";%0A												if eventDataDefinitionObject'contains("EventDataType") then%0A													eventDataType := JSON::get_string(eventDataDefinitionObject["EventDataType"]);%0A												end if;%0A												if eventDataDefinitionObject'contains("DataName") then%0A													eventDataName := JSON::get_string(eventDataDefinitionObject["DataName"]);%0A												end if;%0A												eventDataValue := "";%0A												if eventDataDefinitionObject'contains("DataValue") then%0A													if eventDataName = "LOOPCOUNT" or eventDataName = "BRANCHCOUNT" then%0A														eventDataValue := JSON::get_integer(eventDataDefinitionObject["DataValue"])'image;%0A													else%0A														eventDataValue := JSON::get_string(eventDataDefinitionObject["DataValue"]);%0A													end if;%0A												end if;%0A												if eventDataName /= "" and eventDataType /= "" then%0A													eventData := create unique EventData(eventDataName => eventDataName%2C eventDataValue => eventDataValue%2C eventDataType => eventDataType);%0A													link eventData R16 eventDefinition;%0A												end if;%0A							                end loop;%0A							            end if;%0A										if eventDefinitionObject'contains("DispatchDelay") then%0A											eventDefinition.delayDuration := duration'parse(JSON::get_string(eventDefinitionObject["DispatchDelay"]));%0A										end if;%0A										if eventDefinitionObject'contains("PreviousEventId") then%0A											eventDefinition.prevId := JSON::get_string(eventDefinitionObject["PreviousEventId"]);%0A										end if;%0A										if eventDefinitionObject'contains("SequenceStart") then%0A											eventDefinition.sequenceStart := boolean'parse(JSON::get_string(eventDefinitionObject["SequenceStart"]));%0A										end if;%0A										link jobSpec R9 eventDefinition;%0A										prevEventDefinition := find_one (jobSpec -> R9.EventDefinition)(eventDefinitionId = eventDefinition.prevId);%0A										if prevEventDefinition /= null then%0A										  link eventDefinition R1.follows prevEventDefinition;%0A										else%0A										  link jobSpec R2 eventDefinition;%0A										end if;%0A									end loop;%0A						        else%0A								    logMessage := "AESimulator::initialise%2C job spec has no name. Specified file = " & string(testJobSpecName);%0A								    Logger::log(Logger::Error%2C "AESimulator"%2C logMessage);%0A			                    	raise program_error;%0A						        end if;%0A		                    else%0A							    logMessage := "AESimulator::initialise%2C failed to locate job spec file. Specified file = " & string(testJobSpecName);%0A							    Logger::log(Logger::Error%2C "AESimulator"%2C logMessage);%0A		                    	raise program_error;%0A		                    end if;%0A	                	end if;%0A						testJobSpec := testDefinition with jobSpec -> R8.TestJobSpec;%0A	                	if testJobSpec = null then%0A	                		testJobSpec := create TestJobSpec(testId => testDefinition.testId%2C jobSpecName => jobSpec.jobSpecName);%0A	                		link testDefinition R8 jobSpec using testJobSpec;%0A	                	end if;%0A	                    // create the event delivery order%0A	                    prevEventDispatchOrder := null;%0A						eventDefintions := jobSpec -> R9.EventDefinition;%0A						for eventDispatchId in eventDispatchIdList loop%0A						  	eventDefinition := find_one eventDefintions(eventDefinitionId = eventDispatchId and jobSpecName = testJobSpec.jobSpecName);;%0A						  	if eventDefinition /= null then%0A						  		eventDispatchOrder := eventDefinition with testDefinition -> R14.EventDispatchOrder;%0A						  		if eventDispatchOrder = null then%0A						  			eventDispatchOrder := create EventDispatchOrder(eventDefinitionId => eventDispatchId%2C %0A						  				                                            jobSpecName => testJobSpec.jobSpecName%2C%0A						  				                                            testId => testDefinition.testId);%0A						  			link eventDefinition R14 testDefinition using eventDispatchOrder;%0A						  			if testJobSpec -> R12.EventDispatchOrder = null then%0A						  				link testJobSpec R12 eventDispatchOrder;%0A						  			end if;%0A						  			if prevEventDispatchOrder /= null then%0A						  				link eventDispatchOrder R13.previousEvent prevEventDispatchOrder;%0A						  			end if;%0A									prevEventDispatchOrder := eventDispatchOrder; %0A						  		else%0A									logMessage := "AESimulator::initialise - invalid configuration duplicate event definition for EventDispatchOrder%2C eventDispacthId = " & eventDispatchId & "job spec name = " & jobSpecName;%0A									Logger::log(Logger::Error%2C "AESimulator"%2C logMessage);%0A								end if;%0A							else%0A								logMessage := "AESimulator::initialise - invalid configuration failed to find event definition for EventDispatchOrder%2C eventDispacthId = " & eventDispatchId & "job spec name = " & jobSpecName;%0A								Logger::log(Logger::Error%2C "AESimulator"%2C logMessage);%0A								raise program_error;%0A							end if;%0A						end loop;%0A	                end loop;%0A	            end loop;%0A	        end if;%0A	%0A//		else%0A//	       	Logger::log(Logger::Debug%2C "AEOrdering"%2C "Config file invalid:\n" & JSON::dump(configValidationResult%2C true));%0A//	       	raise JSON::JSONException("Config file invalid");%0A//		end if;%0A    %0A		// now the config is loaded start the jobs%0A		if testSpec.oneFilePerJob = false then%0A			auditEventFile := create unique AuditEventFile(numberOfEvents => 0%2C isActive => true%2C fileId => UUID::generate_formatted()%2C Current_State => Created);%0A			schedule auditEventFile.fileTimer generate AuditEventFile.generateFile() to auditEventFile delay testSpec.fileTimeOutPeriod;%0A		end if;%0A		%0A		for testDefinition in find TestDefinition() loop%0A		  generate TestDefinition.startTest() to testDefinition;%0A		end loop;%0A    %0A	else%0A	    logMessage := "AESimulator::initialise%2C failed to locate config file. Specified file = " & string(configFileName);%0A	    Logger::log(Logger::Error%2C "AESimulator"%2C logMessage);%0A	    raise program_error;%0A	end if;%0A  %0Aexception%0A  when program_error =>%0A    logMessage := "AESimulator::initialise%2C failed to load configuration file";%0A    Logger::log(Logger::Error%2C "AESimulator"%2C logMessage);%0A    raise program_error;%0A  when others =>   %0A    logMessage := "AESimulator::initialise%2C failed to load configuration file";%0A    Logger::log(Logger::Error%2C "AESimulator"%2C logMessage);%0A    raise program_error;%0Aend service;,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,1,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
routine,,,,,,,,
regularrel,R1,,,,,,,
participation,AESimulator,EventDefinition,isFollowedBy,conditionally,many,AESimulator,EventDefinition,
participation,AESimulator,EventDefinition,follows,unconditionally,one,AESimulator,EventDefinition,
participation,,,,,,,,
regularrel,,,,,,,,
regularrel,R2,,,,,,,
participation,AESimulator,JobSpec,isFirst,unconditionally,many,AESimulator,EventDefinition,
participation,AESimulator,EventDefinition,isFirstFor,unconditionally,one,AESimulator,JobSpec,
participation,,,,,,,,
regularrel,,,,,,,,
regularrel,R3,,,,,,,
participation,AESimulator,JobSpec,wasUsedFor,unconditionally,many,AESimulator,Job,
participation,AESimulator,Job,exectuted,unconditionally,one,AESimulator,JobSpec,
participation,,,,,,,,
regularrel,,,,,,,,
regularrel,R5,,,,,,,
participation,AESimulator,EventDefinition,defines,conditionally,many,AESimulator,DeployedEvent,
participation,AESimulator,DeployedEvent,isDefinedBy,unconditionally,one,AESimulator,EventDefinition,
participation,,,,,,,,
regularrel,,,,,,,,
regularrel,R6,,,,,,,
participation,AESimulator,Job,hasScheduled,conditionally,many,AESimulator,DeployedEvent,
participation,AESimulator,DeployedEvent,wasScheduledFor,unconditionally,one,AESimulator,Job,
participation,,,,,,,,
regularrel,,,,,,,,
regularrel,R7,,,,,,,
participation,AESimulator,TestDefinition,hasExecuted,unconditionally,many,AESimulator,Job,
participation,AESimulator,Job,wasEexecutedBy,unconditionally,one,AESimulator,TestDefinition,
participation,,,,,,,,
regularrel,,,,,,,,
associative,R8,AESimulator,TestJobSpec,,,,,
participation,AESimulator,TestDefinition,shallRun,unconditionally,many,AESimulator,JobSpec,
participation,AESimulator,JobSpec,isRunBy,unconditionally,many,AESimulator,TestDefinition,
participation,,,,,,,,
associative,R8,AESimulator,TestJobSpec,,,,,
associative,,,,,,,,
regularrel,R9,,,,,,,
participation,AESimulator,JobSpec,contains,unconditionally,many,AESimulator,EventDefinition,
participation,AESimulator,EventDefinition,isPartOf,unconditionally,one,AESimulator,JobSpec,
participation,,,,,,,,
regularrel,,,,,,,,
regularrel,R10,,,,,,,
participation,AESimulator,Job,hasReported,conditionally,many,AESimulator,DeployedEvent,
participation,AESimulator,DeployedEvent,WasReportedFor,conditionally,one,AESimulator,Job,
participation,,,,,,,,
regularrel,,,,,,,,
regularrel,R12,,,,,,,
participation,AESimulator,TestJobSpec,isFirst,unconditionally,one,AESimulator,EventDispatchOrder,
participation,AESimulator,EventDispatchOrder,firstFor,unconditionally,one,AESimulator,TestJobSpec,
participation,,,,,,,,
regularrel,,,,,,,,
regularrel,R13,,,,,,,
participation,AESimulator,EventDispatchOrder,previousEvent,conditionally,one,AESimulator,EventDispatchOrder,
participation,AESimulator,EventDispatchOrder,nextEvent,conditionally,one,AESimulator,EventDispatchOrder,
participation,,,,,,,,
regularrel,,,,,,,,
associative,R14,AESimulator,EventDispatchOrder,,,,,
participation,AESimulator,TestDefinition,dispatches,unconditionally,many,AESimulator,EventDefinition,
participation,AESimulator,EventDefinition,areDispatchedFor,unconditionally,many,AESimulator,TestDefinition,
participation,,,,,,,,
associative,R14,AESimulator,EventDispatchOrder,,,,,
associative,,,,,,,,
regularrel,R15,,,,,,,
participation,AESimulator,TestJobSpec,isCurrent,conditionally,one,AESimulator,EventDispatchOrder,
participation,AESimulator,EventDispatchOrder,currentFor,conditionally,one,AESimulator,TestJobSpec,
participation,,,,,,,,
regularrel,,,,,,,,
regularrel,R16,,,,,,,
participation,AESimulator,EventDefinition,canCarry,conditionally,many,AESimulator,EventData,
participation,AESimulator,EventData,isCarriedIn,unconditionally,one,AESimulator,EventDefinition,
participation,,,,,,,,
regularrel,,,,,,,,
associative,R17,AESimulator,EventFileForJob,,,,,
participation,AESimulator,AuditEventFile,containsEventsFor,unconditionally,many,AESimulator,Job,
participation,AESimulator,Job,reportsEventTo,unconditionally,many,AESimulator,AuditEventFile,
participation,,,,,,,,
associative,R17,AESimulator,EventFileForJob,,,,,
associative,,,,,,,,
object,AuditEventFile,AuditEventFile,10,,,,,
attribute,auditEventFileId,preferred,unique,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,auditEvents,,,auditEventFileId,,,,
typeref,JSON::JSONArray,,,,,,,
typeref,,,,,,,,
description,The audit events that need to be written to the audit event file.,,,,,,,
attribute,,,,,,,,
attribute,numberOfEvents,,,auditEvents,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description,The current number of events that have been written to the file. Only used when one file per job is false.,,,,,,,
attribute,,,,,,,,
attribute,fileTimer,,,numberOfEvents,,,,
typeref,timer,,,,,,,
typeref,,,,,,,,
description,A timer used to write events to the audit event file when expired. Only used when one file per job is false.,,,,,,,
attribute,,,,,,,,
attribute,isActive,,,fileTimer,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
description,If set to true indictes that this is the active audit event file. Only used when one file per job is false and if in use there should only ever be one active audit event file.,,,,,,,
attribute,,,,,,,,
attribute,fileId,,,isActive,,,,
typeref,UUID::formatted_uuid,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,AuditEventFile,Created,,1,,,
codeblock,begin%0A	null;%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,AuditEventFile,FileGenerated,,2,,,
codeblock,logMessage : string;%0AtestSpec : instance of TestSpec;%0AdestinationFilename : string;%0AeventFileForJob : instance of EventFileForJob;%0AauditEventFile : instance of AuditEventFile;%0A%0Abegin%0A%0A	logMessage := "AESimulator::AuditEventFile.FileGenerated";%0A	Logger::log(Logger::Information%2C "AESimulator"%2C logMessage);%0A	testSpec := find_one TestSpec();%0A	cancel this.fileTimer;%0A	// write the file%0A	if this.numberOfEvents > 0 then%0A		destinationFilename := testSpec.testFileDestination & "/" & string(this.fileId);%0A		Filesystem::write_file(Filesystem::filename(destinationFilename)%2C JSON::dump(this.auditEvents));%0A	end if;%0A	%0A	// create the new audit event file and delete the old one%0A	if testSpec.oneFilePerJob = false and this.isActive = true then%0A		this.isActive := false;%0A		auditEventFile := create unique AuditEventFile(numberOfEvents => 0%2C isActive => true%2C fileId => UUID::generate_formatted()%2C Current_State => Created);%0A		schedule auditEventFile.fileTimer generate AuditEventFile.generateFile() to auditEventFile delay testSpec.fileTimeOutPeriod;%0A	end if;%0A	for job in this -> R17.Job loop%0A		eventFileForJob := job with this -> R17.EventFileForJob;%0A		unlink this R17 job using eventFileForJob;%0A		delete eventFileForJob;%0A		if testSpec.oneFilePerJob = false then%0A			eventFileForJob := create EventFileForJob(auditEventFileId => auditEventFile.auditEventFileId%2C jobId => job.jobId);%0A			link job R17 auditEventFile using eventFileForJob;%0A		end if;%0A	end loop;%0A%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,generateFile,,1,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,generateFile,Cannot_Happen,,,
transition,,,,,,,,
transition,Created,,,generateFile,FileGenerated,,,
transition,,,,,,,,
transition,FileGenerated,,,generateFile,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
object,,,,,,,,
object,DeployedEvent,DeployedEvent,2,,,,,
attribute,eventId,preferred,,,,,,
typeref,UUID::formatted_uuid,,,,,,,
typeref,,,,,,,,
description,A UUID that is used to uniquely identify the event.,,,,,,,
attribute,,,,,,,,
attribute,epochEventCreationTime,,,eventId,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description,The time that the event was generated,,,,,,,
attribute,,,,,,,,
attribute,eventDefinitionId,,,epochEventCreationTime,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
referential,R5,,isDefinedBy,EventDefinition,eventDefinitionId,,,
referential,,,,,,,,
description,The definition that this event was derived from,,,,,,,
attribute,,,,,,,,
attribute,prevEventId,,,eventDefinitionId,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
description,The UUID that is the previous event identifier to this event.,,,,,,,
attribute,,,,,,,,
attribute,jobSpecName,,,prevEventId,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
referential,R5,,isDefinedBy,EventDefinition,jobSpecName,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,dispatchTimer,,,jobSpecName,,,,
typeref,timer,,,,,,,
typeref,,,,,,,,
description,A timer used to control when the event is dispathed. Not currently used as all events are written to file.,,,,,,,
attribute,,,,,,,,
attribute,jobId,,,dispatchTimer,,,,
typeref,UUID::formatted_uuid,,,,,,,
typeref,,,,,,,,
referential,R6,,wasScheduledFor,Job,jobId,,,
referential,,,,,,,,
referential,R10,,WasReportedFor,Job,jobId,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,deployed,,,jobId,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
description,A flag that indicates the event has been deployed.,,,,,,,
attribute,,,,,,,,
attribute,epochEventDispatchTime,,,deployed,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,eventTime,,,epochEventDispatchTime,,,,
typeref,timestamp,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,DeployedEvent,Created,,1,,,
codeblock,begin%0A  null;%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,DeployedEvent,Dispatched,,2,,,
codeblock,logMessage : string;%0Ajob : instance of Job;%0AeventDefinition : instance of EventDefinition;%0AtestSpec : instance of TestSpec;%0Aaudit_event: JSON::JSONObject;%0AauditEventData: JSON::JSONObject;%0AauditEventFile : instance of AuditEventFile;%0AnewAuditEventFile : instance of AuditEventFile;%0AeventFileForJob : instance of EventFileForJob;%0AepochDate : timestamp;%0A%0Abegin%0A	%0A	logMessage := "AESimulator::DeployedEvent.Dispatched";%0A	Logger::log(Logger::Information%2C "AESimulator"%2C logMessage);%0A	%0A	job := this -> R6.Job;%0A	eventDefinition := this -> R5.EventDefinition;%0A	testSpec := find_one TestSpec();%0A	this.deployed := true;%0A	auditEventFile := find_one (job -> R17.AuditEventFile)(isActive = true);%0A	if auditEventFile /= null then			%0A		auditEventFile.auditEvents := auditEventFile.auditEvents & JSON::to_json(eventDefinition.nodeName);%0A		audit_event["timestamp"] := JSON::to_json(this.eventTime'image);%0A		audit_event["applicationName"] := JSON::to_json(eventDefinition.applicationName);%0A		audit_event["jobId"] := JSON::to_json(string(job.jobId));%0A		audit_event["jobName"] := JSON::to_json(string(job.jobSpecName));%0A		audit_event["eventType"] := JSON::to_json(eventDefinition.eventTypeName);%0A		audit_event["eventId"] := JSON::to_json(string(this.eventId));%0A		for eventData in eventDefinition -> R16.EventData loop%0A			auditEventData["dataItemType"] := JSON::to_json(eventData.eventDataName);%0A			if eventData.eventDataName = "LOOPCOUNT" or eventData.eventDataName = "BRANCHCOUNT" then%0A				auditEventData["value"] := JSON::to_json(integer'parse(eventData.eventDataValue));%0A			else%0A				auditEventData["value"] := JSON::to_json(eventData.eventDataValue);%0A			end if;%0A			audit_event[eventData.eventDataType] := JSON::to_json(auditEventData);%0A		end loop;%0A		if this.prevEventId /= "" and eventDefinition.sequenceStart = false then%0A		  audit_event["previousEventIds"] := JSON::to_json(this.prevEventId);%0A		end if;%0A		auditEventFile.auditEvents := auditEventFile.auditEvents & JSON::to_json(audit_event);%0A		auditEventFile.numberOfEvents := auditEventFile.numberOfEvents + 1;%0A		if testSpec.oneFilePerJob = false and auditEventFile.numberOfEvents >= testSpec.maxEventsPerFile then%0A			generate AuditEventFile.generateFile() to auditEventFile;%0A			// make this audit file inactive and create a new audit file%0A			auditEventFile.isActive := false;%0A			newAuditEventFile := create unique AuditEventFile(numberOfEvents => 0%2C isActive => true%2C fileId => UUID::generate_formatted()%2C Current_State => Created);%0A			schedule newAuditEventFile.fileTimer generate AuditEventFile.generateFile() to newAuditEventFile delay testSpec.fileTimeOutPeriod;%0A			for job in auditEventFile -> R17.Job loop%0A				eventFileForJob := job with auditEventFile -> R17.EventFileForJob;%0A				unlink auditEventFile R17 job using eventFileForJob;%0A				delete eventFileForJob;%0A				if testSpec.oneFilePerJob = false then%0A					eventFileForJob := create EventFileForJob(auditEventFileId => newAuditEventFile.auditEventFileId%2C jobId => job.jobId);%0A					link job R17 newAuditEventFile using eventFileForJob;%0A				end if;%0A			end loop;%0A		end if;%0A	else%0A		logMessage := "AESimulator::DeployedEvent.Dispatched - Failed to find active Audit Event File";%0A		Logger::log(Logger::Information%2C "AESimulator"%2C logMessage);%0A	end if;%0A	link this R10 job;%0A	generate Job.eventDispatched() to job;%0A	%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,DeployedEvent,DispatchScheduled,,3,,,
codeblock,logMessage : string;%0Ajob : instance of Job;%0AeventDefinition : instance of EventDefinition;%0AdeployedEvent : instance of DeployedEvent;%0AjobSpec : instance of JobSpec;%0AepochDate : timestamp;%0AepochEventTime : integer;%0AeventTime : timestamp;%0A%0Abegin%0A	%0A	logMessage := "AESimulator::DeployedEvent.DispatchScheduled";%0A	Logger::log(Logger::Information%2C "AESimulator"%2C logMessage);%0A	%0A	job := this -> R6.Job;%0A	eventDefinition := this -> R5.EventDefinition;%0A	for nextEventDefinition in eventDefinition -> R1.isFollowedBy.EventDefinition loop%0A		eventTime := timestamp'now;%0A		epochEventTime := (eventTime - epochDate)'seconds;%0A		epochEventDispatchTime := epochEventTime + nextEventDefinition.delayDuration'seconds;%0A		deployedEvent := create DeployedEvent(eventId => UUID::generate_formatted()%2C epochEventCreationTime => epochEventTime%2C epochEventDispatchTime => epochEventDispatchTime%2C prevEventId => string(this.eventId)%2C deployed => false%2C eventTime => eventTime%2C Current_State => Created);%0A		link deployedEvent R5 nextEventDefinition;%0A		link job R6 deployedEvent;%0A		generate DeployedEvent.evaluateDispatch() to deployedEvent;%0A	end loop;%0A	generate Job.eventCreated() to job;%0A	%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,dispatchEvent,,1,,,,,
event,,,,,,,,
event,evaluateDispatch,,2,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,dispatchEvent,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,evaluateDispatch,Cannot_Happen,,,
transition,,,,,,,,
transition,Created,,,dispatchEvent,Cannot_Happen,,,
transition,,,,,,,,
transition,Created,,,evaluateDispatch,DispatchScheduled,,,
transition,,,,,,,,
transition,Dispatched,,,dispatchEvent,Cannot_Happen,,,
transition,,,,,,,,
transition,Dispatched,,,evaluateDispatch,Cannot_Happen,,,
transition,,,,,,,,
transition,DispatchScheduled,,,dispatchEvent,Dispatched,,,
transition,,,,,,,,
transition,DispatchScheduled,,,evaluateDispatch,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
description,This represents an event that has been generated and then delpoyed as part of the Job. The event is derived from the Event Definition.,,,,,,,
object,,,,,,,,
object,EventData,EventData,9,,,,,
attribute,eventDataId,preferred,unique,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,eventDataName,,,eventDataId,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,eventDataValue,,,eventDataName,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,eventDefinitionId,,,eventDataValue,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
referential,R16,,isCarriedIn,EventDefinition,eventDefinitionId,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,jobSpecName,,,eventDefinitionId,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
referential,R16,,isCarriedIn,EventDefinition,jobSpecName,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,eventDataType,,,jobSpecName,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,EventDefinition,EventDefinition,3,,,,,
attribute,eventDefinitionId,preferred,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
description,The id of the event definition as specified in the configuration file. This id together with the job spec name form the unique identifier for teh instance of Event definition.,,,,,,,
attribute,,,,,,,,
attribute,eventTypeName,,,eventDefinitionId,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
description,This is the name of the event that is to be generated as part of the test. Event type names are should typically conform to the events that the client expects the system to process. The exception to this is when the test is to pass in invalid events.,,,,,,,
attribute,,,,,,,,
attribute,applicationName,,,eventTypeName,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
description,This is the name of the application that generated the event.,,,,,,,
attribute,,,,,,,,
attribute,nodeName,,,applicationName,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
description,This is the name of the node in the system where the application which generated the event is deployed.,,,,,,,
attribute,,,,,,,,
attribute,jobSpecName,preferred,,nodeName,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
referential,R2,,isFirstFor,JobSpec,jobSpecName,,,
referential,,,,,,,,
referential,R9,,isPartOf,JobSpec,jobSpecName,,,
referential,,,,,,,,
description,The is the name given to the job spec as part of the test definition.,,,,,,,
attribute,,,,,,,,
attribute,delayDuration,,,jobSpecName,,,,
typeref,duration,,,,,,,
typeref,,,,,,,,
description,This is a duration that specifies a delay time in generating the event with respect to the previous event.,,,,,,,
attribute,,,,,,,,
attribute,prevId,,,delayDuration,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
description,This is the previous event definition id. This is used to determine which previous event id to report in the event data that is sent to the Dual Twin System for processing.,,,,,,,
attribute,,,,,,,,
attribute,preveventDefinitionId,,,prevId,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
referential,R1,,follows,EventDefinition,eventDefinitionId,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,prevjobSpecName,,,preveventDefinitionId,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
referential,R1,,follows,EventDefinition,jobSpecName,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,sequenceStart,,,prevjobSpecName,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
description,This indicates that the if this event is the start of a sequence and therefore has no previous event.,,,,,,,
attribute,,,,,,,,
description,This captures the details of an event that should be generated as part of a Job Spec. This is read in from the configuration file.,,,,,,,
object,,,,,,,,
object,EventDispatchOrder,EventDispatchOrder,6,,,,,
attribute,nexteventDefinitionId,,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
referential,R13,,nextEvent,EventDispatchOrder,eventDefinitionId,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,nextjobSpecName,,,nexteventDefinitionId,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
referential,R13,,nextEvent,EventDispatchOrder,jobSpecName,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,nexttestId,,,nextjobSpecName,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R13,,nextEvent,EventDispatchOrder,testId,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,eventDefinitionId,preferred,,nexttestId,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
referential,R14,,dispatches,EventDefinition,eventDefinitionId,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,testId,preferred,,eventDefinitionId,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R12,,firstFor,TestJobSpec,testId,,,
referential,,,,,,,,
referential,R15,,currentFor,TestJobSpec,testId,,,
referential,,,,,,,,
referential,R14,,areDispatchedFor,TestDefinition,testId,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,jobSpecName,preferred,,testId,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
referential,R12,,firstFor,TestJobSpec,jobSpecName,,,
referential,,,,,,,,
referential,R15,,currentFor,TestJobSpec,jobSpecName,,,
referential,,,,,,,,
referential,R14,,dispatches,EventDefinition,jobSpecName,,,
referential,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,EventFileForJob,EventFileForJob,11,,,,,
attribute,auditEventFileId,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R17,,reportsEventTo,AuditEventFile,auditEventFileId,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,jobId,preferred,,auditEventFileId,,,,
typeref,UUID::formatted_uuid,,,,,,,
typeref,,,,,,,,
referential,R17,,containsEventsFor,Job,jobId,,,
referential,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Job,Job,1,,,,,
attribute,jobId,preferred,,,,,,
typeref,UUID::formatted_uuid,,,,,,,
typeref,,,,,,,,
description,A UUID that is used to uniquely identify the job.,,,,,,,
attribute,,,,,,,,
attribute,jobSpecName,,,jobId,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
referential,R3,,exectuted,JobSpec,jobSpecName,,,
referential,,,,,,,,
description,The name of the job spec that this job is using.,,,,,,,
attribute,,,,,,,,
attribute,testId,,,jobSpecName,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R7,,wasEexecutedBy,TestDefinition,testId,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,jobStartTime,,,testId,,,,
typeref,timestamp,,,,,,,
typeref,,,,,,,,
description,The time that the job was started.,,,,,,,
attribute,,,,,,,,
operation,AESimulator,Job,public,selectEventToDispatch,instance,,1,
codeblock,logMessage : string;%0AjobSpec : instance of JobSpec;%0AtestDefinition : instance of TestDefinition;%0AtestJobSpec : instance of TestJobSpec;%0AeventDispatchOrder : instance of EventDispatchOrder;%0ApreviousEventDispatchOrder : instance of EventDispatchOrder;%0AdeployedEvents : sequence of instance of DeployedEvent;%0AeventToDispatch : instance of DeployedEvent;%0AeventDefinition : instance of EventDefinition;%0A%0Abegin%0A	// locate the first event to dispatch and request that it is dispatched%0A	logMessage := "AESimulator::Job.selectEventToDispatch";%0A	Logger::log(Logger::Information%2C "AESimulator"%2C logMessage);%0A	jobSpec := this -> R3.JobSpec;%0A	testDefinition := this -> R7.TestDefinition;%0A	testJobSpec := jobSpec with testDefinition -> R8.TestJobSpec;%0A	if testJobSpec /= null then%0A		eventDispatchOrder := testJobSpec -> R15.EventDispatchOrder;%0A		if eventDispatchOrder = null then%0A			// this must be the first event to dispatch%0A			eventDispatchOrder := testJobSpec -> R12.EventDispatchOrder;%0A		else%0A			// locate the next event to be dispatched%0A			previousEventDispatchOrder := eventDispatchOrder;%0A			unlink testJobSpec R15 eventDispatchOrder;%0A			eventDispatchOrder := eventDispatchOrder -> R13.nextEvent;%0A		end if;%0A		if eventDispatchOrder /= null then%0A			link testJobSpec R15 eventDispatchOrder;%0A			deployedEvents := this -> R6.DeployedEvent;%0A			eventToDispatch := find_one deployedEvents(eventDefinitionId = eventDispatchOrder.eventDefinitionId and deployed = false);%0A			if eventToDispatch /= null then%0A				eventDefinition := eventToDispatch -> R5.EventDefinition;%0A				if eventDefinition.delayDuration /= @PT0S@ then%0A					schedule eventToDispatch.dispatchTimer generate DeployedEvent.dispatchEvent() to eventToDispatch delay eventDefinition.delayDuration;%0A					logMessage := "AESimulator::Job.selectedEventToDispatch - delaying dispatch event type = " & eventDefinition.eventTypeName;%0A					Logger::log(Logger::Information%2C "AESimulator"%2C logMessage);%0A				else%0A					generate DeployedEvent.dispatchEvent() to eventToDispatch;%0A				end if;%0A			else%0A				unlink testJobSpec R15;%0A				generate Job.jobComplete() to this;%0A			end if;%0A		else%0A			unlink testJobSpec R15;%0A			generate Job.jobComplete() to this;%0A		end if;%0A	else%0A		unlink testJobSpec R15;%0A		generate Job.jobComplete() to this;%0A		logMessage := "AESimulator::Job.selectEventToDispatch - job failed test name = " & testDefinition.testName & "%2C job spec name = " & jobSpec.jobSpecName;%0A		Logger::log(Logger::Error%2C "AESimulator"%2C logMessage);%0A	end if; %0Aend service;,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
state,,Job,Created,,1,,,
codeblock,begin%0A  null;%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,Job,JobStarted,,2,,,
codeblock,logMessage : string;%0AeventDefinition : instance of EventDefinition;%0AdeployedEvent : instance of DeployedEvent;%0AtestSpec : instance of TestSpec;%0AauditEventFile : instance of AuditEventFile;%0AeventFileForJob : instance of EventFileForJob;%0AjobSpec : instance of JobSpec;%0AepochDate : timestamp;%0AepochEventTime : integer;%0AepochEventDispatchTime : integer;%0AeventTime : timestamp;%0A%0Abegin%0A	%0A	logMessage := "AESimulator::Job.JobStarted";%0A	Logger::log(Logger::Information%2C "AESimulator"%2C logMessage);%0A	%0A	testSpec := find_one TestSpec();%0A	if testSpec.oneFilePerJob = true then%0A		auditEventFile := create AuditEventFile(isActive => true%2C fileId => this.jobId%2C Current_State => Created);%0A	else%0A		auditEventFile := find_one AuditEventFile(isActive = true);%0A	end if;%0A	eventFileForJob := create EventFileForJob(auditEventFileId => auditEventFile.auditEventFileId%2C jobId => this.jobId);%0A	link this R17 auditEventFile using eventFileForJob;%0A	jobSpec := this -> R3.JobSpec;%0A	for eventDefinition in jobSpec -> R2.EventDefinition loop%0A		eventTime := timestamp'now;%0A		epochEventTime := (eventTime - epochDate)'seconds;%0A		epochEventDispatchTime := epochEventTime + eventDefinition.delayDuration'seconds;%0A		deployedEvent := create DeployedEvent(eventId => UUID::generate_formatted()%2C epochEventCreationTime => epochEventTime%2C epochEventDispatchTime => epochEventDispatchTime%2C deployed => false%2C eventTime => eventTime%2C Current_State => Created);%0A		link deployedEvent R5 eventDefinition;%0A		link this R6 deployedEvent;%0A		generate DeployedEvent.evaluateDispatch() to deployedEvent;%0A	end loop;%0A		%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,Job,JobFinished,,3,,,
codeblock,logMessage : string;%0AtestSpec : instance of TestSpec;%0AdestinationFilename : string;%0Aevents  : sequence of instance of DeployedEvent;%0AauditEventFile : instance of AuditEventFile;%0AeventFileForJob : instance of EventFileForJob;%0AjobSpec : instance of JobSpec;%0AtestDefinition : instance of TestDefinition;%0AtestJobSpec : instance of TestJobSpec;%0A%0Abegin%0A	%0A	logMessage := "AESimulator::Job.JobFinished";%0A	Logger::log(Logger::Information%2C "AESimulator"%2C logMessage);%0A	testSpec := find_one TestSpec();%0A	jobSpec := this -> R3.JobSpec;%0A	testDefinition := this -> R7.TestDefinition;%0A	testJobSpec := jobSpec with testDefinition -> R8.TestJobSpec;%0A	unlink testJobSpec R15;%0A%0A	auditEventFile := find_one (this -> R17.AuditEventFile)(isActive = true);%0A	if testSpec.oneFilePerJob = true then%0A		generate AuditEventFile.generateFile() to auditEventFile;%0A	end if;%0A	%0A	eventFileForJob := this with auditEventFile -> R17.EventFileForJob; %0A	unlink this R17 auditEventFile using eventFileForJob;%0A	delete eventFileForJob;%0A	events := this -> R10.DeployedEvent;%0A	unlink events R6;%0A	unlink events R5;%0A	unlink events R10;%0A	delete events;%0A	%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,Job,CreatingEvents,,4,,,
codeblock,logMessage : string;%0AeventDefinitions : sequence of instance of EventDefinition;%0AcreatedEvents : sequence of instance of DeployedEvent;%0AjobSpec : instance of JobSpec;%0AtestDefinition : instance of TestDefinition;%0AtestJobSpec : instance of TestJobSpec;%0AeventToDispatch : instance of DeployedEvent;%0A%0Abegin%0A	%0A	eventDefinitions := this -> R3.JobSpec -> R9.EventDefinition;%0A	createdEvents := this -> R6.DeployedEvent;%0A	logMessage := "AESimulator::Job.DispatchingEvents - events to create = " & eventDefinitions'length'image & "%2C events created = " & createdEvents'length'image;%0A	Logger::log(Logger::Information%2C "AESimulator"%2C logMessage);%0A	if  eventDefinitions'length = createdEvents'length then%0A		// locate the first event to dispatch and request that it is dispatched%0A		jobSpec := this -> R3.JobSpec;%0A		testDefinition := this -> R7.TestDefinition;%0A		testJobSpec := jobSpec with testDefinition -> R8.TestJobSpec;%0A		if testJobSpec /= null then%0A			generate Job.startEventDispatch() to this;%0A		else%0A			logMessage := "AESimulator::Job.DispatchingEvents - job failed test name = " & testDefinition.testName & "%2C job spec name = " & jobSpec.jobSpecName;%0A			Logger::log(Logger::Error%2C "AESimulator"%2C logMessage);%0A		end if; %0A	end if;%0A	%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,Job,DispatchingEvents,,5,,,
codeblock,logMessage : string;%0AundeployedEvents : sequence of instance of DeployedEvent;%0AdeployedEvents : sequence of instance of DeployedEvent;%0A%0Abegin%0A	%0A	// evaluate if all events have been dispatched%0A	undeployedEvents := this -> R6.DeployedEvent();%0A	deployedEvents := this -> R10.DeployedEvent();%0A	logMessage := "AESimulator::Job.DispatchingEvents - events to deploy = " & undeployedEvents'length'image & "%2C events deployed = " & deployedEvents'length'image;%0A	Logger::log(Logger::Information%2C "AESimulator"%2C logMessage);%0A	if undeployedEvents'length /= deployedEvents'length then%0A		// select the next event to dispatch%0A		this.selectEventToDispatch();%0A	else%0A		// complete the job%0A		generate Job.jobComplete() to this;%0A	end if;%0A	%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,startJob,,1,,,,,
event,,,,,,,,
event,jobComplete,,2,,,,,
event,,,,,,,,
event,eventCreated,,3,,,,,
event,,,,,,,,
event,eventDispatched,,4,,,,,
event,,,,,,,,
event,startEventDispatch,,5,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,startJob,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,jobComplete,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,eventCreated,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,eventDispatched,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,startEventDispatch,Cannot_Happen,,,
transition,,,,,,,,
transition,Created,,,startJob,JobStarted,,,
transition,,,,,,,,
transition,Created,,,jobComplete,Ignore,,,
transition,,,,,,,,
transition,Created,,,eventCreated,Ignore,,,
transition,,,,,,,,
transition,Created,,,eventDispatched,Ignore,,,
transition,,,,,,,,
transition,Created,,,startEventDispatch,Ignore,,,
transition,,,,,,,,
transition,JobStarted,,,startJob,Ignore,,,
transition,,,,,,,,
transition,JobStarted,,,jobComplete,Ignore,,,
transition,,,,,,,,
transition,JobStarted,,,eventCreated,CreatingEvents,,,
transition,,,,,,,,
transition,JobStarted,,,eventDispatched,Ignore,,,
transition,,,,,,,,
transition,JobStarted,,,startEventDispatch,Ignore,,,
transition,,,,,,,,
transition,JobFinished,,,startJob,Ignore,,,
transition,,,,,,,,
transition,JobFinished,,,jobComplete,Ignore,,,
transition,,,,,,,,
transition,JobFinished,,,eventCreated,Ignore,,,
transition,,,,,,,,
transition,JobFinished,,,eventDispatched,Ignore,,,
transition,,,,,,,,
transition,JobFinished,,,startEventDispatch,Ignore,,,
transition,,,,,,,,
transition,CreatingEvents,,,startJob,Ignore,,,
transition,,,,,,,,
transition,CreatingEvents,,,jobComplete,JobFinished,,,
transition,,,,,,,,
transition,CreatingEvents,,,eventCreated,CreatingEvents,,,
transition,,,,,,,,
transition,CreatingEvents,,,eventDispatched,Ignore,,,
transition,,,,,,,,
transition,CreatingEvents,,,startEventDispatch,DispatchingEvents,,,
transition,,,,,,,,
transition,DispatchingEvents,,,startJob,Ignore,,,
transition,,,,,,,,
transition,DispatchingEvents,,,jobComplete,JobFinished,,,
transition,,,,,,,,
transition,DispatchingEvents,,,eventCreated,Ignore,,,
transition,,,,,,,,
transition,DispatchingEvents,,,eventDispatched,DispatchingEvents,,,
transition,,,,,,,,
transition,DispatchingEvents,,,startEventDispatch,Ignore,,,
transition,,,,,,,,
transitiontable,,,,,,,,
description,This represents a Job that as been created from a Job Spec as definined by the Test Definition.%0A%0AA Job has shall identify the events that have to be generated from the event definition and create the events in the order specified.%0A%0AOnce all the events have been generated the Job is complete.,,,,,,,
object,,,,,,,,
object,JobSpec,JobSpec,5,,,,,
attribute,jobSpecName,preferred,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
description,This is the test name that has been given to the job spec e.g. EndToEndOrderedJob,,,,,,,
attribute,,,,,,,,
attribute,jobName,,,jobSpecName,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
description,This represents a job specification that has been loaded in from the simulator configuration file.%0A%0AThe simulator shall execute this Job Spec at the rate specified in the test definition class.%0A%0AThere can be many Job Specs for a test definition. The Job Spec is associated with the Event Definition which captures all the events for the Job Spec and the order it which they are played.,,,,,,,
object,,,,,,,,
object,TestDefinition,TestDefinition,4,,,,,
attribute,testId,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description,An arbitary identifier for this test definition.,,,,,,,
attribute,,,,,,,,
attribute,totalTests,,,testId,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description,This defines the total number of times this test is to be executed.,,,,,,,
attribute,,,,,,,,
attribute,testFrequency,,,totalTests,,,,
typeref,duration,,,,,,,
typeref,,,,,,,,
description,A duration that specifies the frequency that the test should be run e.g. PT1S is every second.,,,,,,,
attribute,,,,,,,,
attribute,testTimer,,,testFrequency,,,,
typeref,timer,,,,,,,
typeref,,,,,,,,
description,A timer used to schedule the execution of the test.,,,,,,,
attribute,,,,,,,,
attribute,testCount,,,testTimer,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description,A count of the completed tests which is used to determine when the total tests has been reached.,,,,,,,
attribute,,,,,,,,
attribute,testName,,,testCount,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,TestDefinition,Created,,1,,,
codeblock,begin%0A  null;%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,TestDefinition,TestStarted,,2,,,
codeblock,logMessage : string;%0Ajob : instance of Job;%0A%0Abegin%0A	%0A	logMessage := "AESimulator::TestDefinition.TestStarted";%0A	Logger::log(Logger::Information%2C "AESimulator"%2C logMessage);%0A	for jobSpec in this -> R8.JobSpec loop%0A		job := create Job(jobId => UUID::generate_formatted()%2C jobStartTime => timestamp'now%2C Current_State => Created);%0A		link this R7 job;%0A		link job R3 jobSpec;%0A		generate Job.startJob() to job;%0A	end loop;%0A	this.testCount := this.testCount + 1;%0A	%0A	if this.testCount < this.totalTests then%0A		schedule this.testTimer generate TestDefinition.startTest() to this delay this.testFrequency;%0A	else%0A		generate TestDefinition.testComplete() to this;%0A	end if;%0A%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,TestDefinition,TestFinished,,3,,,
codeblock,begin%0A  null;%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,startTest,,1,,,,,
event,,,,,,,,
event,testComplete,,2,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,startTest,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,testComplete,Cannot_Happen,,,
transition,,,,,,,,
transition,Created,,,startTest,TestStarted,,,
transition,,,,,,,,
transition,Created,,,testComplete,Cannot_Happen,,,
transition,,,,,,,,
transition,TestStarted,,,startTest,TestStarted,,,
transition,,,,,,,,
transition,TestStarted,,,testComplete,TestFinished,,,
transition,,,,,,,,
transition,TestFinished,,,startTest,Cannot_Happen,,,
transition,,,,,,,,
transition,TestFinished,,,testComplete,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
description,This captures the details of a test. A Test may have manay Job Specs and each Job Spec captures the types of event an the order that the events shall be played.%0A%0AThe Test Definition also details the total number of test that are to be executed for the test and the frequency that the test should be executed.,,,,,,,
object,,,,,,,,
object,TestJobSpec,TestJobSpec,7,,,,,
attribute,testId,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R8,,isRunBy,TestDefinition,testId,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,jobSpecName,preferred,,testId,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
referential,R8,,shallRun,JobSpec,jobSpecName,,,
referential,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,TestSpec,TestSpec,8,,,,,
attribute,testSpecId,preferred,unique,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,jobSpecificationLocation,,,testSpecId,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,oneFilePerJob,,,jobSpecificationLocation,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
description,A boolean that indicates when true that all the events for that job should be placed in the same file.%0A%0AIn false the events shall be placed in a sahred file up to the maximum events per file or the file timeout period.,,,,,,,
attribute,,,,,,,,
attribute,testFileLocation,,,oneFilePerJob,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
description,The path to the directory where the job file containing the generated events should be constructed.,,,,,,,
attribute,,,,,,,,
attribute,testFileDestination,,,testFileLocation,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
description,The path to the directory where the completed job file containing the generated events should be moved to so that it can be processed by the Dual Twin System,,,,,,,
attribute,,,,,,,,
attribute,maxEventsPerFile,,,testFileDestination,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description,Thi si the maximum number of events that can be added to a file when the simulator is not being executed in a one file per job mode.,,,,,,,
attribute,,,,,,,,
attribute,fileTimeOutPeriod,,,maxEventsPerFile,,,,
typeref,duration,,,,,,,
typeref,,,,,,,,
description,This is the maximum amount of time that can elapse before a file is generated when not operating in a one file per job mode.,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
domain,,,,,,,,
