//! ACTIVITY BEGIN. '6585bd90-dc28-446f-904e-d050cb950c52' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test70ComplexSequence_SunnyDay1 () is
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
previousEvents : sequence of string;
empty : sequence of string;
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of AuditEvent;
theDynamicControls : set of instance of DynamicControl;
theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
theUsagesOfTransientInvariant : set of instance of TransientInvariant;
theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
logMessage : string;

begin
  // This test delivers events for two jobs:
  //    (1) 'AuthGen-0001' of type 'GenerateAuthorisationTokenJob'
  //    (2) 'ProtProc-0001' of type 'ComplexJob'
  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
  //
  // This test delivers events compliant with the two job definitions (as defined in the scenario 'InitComplexEventSequence1Definition'
  // and does not result in any errors being expected.
  //
  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
  previousEvents := empty;
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
  previousEvents := ("Event97");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
  previousEvents := ("Event98");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
  //
  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
  previousEvents := ("Event99");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
  //
  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "GenToken1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'GenToken1' being fired.
  Test::service_event_queue();
  //
  //
  // Now deliver a set of events for the 'ComplexJob' - this job consists of a single but highly complex sequence which,
  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
  // various topologies, constraints and invariants.
  //
  // Starting with the initial 3 events of section 1 of the complex sequence...
  previousEvents := empty;
  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
  previousEvents := ("Event25");
  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
  previousEvents := ("Event59");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
  //
  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
  previousEvents := ("Event60");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
  previousEvents := ("Event11");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
  previousEvents := ("Event17");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
  previousEvents := ("Event29");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
  previousEvents := ("Event33");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
  previousEvents := ("Event41");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
  previousEvents := ("Event63");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
  previousEvents := ("Event19");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
  previousEvents := ("Event23");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
  previousEvents := ("Event16");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
  previousEvents := ("Event27");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
  previousEvents := ("Event70");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
  previousEvents := ("Event18");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
  previousEvents := ("Event36");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
  previousEvents := ("Event66");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event55",theAuditEventData);
  //
  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
  // An instance fork starts here - with 3 instances of CS1-L
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
  //
  // ...and the INSTANCE fork merges here at the CS1-M event
  previousEvents := empty & "Event62" & "Event56" & "Event57";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
  //
  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
  // events up to the end point in the second section of the sequence.
  //
  previousEvents := empty & "Event55" & "Event14";
  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
  previousEvents := ("Event15");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
  //
  // ...and now the events for section 4 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
  previousEvents := ("Event20");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
  //
  // ...and now the events for section 5 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
  previousEvents := ("Event64");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
  previousEvents := ("Event30");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
  previousEvents := ("Event32");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
  previousEvents := ("Event45");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
  //
  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
  previousEvents := ("Event21");
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
  //
  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
  previousEvents := ("Event24"); 
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
  //
  previousEvents := ("Event39");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event46",theAuditEventData);
  previousEvents := ("Event46");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event47",theAuditEventData);
  //
  // ...and finally the events for section 6 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
  previousEvents := ("Event42");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
  previousEvents := ("Event31");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
  previousEvents := ("Event22");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
  //
  // Process all the events on the event queue - note that the job 'ComplexSunnyDay1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the 'ComplexSunnyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
  Test::service_event_queue();
  //
  // ...and now check that the state of the model is as expected.
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  theDynamicControlDefinitions := theJobs -> R35 -> R29;
  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
  theUsagesOfTransientInvariant := theAuditEvents -> R23;
  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
    end if;
  end loop;
  //
  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 46, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theDynamicControls'length = 5, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 10, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 8, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;
  //
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '10d28c1d-4ee7-4f07-ac7b-0900ec62522e' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test71ComplexSequence_SunnyDay2 () is
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
previousEvents : sequence of string;
empty : sequence of string;
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of AuditEvent;
theDynamicControls : set of instance of DynamicControl;
theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
theIntraJobInvariantUsages : set of instance of TransientInvariant;
logMessage : string;

begin
  // ******************************************************************************
  // This test delivers events for two jobs:
  //    (1) 'AuthGen-0001' of type 'GenerateAuthorisationTokenJob'
  //    (2) 'ProtProc-0001' of type 'ComplexJob'
  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
  //
  // This test delivers events compliant with the two job definitions (as defined in the scenario 'InitComplexEventSequence1Definition'
  // and does not result in any errors being expected.
  //
  // The only difference between this test and Test70ComplexSequence_SunnyDay1 is that sections 2 & 3 do not merge at Event15 
  // and section 3 terminates at Event69.
  // *******************************************************************************
  //
  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
  previousEvents := empty;
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
  previousEvents := ("Event97");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
  previousEvents := ("Event98");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
  //
  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
  previousEvents := ("Event99");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
  //
  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "GenToken1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'GenToken1' being fired.
  Test::service_event_queue();
  //
  //
  // Now deliver a set of events for the 'ComplexJob' - this job consists of a single but highly complex sequence which,
  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
  // various topologies, constraints and invariants.
  //
  // Starting with the initial 3 events of section 1 of the sequence...
  previousEvents := empty;
  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
  previousEvents := ("Event25");
  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
  previousEvents := ("Event59");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
  //
  // ...then the events for section 2 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
  previousEvents := ("Event60");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
  previousEvents := ("Event11");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
  previousEvents := ("Event17");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
  previousEvents := ("Event29");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
  previousEvents := ("Event33");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
  previousEvents := ("Event41");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
  previousEvents := ("Event63");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
  previousEvents := ("Event19");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
  previousEvents := ("Event23");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
  previousEvents := ("Event16");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
  previousEvents := ("Event27");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
  previousEvents := ("Event70");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
  previousEvents := ("Event18");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
  previousEvents := ("Event36");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
  previousEvents := ("Event66");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event55",theAuditEventData);
  previousEvents := ("Event55");
  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
  previousEvents := ("Event15");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
  //
  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
  // An instance fork starts here - with 3 instances of CS1-L
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
  //
  // ...and the INSTANCE fork merges here at the CS1-M event
  previousEvents := empty & "Event62" & "Event56" & "Event57";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
  previousEvents := ("Event14");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-N","ComplexSunnyDay1",previousEvents,"Event69",theAuditEventData);
  //
  // ...and now the events for section 4 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
  previousEvents := ("Event20");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
  //
  // ...and now the events for section 5 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
  previousEvents := ("Event64");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
  previousEvents := ("Event30");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
  previousEvents := ("Event32");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
  previousEvents := ("Event45");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
  //
  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
  previousEvents := ("Event21");
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
  //
  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
  previousEvents := ("Event24"); 
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
  //
  previousEvents := ("Event39");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event46",theAuditEventData);
  previousEvents := ("Event46");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event47",theAuditEventData);
  //
  // ...and finally the events for section 6 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
  previousEvents := ("Event42");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
  previousEvents := ("Event31");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
  previousEvents := ("Event22");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
  //
  // Process all the events on the event queue - note that the Job ComplexSunnyDay1 should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the ProtProc-0001 job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
  Test::service_event_queue();
  //
  // ...and now check that the state of the model is as expected.
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  theDynamicControlDefinitions := theJobs -> R35 -> R29;
  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
  theIntraJobInvariantUsages := theAuditEvents -> R23;
  //
  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 47, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theDynamicControls'length = 5, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
  Assertions::assertTrue(theIntraJobInvariantUsages'length = 9, "Wrong number of Intra-Job Invariant usages created: " & (theIntraJobInvariantUsages'length)'image);
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;
  //
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'e9da4c68-5554-4c1b-b808-93c151f198e0' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test100ComplexSequence_RainyDay1_XORconstraintViolation () is
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
previousEvents : sequence of string;
empty : sequence of string;
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of AuditEvent;
theDynamicControls : set of instance of DynamicControl;
theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
theUsagesOfTransientInvariant : set of instance of TransientInvariant;
theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
logMessage : string;

begin
  // This test delivers events for two jobs:
  //    (1) 'AuthGen-0001' of type 'GenerateAuthorisationTokenJob'
  //    (2) 'ProtProc-0001' of type 'ComplexJob'
  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
  //
  // This test delivers events compliant with the two job definitions (as defined in the scenario 'InitComplexEventSequence1Definition'
  // and does not result in any errors being expected.
  //
  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
  previousEvents := empty;
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
  previousEvents := ("Event97");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
  previousEvents := ("Event98");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
  //
  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
  previousEvents := ("Event99");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
  //
  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "GenToken1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'GenToken1' being fired.
  Test::service_event_queue();
  //
  //
  // Now deliver a set of events for the 'ComplexJob' - this job consists of a single but highly complex sequence which,
  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
  // various topologies, constraints and invariants.
  //
  // Starting with the initial 3 events of section 1 of the complex sequence...
  previousEvents := empty;
  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
  previousEvents := ("Event25");
  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
  previousEvents := ("Event59");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
  //
  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
  previousEvents := ("Event60");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
  previousEvents := ("Event11");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
  previousEvents := ("Event17");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
  previousEvents := ("Event29");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
  previousEvents := ("Event33");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
  previousEvents := ("Event41");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
  previousEvents := ("Event63");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
  previousEvents := ("Event19");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
  previousEvents := ("Event23");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
  previousEvents := ("Event16");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
  previousEvents := ("Event27");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
  previousEvents := ("Event70");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
  previousEvents := ("Event18");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
  previousEvents := ("Event36");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
  previousEvents := ("Event66");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event55",theAuditEventData);
  //
  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
  // An instance fork starts here - with 3 instances of CS1-L
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
  previousEvents := ("Event61");
  //theAuditEventData := emptyAuditEventData;
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
  previousEvents := ("Event61");
  //theAuditEventData := emptyAuditEventData;
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
  //
  // ...and the INSTANCE fork merges here at the CS1-M event
  previousEvents := empty & "Event62" & "Event56" & "Event57";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
  //
  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
  // events up to the end point in the second section of the sequence.
  //
  previousEvents := empty & "Event55" & "Event14";
  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
  previousEvents := ("Event15");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
  //
  // ...and now the events for section 4 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
  previousEvents := ("Event20");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
  //
  // ...and now the events for section 5 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
  previousEvents := ("Event64");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
  previousEvents := ("Event30");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
  previousEvents := ("Event32");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
  previousEvents := ("Event45");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
  //
  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
  previousEvents := ("Event21");
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
  //
  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
  previousEvents := ("Event24"); 
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
  //
  previousEvents := ("Event39");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event46",theAuditEventData);
  previousEvents := ("Event46");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event47",theAuditEventData);
  //
  // ...and now the events for section 6 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
  previousEvents := ("Event42");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
  previousEvents := ("Event31");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
  previousEvents := ("Event22");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
  //
  // ...and finally the events for section 7 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246815","ProtProc-0001","CS1-R","ComplexSunnyDay1",previousEvents,"Event26",theAuditEventData);
  //
  //
  // Process all the events on the event queue - note that the job 'ComplexSunnyDay1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the 'ComplexSunnyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
  Test::service_event_queue();
  //
  // ...and now check that the state of the model is as expected.
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  theDynamicControlDefinitions := theJobs -> R35 -> R29;
  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
  theUsagesOfTransientInvariant := theAuditEvents -> R23;
  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
    end if;
  end loop;
  //
  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 47, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theDynamicControls'length = 5, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 10, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 8, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
  //
  theJob := find_only Job(jobID = "GenToken1");
  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
  
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '62204647-587d-41d1-805f-fcc3c31376c0' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test72ComplexSequence_SunnyDay3 () is
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
previousEvents : sequence of string;
empty : sequence of string;
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of AuditEvent;
theDynamicControls : set of instance of DynamicControl;
theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
theUsagesOfTransientInvariant : set of instance of TransientInvariant;
theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
logMessage : string;

begin
  // This test delivers events for two jobs:
  //    (1) 'AuthGen-0001' of type 'GenerateAuthorisationTokenJob'
  //    (2) 'ProtProc-0001' of type 'ComplexJob'
  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
  //
  // This test delivers events compliant with the two job definitions (as defined in the scenario 'InitComplexEventSequence1Definition'
  // and does not result in any errors being expected.
  //
  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
  previousEvents := empty;
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
  previousEvents := ("Event97");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
  previousEvents := ("Event98");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
  //
  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
  previousEvents := ("Event99");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
  //
  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "GenToken1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'GenToken1' being fired.
  Test::service_event_queue();
  //
  //
  // Now deliver a set of events for the 'ComplexJob' - this job consists of a single but highly complex sequence which,
  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
  // various topologies, constraints and invariants.
  //
  // Starting with the initial 3 events of section 1 of the complex sequence...
  previousEvents := empty;
  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
  previousEvents := ("Event25");
  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
  previousEvents := ("Event59");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
  //
  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
  previousEvents := ("Event60");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
  previousEvents := ("Event11");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
  previousEvents := ("Event17");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
  previousEvents := ("Event29");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
  previousEvents := ("Event33");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
  previousEvents := ("Event41");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
  previousEvents := ("Event63");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
  previousEvents := ("Event19");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
  previousEvents := ("Event23");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
  previousEvents := ("Event16");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
  previousEvents := ("Event27");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
  previousEvents := ("Event70");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
  previousEvents := ("Event18");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
  previousEvents := ("Event36");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
  previousEvents := ("Event66");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-T","ComplexSunnyDay1",previousEvents,"Event77",theAuditEventData);
  //
  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
  // An instance fork starts here - with 3 instances of CS1-L
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
  previousEvents := ("Event61");
  //theAuditEventData := emptyAuditEventData;
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
  previousEvents := ("Event61");
  //theAuditEventData := emptyAuditEventData;
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
  //
  // ...and the INSTANCE fork merges here at the CS1-M event
  previousEvents := empty & "Event62" & "Event56" & "Event57";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
  //
  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
  // events up to the end point in the second section of the sequence.
  //
  previousEvents := empty & "Event77" & "Event14";
  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
  previousEvents := ("Event15");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
  //
  // ...and now the events for section 4 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
  previousEvents := ("Event20");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
  //
  // ...and now the events for section 5 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
  previousEvents := ("Event64");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
  previousEvents := ("Event30");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
  previousEvents := ("Event32");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
  previousEvents := ("Event45");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
  //
  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
  previousEvents := ("Event21");
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
  //
  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
  previousEvents := ("Event24"); 
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
  //
  previousEvents := ("Event39");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event46",theAuditEventData);
  previousEvents := ("Event46");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event47",theAuditEventData);
  //
  // ...and finally the events for section 6 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
  previousEvents := ("Event42");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
  previousEvents := ("Event31");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
  previousEvents := ("Event22");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
  //
  // Process all the events on the event queue - note that the job 'ComplexSunnyDay1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the 'ComplexSunnyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
  Test::service_event_queue();
  //
  // ...and now check that the state of the model is as expected.
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  theDynamicControlDefinitions := theJobs -> R35 -> R29;
  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
  theUsagesOfTransientInvariant := theAuditEvents -> R23;
  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
    end if;
  end loop;
  //
  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 46, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theDynamicControls'length = 5, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 10, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 8, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;
  //
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '43033c06-aa45-4452-9a2c-8f284e74a392' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test101ComplexSequence_RainyDay2_InstanceForkViolation () is
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
previousEvents : sequence of string;
empty : sequence of string;
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of AuditEvent;
theDynamicControls : set of instance of DynamicControl;
theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
theUsagesOfTransientInvariant : set of instance of TransientInvariant;
theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
logMessage : string;

begin
  // This test delivers events for two jobs:
  //    (1) 'AuthGen-0001' of type 'GenerateAuthorisationTokenJob'
  //    (2) 'ProtProc-0001' of type 'ComplexJob'
  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
  //
  // This test is designed to test whether the Sequence Verification domain can detect the incorrect number of
  // instance forks being taken at CS1-K,1 (Event61) and CS1-F,3 (Event2) of Job 'ComplexSequence'. This test checks that the
  // BRANCHCOUNT controls are adhered to correctly and result in a job failure of not.
  //
  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
  previousEvents := empty;
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
  previousEvents := ("Event97");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
  previousEvents := ("Event98");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
  //
  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
  previousEvents := ("Event99");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
  //
  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "GenToken1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'GenToken1' being fired.
  Test::service_event_queue();
  //
  //
  // Now deliver a set of events for the 'ComplexJob' - this job consists of a single but highly complex sequence which,
  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
  // various topologies, constraints and invariants.
  //
  // Starting with the initial 3 events of section 1 of the complex sequence...
  previousEvents := empty;
  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
  previousEvents := ("Event25");
  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
  previousEvents := ("Event59");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
  //
  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
  previousEvents := ("Event60");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
  previousEvents := ("Event11");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
  previousEvents := ("Event17");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
  previousEvents := ("Event29");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
  previousEvents := ("Event33");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
  previousEvents := ("Event41");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
  previousEvents := ("Event63");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
  previousEvents := ("Event19");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
  previousEvents := ("Event23");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
  previousEvents := ("Event16");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
  previousEvents := ("Event27");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
  previousEvents := ("Event70");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
  previousEvents := ("Event18");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
  previousEvents := ("Event36");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
  previousEvents := ("Event66");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event55",theAuditEventData);
  //
  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
  // An instance fork starts here - with 2 instances of CS1-L (should be 3 to be compliant with sequence spec - Event57 commented out)
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
  // Here's where one of the expected instance branches has been commented out for testing purposes
  //previousEvents := ("Event61");
  //theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  //acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
  //
  // ...and the INSTANCE fork merges here at the CS1-M event
  previousEvents := empty & "Event62" & "Event56";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
  //
  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
  // events up to the end point in the second section of the sequence.
  //
  previousEvents := empty & "Event55" & "Event14";
  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
  previousEvents := ("Event15");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
  //
  // ...and now the events for section 4 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
  previousEvents := ("Event20");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
  //
  // ...and now the events for section 5 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
  previousEvents := ("Event64");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
  previousEvents := ("Event30");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
  previousEvents := ("Event32");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
  previousEvents := ("Event45");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
  //
  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
  previousEvents := ("Event21");
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
  //
  // Each instance of event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
  // Further, an instance fork starts here - with 3 instances of CS1-L (should be 2 to be compliant with sequence spec - Event78 & Event79 added)
  previousEvents := ("Event24"); 
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
  previousEvents := ("Event39");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event46",theAuditEventData);
  previousEvents := ("Event46");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event47",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event78",theAuditEventData);
  previousEvents := ("Event78");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event79",theAuditEventData);
  //
  // ...and finally the events for section 6 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
  previousEvents := ("Event42");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
  previousEvents := ("Event31");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
  previousEvents := ("Event22");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
  //
  // Process all the events on the event queue - note that the job 'ComplexSunnyDay1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the 'ComplexSunnyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
  Test::service_event_queue();
  //
  // ...and now check that the state of the model is as expected.
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  theDynamicControlDefinitions := theJobs -> R35 -> R29;
  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
  theUsagesOfTransientInvariant := theAuditEvents -> R23;
  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
    end if;
  end loop;
  //
  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 47, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theDynamicControls'length = 5, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 10, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 8, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
  //
  theJob := find_only Job(jobID = "GenToken1");
  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
  //
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'baf4b971-c576-4581-a87e-69c8b1174038' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test102ComplexSequence_RainyDay3_LOOPCOUNTviolation () is
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
previousEvents : sequence of string;
empty : sequence of string;
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of AuditEvent;
theDynamicControls : set of instance of DynamicControl;
theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
theUsagesOfTransientInvariant : set of instance of TransientInvariant;
theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
logMessage : string;

begin
  // This test delivers events for two jobs:
  //    (1) 'AuthGen-0001' of type 'GenerateAuthorisationTokenJob'
  //    (2) 'ProtProc-0001' of type 'ComplexJob'
  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
  //
  // This test is designed to test whether the Sequence Verification domain can detect the incorrect number of times a loop 
  // is executed within a sequence - specifically for the LOOPCOUNT controls within Job 'ComplexSequence':
  //     (1) Name = LC1 used at event occurrence 'CS1-E,1'
  //     (2) Name = LC2 used at event occurrence 'CS1-D,2'
  //     (3) Name = LC3 used at event occurrence 'CS1-S,1'
  //
  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
  previousEvents := empty;
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
  previousEvents := ("Event97");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
  previousEvents := ("Event98");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
  //
  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
  previousEvents := ("Event99");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
  //
  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "GenToken1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'GenToken1' being fired.
  Test::service_event_queue();
  //
  //
  // Now deliver a set of events for the 'ComplexJob' - this job consists of a single but highly complex sequence which,
  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
  // various topologies, constraints and invariants.
  //
  // Starting with the initial 3 events of section 1 of the complex sequence...
  previousEvents := empty;
  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
  previousEvents := ("Event25");
  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
  previousEvents := ("Event59");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
  //
  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
  previousEvents := ("Event60");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
  previousEvents := ("Event11");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
  previousEvents := ("Event17");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
  previousEvents := ("Event29");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
  previousEvents := ("Event33");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
  // Here's where one expected lap round the loop has been commented out for testing purposes
  //previousEvents := ("Event41");
  //theAuditEventData := emptyAuditEventData;
  //acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
  //previousEvents := ("Event63");
  //theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  //acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
  //previousEvents := ("Event19");
  //theAuditEventData := emptyAuditEventData;
  //acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
  previousEvents := ("Event41");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
  previousEvents := ("Event16");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
  previousEvents := ("Event27");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
  previousEvents := ("Event70");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
  previousEvents := ("Event18");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
  previousEvents := ("Event36");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
  previousEvents := ("Event66");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event55",theAuditEventData);
  // Here's where the additional go round the loop has been inserted
  previousEvents := ("Event55");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event71",theAuditEventData);
  previousEvents := ("Event71");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event72",theAuditEventData);
  previousEvents := ("Event72");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event73",theAuditEventData);
  // End of extra go around the loop.
  //
  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
  // An instance fork starts here - with 3 instances of CS1-L
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
  //
  // ...and the INSTANCE fork merges here at the CS1-M event
  previousEvents := empty & "Event62" & "Event56" & "Event57";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
  //
  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
  // events up to the end point in the second section of the sequence.
  //
  previousEvents := empty & "Event73" & "Event14";
  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
  previousEvents := ("Event15");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
  //
  // ...and now the events for section 4 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
  previousEvents := ("Event20");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
  //
  // ...and now the events for section 5 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
  previousEvents := ("Event64");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
  previousEvents := ("Event30");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
  // Here's where one expected lap round the loop has been commented out for testing purposes
  //previousEvents := ("Event32");
  //theAuditEventData := emptyAuditEventData;
  //acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
  //previousEvents := ("Event45");
  //theAuditEventData := emptyAuditEventData;
  //acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
  //
  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
  previousEvents := ("Event32");
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
  //
  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
  previousEvents := ("Event24"); 
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
  //
  previousEvents := ("Event39");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event46",theAuditEventData);
  previousEvents := ("Event46");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event47",theAuditEventData);
  //
  // ...and finally the events for section 6 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
  previousEvents := ("Event42");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
  // Here's where the additional go round the loop has been inserted
  previousEvents := ("Event31");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event35",theAuditEventData);
  previousEvents := ("Event35");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
  previousEvents := ("Event22");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
  //
  // Process all the events on the event queue - note that the job 'ComplexSunnyDay1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the 'ComplexSunnyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
  Test::service_event_queue();
  //
  // ...and now check that the state of the model is as expected.
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  theDynamicControlDefinitions := theJobs -> R35 -> R29;
  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
  theUsagesOfTransientInvariant := theAuditEvents -> R23;
  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
    end if;
  end loop;
  //
  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 45, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theDynamicControls'length = 5, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 9, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 7, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
  //
  theJob := find_only Job(jobID = "GenToken1");
  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
  //
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'b9cba0ae-acdb-4ead-b012-3c63de6685f7' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test103ComplexSequence_RainyDay4_LOOPCOUNTandBRANCHCOUNTviolation () is
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
previousEvents : sequence of string;
empty : sequence of string;
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of AuditEvent;
theDynamicControls : set of instance of DynamicControl;
theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
theUsagesOfTransientInvariant : set of instance of TransientInvariant;
theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
logMessage : string;

begin
  // This test delivers events for two jobs:
  //    (1) 'AuthGen-0001' of type 'GenerateAuthorisationTokenJob'
  //    (2) 'ProtProc-0001' of type 'ComplexJob'
  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
  //
  // This test is designed to test whether the Sequence Verification domain can detect when BOTH (a) an incorrect number of times a loop 
  // is executed within a sequence AND (b) an incorrect number of instance forks are taken within a sequence.
  // Specifically, the tests are for the LOOPCOUNT controls within Job 'ComplexSequence':
  //     (1) Name = LC1 used at event occurrence 'CS1-E,1'
  //     (2) Name = LC2 used at event occurrence 'CS1-D,2'
  //     (3) Name = LC3 used at event occurrence 'CS1-S,1'
  //
  // ...and for testing the BRANCHCOUNT controls within the same job, namely:
  //     (1) Name = BC1 used at event occurrence 'CS1-K,1'
  //     (2) Name = BC2 used at event occurrence 'CS1-F,3'
  //
  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
  previousEvents := empty;
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
  previousEvents := ("Event97");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
  previousEvents := ("Event98");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
  //
  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
  previousEvents := ("Event99");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
  //
  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "GenToken1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'GenToken1' being fired.
  Test::service_event_queue();
  //
  //
  // Now deliver a set of events for the 'ComplexJob' - this job consists of a single but highly complex sequence which,
  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
  // various topologies, constraints and invariants.
  //
  // Starting with the initial 3 events of section 1 of the complex sequence...
  previousEvents := empty;
  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
  previousEvents := ("Event25");
  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
  previousEvents := ("Event59");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
  //
  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
  previousEvents := ("Event60");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
  previousEvents := ("Event11");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
  previousEvents := ("Event17");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
  previousEvents := ("Event29");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
  previousEvents := ("Event33");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
  // Here's where one expected lap round the loop has been commented out for testing purposes
  //previousEvents := ("Event41");
  //theAuditEventData := emptyAuditEventData;
  //acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
  //previousEvents := ("Event63");
  //theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  //acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
  //previousEvents := ("Event19");
  //theAuditEventData := emptyAuditEventData;
  //acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
  previousEvents := ("Event41");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
  previousEvents := ("Event16");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
  previousEvents := ("Event27");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
  previousEvents := ("Event70");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
  previousEvents := ("Event18");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
  previousEvents := ("Event36");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
  previousEvents := ("Event66");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event55",theAuditEventData);
  // Here's where the additional go round the loop has been inserted
  previousEvents := ("Event55");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event71",theAuditEventData);
  previousEvents := ("Event71");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event72",theAuditEventData);
  previousEvents := ("Event72");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event73",theAuditEventData);
  // End of extra go around the loop.
  //
  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
  // An instance fork starts here - with 3 instances of CS1-L
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
  // Here's where one of the expected instance branches has been commented out for testing purposes
  //previousEvents := ("Event61");
  //theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  //acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
  //
  // ...and the INSTANCE fork merges here at the CS1-M event
  previousEvents := empty & "Event62" & "Event56";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
  //
  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
  // events up to the end point in the second section of the sequence.
  //
  previousEvents := empty & "Event73" & "Event14";
  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
  previousEvents := ("Event15");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
  //
  // ...and now the events for section 4 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
  previousEvents := ("Event20");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
  //
  // ...and now the events for section 5 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
  previousEvents := ("Event64");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
  previousEvents := ("Event30");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
  previousEvents := ("Event32");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
  previousEvents := ("Event45");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
  //
  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
  previousEvents := ("Event21");
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
  //
  // Each instance of event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
  // Further, an instance fork starts here - with 3 instances of CS1-L (should be 2 to be compliant with sequence spec - Event78 & Event79 added)
  previousEvents := ("Event24"); 
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
  previousEvents := ("Event39");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event46",theAuditEventData);
  previousEvents := ("Event46");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event47",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event78",theAuditEventData);
  previousEvents := ("Event78");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event79",theAuditEventData);
  //
  // ...and finally the events for section 6 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
  previousEvents := ("Event42");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
  // Here's where the additional go round the loop has been inserted
  previousEvents := ("Event31");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event35",theAuditEventData);
  previousEvents := ("Event35");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
  previousEvents := ("Event22");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
  //
  // Process all the events on the event queue - note that the job 'ComplexSunnyDay1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the 'ComplexSunnyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
  Test::service_event_queue();
  //
  // ...and now check that the state of the model is as expected.
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  theDynamicControlDefinitions := theJobs -> R35 -> R29;
  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
  theUsagesOfTransientInvariant := theAuditEvents -> R23;
  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
    end if;
  end loop;
  //
  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 48, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theDynamicControls'length = 5, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 9, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 7, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
  //
  theJob := find_only Job(jobID = "GenToken1");
  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
  //
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2c99716d-9b8f-4da7-8b43-08f84d5990f4' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test104ComplexSequence_RainyDay5_LOOPCOUNTandBRANCHCOUNTandXORviolation () is
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
previousEvents : sequence of string;
empty : sequence of string;
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of AuditEvent;
theDynamicControls : set of instance of DynamicControl;
theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
theUsagesOfTransientInvariant : set of instance of TransientInvariant;
theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
logMessage : string;

begin
  // This test delivers events for two jobs:
  //    (1) 'AuthGen-0001' of type 'GenerateAuthorisationTokenJob'
  //    (2) 'ProtProc-0001' of type 'ComplexJob'
  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
  //
  // This test is designed to test whether the Sequence Verification domain can detect when :
  //    (a) an incorrect number of times a loop is executed within a sequence
  //    AND
  //    (b) an incorrect number of instance forks are taken within a sequence.
  //    AND
  //     (c) situations where multiple branches are taken when an XOR constraint has been specified.
  //
  // Specifically, the tests are for the LOOPCOUNT controls within Job 'ComplexSequence':
  //     (1) Name = LC1 used at event occurrence 'CS1-E,1'
  //     (2) Name = LC2 used at event occurrence 'CS1-D,2'
  //     (3) Name = LC3 used at event occurrence 'CS1-S,1'
  //
  // ...and for testing the BRANCHCOUNT controls within the same job, namely:
  //     (1) Name = BC1 used at event occurrence 'CS1-K,1'
  //     (2) Name = BC2 used at event occurrence 'CS1-F,3'
  //
  // ...and an XOR constraint violation after Event14.
  //
  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
  previousEvents := empty;
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
  previousEvents := ("Event97");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
  previousEvents := ("Event98");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
  //
  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
  previousEvents := ("Event99");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
  //
  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "GenToken1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'GenToken1' being fired.
  Test::service_event_queue();
  //
  //
  // Now deliver a set of events for the 'ComplexJob' - this job consists of a single but highly complex sequence which,
  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
  // various topologies, constraints and invariants.
  //
  // Starting with the initial 3 events of section 1 of the complex sequence...
  previousEvents := empty;
  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
  previousEvents := ("Event25");
  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
  previousEvents := ("Event59");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
  //
  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
  previousEvents := ("Event60");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
  previousEvents := ("Event11");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
  previousEvents := ("Event17");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
  previousEvents := ("Event29");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
  previousEvents := ("Event33");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
  // Here's where one expected lap round the loop has been commented out for testing purposes
  //previousEvents := ("Event41");
  //theAuditEventData := emptyAuditEventData;
  //acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
  //previousEvents := ("Event63");
  //theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  //acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
  //previousEvents := ("Event19");
  //theAuditEventData := emptyAuditEventData;
  //acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
  previousEvents := ("Event41");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
  previousEvents := ("Event16");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
  previousEvents := ("Event27");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
  previousEvents := ("Event70");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
  previousEvents := ("Event18");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
  previousEvents := ("Event36");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
  previousEvents := ("Event66");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event55",theAuditEventData);
  // Here's where the additional go round the loop has been inserted
  previousEvents := ("Event55");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event71",theAuditEventData);
  previousEvents := ("Event71");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event72",theAuditEventData);
  previousEvents := ("Event72");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event73",theAuditEventData);
  // End of extra go around the loop.
  //
  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
  // An instance fork starts here - with 3 instances of CS1-L
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
  // Here's where one of the expected instance branches has been commented out for testing purposes
  //previousEvents := ("Event61");
  //theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  //acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
  //
  // ...and the INSTANCE fork merges here at the CS1-M event
  previousEvents := empty & "Event62" & "Event56";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
  // At this point an unexpected occurrence of event occurrence 'CS1-N' follows the previous event - which will cause an
  // XOR violation because the XOR branches should be exclusive.
  previousEvents := ("Event14");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-N","ComplexSunnyDay1",previousEvents,"Event69",theAuditEventData);
  //
  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
  // events up to the end point in the second section of the sequence.
  //
  previousEvents := empty & "Event73" & "Event14";
  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
  previousEvents := ("Event15");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
  //
  // ...and now the events for section 4 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
  previousEvents := ("Event20");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
  //
  // ...and now the events for section 5 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
  previousEvents := ("Event64");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
  previousEvents := ("Event30");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
  previousEvents := ("Event32");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
  previousEvents := ("Event45");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
  //
  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
  previousEvents := ("Event21");
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
  //
  // Each instance of event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
  // Further, an instance fork starts here - with 3 instances of CS1-L (should be 2 to be compliant with sequence spec - Event78 & Event79 added)
  previousEvents := ("Event24"); 
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
  previousEvents := ("Event39");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event46",theAuditEventData);
  previousEvents := ("Event46");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event47",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event78",theAuditEventData);
  previousEvents := ("Event78");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event79",theAuditEventData);
  //
  // ...and finally the events for section 6 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
  previousEvents := ("Event42");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
  // Here's where the additional go round the loop has been inserted
  previousEvents := ("Event31");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event35",theAuditEventData);
  previousEvents := ("Event35");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
  previousEvents := ("Event22");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
  //
  // Process all the events on the event queue - note that the job 'ComplexSunnyDay1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the 'ComplexSunnyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
  Test::service_event_queue();
  //
  // ...and now check that the state of the model is as expected.
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  theDynamicControlDefinitions := theJobs -> R35 -> R29;
  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
  theUsagesOfTransientInvariant := theAuditEvents -> R23;
  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
    end if;
  end loop;
  //
  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 49, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theDynamicControls'length = 5, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 9, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 7, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
  //
  theJob := find_only Job(jobID = "GenToken1");
  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
  //
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '132efe53-784a-49d9-9382-2c880a0e6214' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test105ComplexSequence_RainyDay6_InvalidExtraJobInvariantValueUsedInLoop () is
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
previousEvents : sequence of string;
empty : sequence of string;
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of AuditEvent;
theDynamicControls : set of instance of DynamicControl;
theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
theUsagesOfTransientInvariant : set of instance of TransientInvariant;
theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
logMessage : string;

begin
  // This test delivers events for two jobs:
  //    (1) 'AuthGen-0001' of type 'GenerateAuthorisationTokenJob'
  //    (2) 'ProtProc-0001' of type 'ComplexJob'
  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
  //
  // This test delivers events compliant with the two job definitions (as defined in the scenario 'InitComplexEventSequence1Definition'.
  //
  // This test is designed to check whether the Sequence Verification domain can detect when an event instance within a loop uses an invalid
  // value of an ExtraJob Invariant (even though it has the correct name).
  //
  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
  previousEvents := empty;
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
  previousEvents := ("Event97");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
  previousEvents := ("Event98");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
  //
  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
  previousEvents := ("Event99");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
  //
  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "GenToken1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'GenToken1' being fired.
  Test::service_event_queue();
  //
  //
  // Now deliver a set of events for the 'ComplexJob' - this job consists of a single but highly complex sequence which,
  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
  // various topologies, constraints and invariants.
  //
  // Starting with the initial 3 events of section 1 of the complex sequence...
  previousEvents := empty;
  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
  previousEvents := ("Event25");
  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
  previousEvents := ("Event59");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
  //
  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
  previousEvents := ("Event60");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
  previousEvents := ("Event11");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
  previousEvents := ("Event17");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
  previousEvents := ("Event29");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
  previousEvents := ("Event33");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
  previousEvents := ("Event41");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
  // This next event in the loop uses an incorrect value for its usage of an Extra Job Invariant
  previousEvents := ("Event63");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A2");
  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
  previousEvents := ("Event19");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
  previousEvents := ("Event23");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
  previousEvents := ("Event16");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
  previousEvents := ("Event27");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
  previousEvents := ("Event70");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
  previousEvents := ("Event18");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
  previousEvents := ("Event36");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
  previousEvents := ("Event66");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event55",theAuditEventData);
  //
  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
  // An instance fork starts here - with 3 instances of CS1-L
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
  //
  // ...and the INSTANCE fork merges here at the CS1-M event
  previousEvents := empty & "Event62" & "Event56" & "Event57";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
  //
  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
  // events up to the end point in the second section of the sequence.
  //
  previousEvents := empty & "Event55" & "Event14";
  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
  previousEvents := ("Event15");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
  //
  // ...and now the events for section 4 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
  previousEvents := ("Event20");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
  //
  // ...and now the events for section 5 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
  previousEvents := ("Event64");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
  previousEvents := ("Event30");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
  previousEvents := ("Event32");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
  previousEvents := ("Event45");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
  //
  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
  previousEvents := ("Event21");
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
  //
  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
  previousEvents := ("Event24"); 
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
  //
  previousEvents := ("Event39");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event46",theAuditEventData);
  previousEvents := ("Event46");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event47",theAuditEventData);
  //
  // ...and finally the events for section 6 of the sequence...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
  previousEvents := ("Event42");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
  previousEvents := ("Event31");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
  previousEvents := ("Event22");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
  //
  // Process all the events on the event queue - note that the job 'ComplexSunnyDay1' should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the 'ComplexSunnyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
  Test::service_event_queue();
  //
  // ...and now check that the state of the model is as expected.
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  theDynamicControlDefinitions := theJobs -> R35 -> R29;
  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
  theUsagesOfTransientInvariant := theAuditEvents -> R23;
  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
    end if;
  end loop;
  //
  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 46, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theDynamicControls'length = 5, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 10, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 8, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
  //
  theJob := find_only Job(jobID = "GenToken1");
  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
  //
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

