//! ACTIVITY BEGIN. '6585bd90-dc28-446f-904e-d050cb950c52' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test70ComplexSequence_SunnyDay1 () is
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
previousEvents : sequence of string;
empty : sequence of string;
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of AuditEvent;
theDynamicControls : set of instance of DynamicControl;
theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
logMessage : string;

begin
  // This test delivers events for each branch for the complex sequence defined in InitComplexEventSequence1Definition in an
  // order that is acceptable (remember that the ordering of events in different branches are independent). In this test case
  // the all the events for a given branch are delivered before the events for the next branch are delivered - until all events
  // for all branches have been delivered. All AND branches are taken. 
  // NOTE: Some events will reference previousEvents that have not been delivered, but will arrive later.
  //
  // Starting with the initial 3 events in sequence...
  previousEvents := empty;
  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2)
  theAuditEventData := (aeDataKindEnum.LOOPCONSTRAINT, "LC3", "2");
  //theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
  previousEvents := ("Event25");
  // Event occurrence 'CS1-B,1' in the sequence is the source of loop constraint 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3)
  theAuditEventData := (aeDataKindEnum.LOOPCONSTRAINT, "LC1", "3");
  //theAuditEventData := (aeDataKindEnum.LOOPCONSTRAINT, "LC1", "3") & (aeDataKindEnum.LOOPCONSTRAINT, "LC2", "2");
  //theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
  previousEvents := ("Event59");
  // Event occurrence 'CS1-C,1' in the sequence is the source of branch constraint 'BC1' (which constrains the instance forking at event occurrence 'CS1-K,1' to 3)
  theAuditEventData := (aeDataKindEnum.BRANCHCONSTRAINT, "BC1", "3");
  //theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
  //
  // ...then the events for the first branch (up until Event55 which is just before the Type Merge at Event15)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
  previousEvents := ("Event60");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
  previousEvents := ("Event11");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
  previousEvents := ("Event17");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
  previousEvents := ("Event29");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
  previousEvents := ("Event33");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
  previousEvents := ("Event41");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
  previousEvents := ("Event63");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
  previousEvents := ("Event19");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
  previousEvents := ("Event23");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
  previousEvents := ("Event16");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
  previousEvents := ("Event27");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
  previousEvents := ("Event70");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
  previousEvents := ("Event18");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
  previousEvents := ("Event36");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
  previousEvents := ("Event66");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event55",theAuditEventData);
  //
  // ...and now the events for the second branch (which includes an instance fork and merge)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
  // An instance fork starts here - with 3 instances of CS1-L
  previousEvents := ("Event61");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
  //
  // ...and the INSTANCE fork merges here at the CS1-M event
  previousEvents := empty & "Event62" & "Event56" & "Event57";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
  //
  // At this point this second branch merges with the first branch at Event15, so deliver the remaining events up to the end point
  //
  previousEvents := empty & "Event55" & "Event14";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
  previousEvents := ("Event15");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
  //
  // ...and now the events for the third branch...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
  previousEvents := ("Event20");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
  //
  // ...and now the single event for the fourth branch...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246815","ProtProc-0001","CS1-R","ComplexSunnyDay1",previousEvents,"Event26",theAuditEventData);
  //
  // ...and now the events for the fifth branch...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
  previousEvents := ("Event64");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
  previousEvents := ("Event30");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
  previousEvents := ("Event32");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
  previousEvents := ("Event45");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
  previousEvents := ("Event21");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
  previousEvents := ("Event39");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
  //
  // ...and finally, the events for the sixth branch.
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
  previousEvents := ("Event42");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
  previousEvents := ("Event31");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
  previousEvents := ("Event22");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
  //
  //
  // Process all the events on the event queue - note that the Job ComplexSunnyDay1 should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the ProtProc-0001 job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
  Test::service_event_queue();
  //
  // ...and now check that the state of the model is as expected.
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  theDynamicControlDefinitions := theJobs -> R35 -> R29;
  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 41, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theDynamicControls'length = 3, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 2, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 1, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;
  //
end service;
//
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '10d28c1d-4ee7-4f07-ac7b-0900ec62522e' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test70ComplexSequence_SunnyDay2 () is
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
previousEvents : sequence of string;
empty : sequence of string;
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of AuditEvent;
theDynamicControls : set of instance of DynamicControl;
theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
logMessage : string;

begin
  // This test delivers events for each branch for the complex sequence defined in InitComplexEventSequence1Definition in an
  // order that is acceptable (remember that the ordering of events in different branches are independent). In this test case
  // the all the events for a given branch are delivered before the events for the next branch are delivered - until all events
  // for all branches have been delivered. All AND branches are taken. 
  // NOTE: Some events will reference previousEvents that have not been delivered, but will arrive later.
  //
  // Starting with the initial 3 events in sequence...
  previousEvents := empty;
  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2)
  theAuditEventData := (aeDataKindEnum.LOOPCONSTRAINT, "LC3", "2");
  //theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
  previousEvents := ("Event25");
  // Event occurrence 'CS1-B,1' in the sequence is the source of loop constraint 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3)
  theAuditEventData := (aeDataKindEnum.LOOPCONSTRAINT, "LC1", "3");
  //theAuditEventData := (aeDataKindEnum.LOOPCONSTRAINT, "LC1", "3") & (aeDataKindEnum.LOOPCONSTRAINT, "LC2", "2");
  //theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
  previousEvents := ("Event59");
  // Event occurrence 'CS1-C,1' in the sequence is the source of branch constraint 'BC1' (which constrains the instance forking at event occurrence 'CS1-K,1' to 3)
  theAuditEventData := (aeDataKindEnum.BRANCHCONSTRAINT, "BC1", "3");
  //theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
  //
  // ...then the events for the first branch (up until Event55 which is just before the Type Merge at Event15)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
  previousEvents := ("Event60");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
  previousEvents := ("Event11");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
  previousEvents := ("Event17");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
  previousEvents := ("Event29");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
  previousEvents := ("Event33");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
  previousEvents := ("Event41");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
  previousEvents := ("Event63");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
  previousEvents := ("Event19");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
  previousEvents := ("Event23");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
  previousEvents := ("Event16");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
  previousEvents := ("Event27");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
  previousEvents := ("Event70");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
  previousEvents := ("Event18");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
  previousEvents := ("Event36");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
  previousEvents := ("Event66");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event55",theAuditEventData);
  //
  // ...and now the events for the second branch (which includes an instance fork and merge)...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
  // An instance fork starts here - with 3 instances of CS1-L
  previousEvents := ("Event61");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
  previousEvents := ("Event61");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
  //
  // ...and the INSTANCE fork merges here at the CS1-M event
  previousEvents := empty & "Event62" & "Event56" & "Event57";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
  //
  // At this point this second branch merges with the first branch at Event15, so deliver the remaining events up to the end point
  //
  previousEvents := empty & "Event55" & "Event14";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
  previousEvents := ("Event15");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
  //
  // ...and now the events for the third branch...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
  previousEvents := ("Event20");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
  //
  // ...and now the single event for the fourth branch...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246815","ProtProc-0001","CS1-R","ComplexSunnyDay1",previousEvents,"Event26",theAuditEventData);
  //
  // ...and now the events for the fifth branch...
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
  previousEvents := ("Event64");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
  previousEvents := ("Event30");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
  previousEvents := ("Event32");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
  previousEvents := ("Event45");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
  previousEvents := ("Event21");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
  previousEvents := ("Event24");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
  previousEvents := ("Event39");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
  //
  // ...and finally, the events for the sixth branch.
  previousEvents := ("Event13");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
  previousEvents := ("Event42");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
  previousEvents := ("Event31");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
  previousEvents := ("Event22");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
  //
  //
  // Process all the events on the event queue - note that the Job ComplexSunnyDay1 should be in the 'CheckingSequenceCompletion' state after this.
  Test::service_event_queue();
  //
  // Fire the jobEventTimer to move the ProtProc-0001 job (which thinks it's complete) through to the state for checking constraints & invariants
  theJob := find_only Job(jobID = "ComplexSunnyDay1");
  Test::fire_timer(theJob.jobEventTimer);
  //
  // Service the event queue again to process any events placed on queue resulting from  
  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
  Test::service_event_queue();
  //
  // ...and now check that the state of the model is as expected.
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  theDynamicControlDefinitions := theJobs -> R35 -> R29;
  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 41, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theDynamicControls'length = 3, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 2, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 1, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;
  //
end service;
//
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

