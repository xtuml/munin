// BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

within SequenceVerificationDataCentric::SVDCdomain::AESequenceDC is

	package tests_pdf is
		@function_num(7);
		function Test100ComplexSequence_RainyDay1_XORconstraintViolation() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theSourceDynamicControls : set of instance of DynamicControl;
			theUsedDynamicControls : set of instance of DynamicControl;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexRainyDay1' of type 'ComplexJob1'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test is designed to check whether the Sequence Verification domain can detect when an XOR branch is taken as well
			  // as other branches at the same fork point - in this case at Event13.
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexRainyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexRainyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event41",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event63",theAuditEventData);
			  previousEvents := ("Event63");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event19",theAuditEventData);
			  previousEvents := ("Event19");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event55",theAuditEventData);
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexRainyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS1-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  //theAuditEventData := emptyAuditEventData;
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event56",theAuditEventData);
			  previousEvents := ("Event61");
			  //theAuditEventData := emptyAuditEventData;
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56" & "Event57";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexRainyDay1",previousEvents,"Event14",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event55" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexRainyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexRainyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexRainyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexRainyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event39",theAuditEventData);
			  //
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event47",theAuditEventData);
			  //
			  // ...and now the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event31",theAuditEventData);
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // ...and finally the events for section 7 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246815","ProtProc-0001","CS1-R","ComplexRainyDay1",previousEvents,"Event26",theAuditEventData);
			  //
			  //
			  // Process all the events on the event queue - note that the job 'ComplexRainyDay1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexRainyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexRainyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theSourceDynamicControls := theAuditEvents -> R37;
			  theUsedDynamicControls := theAuditEvents -> R36;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 47, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 7, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theSourceDynamicControls'length = 5, "Wrong number of dynamic controls employed as sources were created: " & (theSourceDynamicControls'length)'image);
			  Assertions::assertTrue(theUsedDynamicControls'length = 5, "Wrong number of dynamic controls employed as usages were created: " & (theUsedDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 10, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 8, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  theJob := find_only Job(jobID = "GenToken1");
			  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
			  
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop; 
			  //
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(6);
		function Test101ComplexSequence_RainyDay2_InstanceForkViolation() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theSourceDynamicControls : set of instance of DynamicControl;
			theUsedDynamicControls : set of instance of DynamicControl;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexRainyDay1' of type 'ComplexJob1'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test is designed to check whether the Sequence Verification domain can detect the incorrect number of
			  // instance forks being taken at CS1-K,1 (Event61) and CS1-F,3 (Event2) of Job 'ComplexSequence'. This test checks that the
			  // BRANCHCOUNT controls are adhered to correctly and result in a job failure of not.
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexRainyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexRainyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event41",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event63",theAuditEventData);
			  previousEvents := ("Event63");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event19",theAuditEventData);
			  previousEvents := ("Event19");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event55",theAuditEventData);
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexRainyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 2 instances of CS1-L (should be 3 to be compliant with sequence spec - Event57 commented out)
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event56",theAuditEventData);
			  // Here's where one of the expected instance branches has been commented out for testing purposes
			  //previousEvents := ("Event61");
			  //theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  //acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexRainyDay1",previousEvents,"Event14",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event55" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexRainyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexRainyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexRainyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexRainyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Each instance of event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  // Further, an instance fork starts here - with 3 instances of CS1-L (should be 2 to be compliant with sequence spec - Event78 & Event79 added)
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event39",theAuditEventData);
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event47",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event78",theAuditEventData);
			  previousEvents := ("Event78");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event79",theAuditEventData);
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event31",theAuditEventData);
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the job 'ComplexRainyDay1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexRainyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexRainyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theSourceDynamicControls := theAuditEvents -> R37;
			  theUsedDynamicControls := theAuditEvents -> R36;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 47, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 7, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theSourceDynamicControls'length = 5, "Wrong number of dynamic controls employed as sources were created: " & (theSourceDynamicControls'length)'image);
			  Assertions::assertTrue(theUsedDynamicControls'length = 5, "Wrong number of dynamic controls employed as usages were created: " & (theUsedDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 10, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 8, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  theJob := find_only Job(jobID = "GenToken1");
			  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop; 
			  //
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(6);
		function Test102ComplexSequence_RainyDay3_LOOPCOUNTviolation() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theSourceDynamicControls : set of instance of DynamicControl;
			theUsedDynamicControls : set of instance of DynamicControl;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexRainyDay1' of type 'ComplexJob1'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test is designed to test whether the Sequence Verification domain can detect the incorrect number of times a loop 
			  // is executed within a sequence - specifically for the LOOPCOUNT controls within Job 'ComplexSequence':
			  //     (1) Name = LC1 used at event occurrence 'CS1-E,1'
			  //     (2) Name = LC2 used at event occurrence 'CS1-D,2'
			  //     (3) Name = LC3 used at event occurrence 'CS1-S,1'
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexRainyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexRainyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event41",theAuditEventData);
			  // Here's where one expected lap round the loop has been commented out for testing purposes
			  //previousEvents := ("Event41");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event63",theAuditEventData);
			  //previousEvents := ("Event63");
			  //theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  //acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event19",theAuditEventData);
			  //previousEvents := ("Event19");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event55",theAuditEventData);
			  // Here's where the additional go round the loop has been inserted
			  previousEvents := ("Event55");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event71",theAuditEventData);
			  previousEvents := ("Event71");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event72",theAuditEventData);
			  previousEvents := ("Event72");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event73",theAuditEventData);
			  // End of extra go around the loop.
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexRainyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS1-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event56",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56" & "Event57";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexRainyDay1",previousEvents,"Event14",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event73" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexRainyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexRainyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexRainyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexRainyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event32",theAuditEventData);
			  // Here's where one expected lap round the loop has been commented out for testing purposes
			  //previousEvents := ("Event32");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event45",theAuditEventData);
			  //previousEvents := ("Event45");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event32");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event39",theAuditEventData);
			  //
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event47",theAuditEventData);
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event31",theAuditEventData);
			  // Here's where the additional go round the loop has been inserted
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event35",theAuditEventData);
			  previousEvents := ("Event35");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the job 'ComplexRainyDay1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexRainyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexRainyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theSourceDynamicControls := theAuditEvents -> R37;
			  theUsedDynamicControls := theAuditEvents -> R36;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 21, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 4, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theSourceDynamicControls'length = 4, "Wrong number of dynamic controls employed as sources were created: " & (theSourceDynamicControls'length)'image);
			  Assertions::assertTrue(theUsedDynamicControls'length = 2, "Wrong number of dynamic controls employed as usages were created: " & (theUsedDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 1, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 1, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 3, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 2, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  theJob := find_only Job(jobID = "GenToken1");
			  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop; 
			  //
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(6);
		function Test103ComplexSequence_RainyDay4_LOOPCOUNTandBRANCHCOUNTviolation() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theSourceDynamicControls : set of instance of DynamicControl;
			theUsedDynamicControls : set of instance of DynamicControl;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexRainyDay1' of type 'ComplexJob1'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test is designed to test whether the Sequence Verification domain can detect when BOTH (a) an incorrect number of times a loop 
			  // is executed within a sequence AND (b) an incorrect number of instance forks are taken within a sequence.
			  // Specifically, the tests are for the LOOPCOUNT controls within Job 'ComplexSequence':
			  //     (1) Name = LC1 used at event occurrence 'CS1-E,1'
			  //     (2) Name = LC2 used at event occurrence 'CS1-D,2'
			  //     (3) Name = LC3 used at event occurrence 'CS1-S,1'
			  //
			  // ...and for testing the BRANCHCOUNT controls within the same job, namely:
			  //     (1) Name = BC1 used at event occurrence 'CS1-K,1'
			  //     (2) Name = BC2 used at event occurrence 'CS1-F,3'
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexRainyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexRainyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event41",theAuditEventData);
			  // Here's where one expected lap round the loop has been commented out for testing purposes
			  //previousEvents := ("Event41");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event63",theAuditEventData);
			  //previousEvents := ("Event63");
			  //theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  //acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event19",theAuditEventData);
			  //previousEvents := ("Event19");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event55",theAuditEventData);
			  // Here's where the additional go round the loop has been inserted
			  //previousEvents := ("Event55");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event71",theAuditEventData);
			  //previousEvents := ("Event71");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event72",theAuditEventData);
			  //previousEvents := ("Event72");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event73",theAuditEventData);
			  // End of extra go around the loop.
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexRainyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS1-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event56",theAuditEventData);
			  // Here's where one of the expected instance branches has been commented out for testing purposes
			  //previousEvents := ("Event61");
			  //theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  //acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexRainyDay1",previousEvents,"Event14",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event55" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexRainyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexRainyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexRainyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexRainyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Each instance of event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  // Further, an instance fork starts here - with 3 instances of CS1-L (should be 2 to be compliant with sequence spec - Event78 & Event79 added)
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event39",theAuditEventData);
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event47",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event78",theAuditEventData);
			  previousEvents := ("Event78");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event79",theAuditEventData);
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event31",theAuditEventData);
			  // Here's where the additional go round the loop has been inserted
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event35",theAuditEventData);
			  previousEvents := ("Event35");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the job 'ComplexRainyDay1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexRainyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexRainyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theSourceDynamicControls := theAuditEvents -> R37;
			  theUsedDynamicControls := theAuditEvents -> R36;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 43, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 7, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theSourceDynamicControls'length = 5, "Wrong number of dynamic controls employed as sources were created: " & (theSourceDynamicControls'length)'image);
			  Assertions::assertTrue(theUsedDynamicControls'length = 5, "Wrong number of dynamic controls employed as usages were created: " & (theUsedDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 9, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 7, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  theJob := find_only Job(jobID = "GenToken1");
			  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop; 
			  //
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(6);
		function Test104ComplexSequence_RainyDay5_LOOPCOUNTandBRANCHCOUNTandXORviolation() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theSourceDynamicControls : set of instance of DynamicControl;
			theUsedDynamicControls : set of instance of DynamicControl;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexRainyDay1' of type 'ComplexJob1'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test is designed to test whether the Sequence Verification domain can detect when :
			  //    (a) an incorrect number of times a loop is executed within a sequence
			  //    AND
			  //    (b) an incorrect number of instance forks are taken within a sequence.
			  //    AND
			  //    (c) situations where multiple branches are taken when an XOR constraint has been specified.
			  //
			  // Specifically, the tests are for the LOOPCOUNT controls within Job 'ComplexSequence':
			  //     (1) Name = LC1 used at event occurrence 'CS1-E,1'
			  //     (2) Name = LC2 used at event occurrence 'CS1-D,2'
			  //     (3) Name = LC3 used at event occurrence 'CS1-S,1'
			  //
			  // ...and for testing the BRANCHCOUNT controls within the same job, namely:
			  //     (1) Name = BC1 used at event occurrence 'CS1-K,1'
			  //     (2) Name = BC2 used at event occurrence 'CS1-F,3'
			  //
			  // ...and an XOR constraint violation after Event14.
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexRainyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexRainyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event41",theAuditEventData);
			  // Here's where one expected lap round the loop has been commented out for testing purposes
			  //previousEvents := ("Event41");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event63",theAuditEventData);
			  //previousEvents := ("Event63");
			  //theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  //acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event19",theAuditEventData);
			  //previousEvents := ("Event19");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event55",theAuditEventData);
			  // Here's where the additional go round the loop has been inserted
			  //previousEvents := ("Event55");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event71",theAuditEventData);
			  //previousEvents := ("Event71");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event72",theAuditEventData);
			  //previousEvents := ("Event72");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event73",theAuditEventData);
			  // End of extra go around the loop.
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexRainyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS1-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event56",theAuditEventData);
			  // Here's where one of the expected instance branches has been commented out for testing purposes
			  //previousEvents := ("Event61");
			  //theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  //acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexRainyDay1",previousEvents,"Event14",theAuditEventData);
			  // At this point an unexpected occurrence of event occurrence 'CS1-N' follows the previous event - which will cause an
			  // XOR violation because the XOR branches should be exclusive.
			  previousEvents := ("Event14");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-N","ComplexRainyDay1",previousEvents,"Event69",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event55" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexRainyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexRainyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexRainyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexRainyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Each instance of event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  // Further, an instance fork starts here - with 3 instances of CS1-L (should be 2 to be compliant with sequence spec - Event78 & Event79 added)
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event39",theAuditEventData);
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event47",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event78",theAuditEventData);
			  previousEvents := ("Event78");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event79",theAuditEventData);
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event31",theAuditEventData);
			  // Here's where the additional go round the loop has been inserted
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event35",theAuditEventData);
			  previousEvents := ("Event35");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the job 'ComplexRainyDay1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexRainyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexRainyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theSourceDynamicControls := theAuditEvents -> R37;
			  theUsedDynamicControls := theAuditEvents -> R36;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 44, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 7, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theSourceDynamicControls'length = 5, "Wrong number of dynamic controls employed as sources were created: " & (theSourceDynamicControls'length)'image);
			  Assertions::assertTrue(theUsedDynamicControls'length = 5, "Wrong number of dynamic controls employed as usages were created: " & (theUsedDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 9, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 7, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  theJob := find_only Job(jobID = "GenToken1");
			  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop; 
			  //
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(6);
		function Test105ComplexSequence_RainyDay6_InvalidExtraJobInvariantValueUsedInLoop() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theSourceDynamicControls : set of instance of DynamicControl;
			theUsedDynamicControls : set of instance of DynamicControl;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexRainyDay1' of type 'ComplexJob1'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test delivers events compliant with the two job definitions (as defined in the scenario 'InitComplexEventSequence1Definition'.
			  //
			  // This test is designed to check whether the Sequence Verification domain can detect when an event instance within a loop uses an invalid
			  // VALUE of an ExtraJob Invariant (even though it has the correct name).
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexRainyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexRainyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event41",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event63",theAuditEventData);
			  // This next event in the loop uses an incorrect value for its usage of an Extra Job Invariant
			  previousEvents := ("Event63");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A2");
			  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event19",theAuditEventData);
			  previousEvents := ("Event19");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event55",theAuditEventData);
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexRainyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS1-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event56",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56" & "Event57";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexRainyDay1",previousEvents,"Event14",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event55" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexRainyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexRainyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexRainyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexRainyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event39",theAuditEventData);
			  //
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event47",theAuditEventData);
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event31",theAuditEventData);
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the job 'ComplexRainyDay1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexRainyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexRainyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theSourceDynamicControls := theAuditEvents -> R37;
			  theUsedDynamicControls := theAuditEvents -> R36;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 46, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 7, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theSourceDynamicControls'length = 5, "Wrong number of dynamic controls employed as sources were created: " & (theSourceDynamicControls'length)'image);
			  Assertions::assertTrue(theUsedDynamicControls'length = 5, "Wrong number of dynamic controls employed as usages were created: " & (theUsedDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 10, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 8, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  theJob := find_only Job(jobID = "GenToken1");
			  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop; 
			  //
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(6);
		function Test106ComplexSequence_RainyDay7_InvalidExtraJobInvariantValueUsedInInstanceFork() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theSourceDynamicControls : set of instance of DynamicControl;
			theUsedDynamicControls : set of instance of DynamicControl;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexRainyDay1' of type 'ComplexJob1'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test delivers events compliant with the two job definitions (as defined in the scenario 'InitComplexEventSequence1Definition'.
			  //
			  // This test is designed to check whether the Sequence Verification domain can detect when an event instance within an instance fork uses an invalid
			  // VALUE of an ExtraJob Invariant (even though it has the correct name).
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexRainyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexRainyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event41",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event63",theAuditEventData);
			  previousEvents := ("Event63");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event19",theAuditEventData);
			  previousEvents := ("Event19");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event55",theAuditEventData);
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexRainyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS1-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event56",theAuditEventData);
			  // This next event in the instance fork uses an incorrect value for its usage of an Extra Job Invariant
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A2");
			  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56" & "Event57";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexRainyDay1",previousEvents,"Event14",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event55" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexRainyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexRainyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexRainyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexRainyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event39",theAuditEventData);
			  //
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event47",theAuditEventData);
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event31",theAuditEventData);
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the job 'ComplexRainyDay1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexRainyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexRainyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theSourceDynamicControls := theAuditEvents -> R37;
			  theUsedDynamicControls := theAuditEvents -> R36;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 46, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 7, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theSourceDynamicControls'length = 5, "Wrong number of dynamic controls employed as sources were created: " & (theSourceDynamicControls'length)'image);
			  Assertions::assertTrue(theUsedDynamicControls'length = 5, "Wrong number of dynamic controls employed as usages were created: " & (theUsedDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 10, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 8, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  theJob := find_only Job(jobID = "GenToken1");
			  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop; 
			  //
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(6);
		function Test107ComplexSequence_RainyDay8_InvalidExtraJobInvariantNameUsedInLoop() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theSourceDynamicControls : set of instance of DynamicControl;
			theUsedDynamicControls : set of instance of DynamicControl;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexRainyDay1' of type 'ComplexJob1'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test delivers events compliant with the two job definitions (as defined in the scenario 'InitComplexEventSequence1Definition'.
			  //
			  // This test is designed to check whether the Sequence Verification domain can detect when an event instance within a loop uses an invalid
			  // NAME of an ExtraJob Invariant (even though it has the correct value).
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexRainyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexRainyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event41",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event63",theAuditEventData);
			  // This next event in the loop uses an incorrect value for its usage of an Extra Job Invariant
			  previousEvents := ("Event63");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_B", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event19",theAuditEventData);
			  previousEvents := ("Event19");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event55",theAuditEventData);
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexRainyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS1-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event56",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56" & "Event57";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexRainyDay1",previousEvents,"Event14",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event55" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexRainyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexRainyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexRainyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexRainyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event39",theAuditEventData);
			  //
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event47",theAuditEventData);
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event31",theAuditEventData);
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the job 'ComplexRainyDay1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexRainyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexRainyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theSourceDynamicControls := theAuditEvents -> R37;
			  theUsedDynamicControls := theAuditEvents -> R36;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 15, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 4, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theSourceDynamicControls'length = 4, "Wrong number of dynamic controls employed as sources were created: " & (theSourceDynamicControls'length)'image);
			  Assertions::assertTrue(theUsedDynamicControls'length = 1, "Wrong number of dynamic controls employed as usages were created: " & (theUsedDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 1, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 1, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 3, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 2, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  theJob := find_only Job(jobID = "GenToken1");
			  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop; 
			  //
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(6);
		function Test108ComplexSequence_RainyDay9_InvalidExtraJobInvariantNameUsedInInstanceFork() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theSourceDynamicControls : set of instance of DynamicControl;
			theUsedDynamicControls : set of instance of DynamicControl;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexRainyDay1' of type 'ComplexJob1'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test delivers events compliant with the two job definitions (as defined in the scenario 'InitComplexEventSequence1Definition'.
			  //
			  // This test is designed to check whether the Sequence Verification domain can detect when an event instance within an instance fork uses an invalid
			  // VALUE of an ExtraJob Invariant (even though it has the correct name).
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexRainyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexRainyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event41",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event63",theAuditEventData);
			  previousEvents := ("Event63");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event19",theAuditEventData);
			  previousEvents := ("Event19");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event55",theAuditEventData);
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexRainyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS1-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event56",theAuditEventData);
			  // This next event in the instance fork uses an incorrect value for its usage of an Extra Job Invariant
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_B", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56" & "Event57";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexRainyDay1",previousEvents,"Event14",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event55" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexRainyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexRainyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexRainyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexRainyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event39",theAuditEventData);
			  //
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event47",theAuditEventData);
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event31",theAuditEventData);
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the job 'ComplexRainyDay1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexRainyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexRainyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theSourceDynamicControls := theAuditEvents -> R37;
			  theUsedDynamicControls := theAuditEvents -> R36;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 27, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 5, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theSourceDynamicControls'length = 4, "Wrong number of dynamic controls employed as sources were created: " & (theSourceDynamicControls'length)'image);
			  Assertions::assertTrue(theUsedDynamicControls'length = 3, "Wrong number of dynamic controls employed as usages were created: " & (theUsedDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 1, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 1, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 6, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 5, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  theJob := find_only Job(jobID = "GenToken1");
			  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop; 
			  //
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(6);
		function Test109ComplexSequence_RainyDay10_InvalidBreakOutOfLoop() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theSourceDynamicControls : set of instance of DynamicControl;
			theUsedDynamicControls : set of instance of DynamicControl;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // *******************************************************************************
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexRainyDay1' of type 'ComplexJob1'
			  //
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // The only difference between this test and Test72ComplexSequence_SunnyDay1 is that the second of two loops in section 2 of the
			  // sequence breaks out of the loop earlier than defined (after Event3)on the 2nd occurrence of event 'D,2') - this is an invalid
			  // point in the loop for the break-out to occur and should result in an error being reported.
			  // *******************************************************************************
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexRainyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexRainyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event36 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event41",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event63",theAuditEventData);
			  previousEvents := ("Event63");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event19",theAuditEventData);
			  previousEvents := ("Event19");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event36",theAuditEventData);
			  // This where the sequence differs from Test72 - with the break-out from the loop occurring after Event36 (instead of Event66)
			  //previousEvents := ("Event36");
			  //theAuditEventData := emptyAuditEventData;
			  //acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-T","ComplexRainyDay1",previousEvents,"Event77",theAuditEventData);
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexRainyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS1-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  //theAuditEventData := emptyAuditEventData;
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event56",theAuditEventData);
			  previousEvents := ("Event61");
			  //theAuditEventData := emptyAuditEventData;
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56" & "Event57";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexRainyDay1",previousEvents,"Event14",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event77" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexRainyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexRainyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexRainyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexRainyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event39",theAuditEventData);
			  //
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event47",theAuditEventData);
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event31",theAuditEventData);
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the job 'ComplexRainyDay1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexRainyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexRainyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theSourceDynamicControls := theAuditEvents -> R37;
			  theUsedDynamicControls := theAuditEvents -> R36;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 21, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 4, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theSourceDynamicControls'length = 4, "Wrong number of dynamic controls employed as sources were created: " & (theSourceDynamicControls'length)'image);
			  Assertions::assertTrue(theUsedDynamicControls'length = 2, "Wrong number of dynamic controls employed as usages were created: " & (theUsedDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 1, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 1, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 4, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 3, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  theJob := find_only Job(jobID = "GenToken1");
			  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop; 
			  //
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(6);
		function Test110ComplexSequence_RainyDay11_InvalidInstanceFork() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theSourceDynamicControls : set of instance of DynamicControl;
			theUsedDynamicControls : set of instance of DynamicControl;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexRainyDay1' of type 'ComplexJob1'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test delivers events compliant with the two job definitions (as defined in the scenario 'InitComplexEventSequence1Definition'
			  // and does not result in any errors being expected.
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexRainyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexRainyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event41",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event63",theAuditEventData);
			  previousEvents := ("Event63");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event19",theAuditEventData);
			  previousEvents := ("Event19");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event55",theAuditEventData);
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexRainyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS1-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event56",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexRainyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56" & "Event57";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexRainyDay1",previousEvents,"Event14",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event55" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexRainyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexRainyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexRainyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexRainyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexRainyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event39",theAuditEventData);
			  //
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event47",theAuditEventData);
			  //
			  // At this point an invalid instance fork takes place with a repeat of a branch similar to that from Event30 onwards...
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event1",theAuditEventData);
			  previousEvents := ("Event1");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event2",theAuditEventData);
			  previousEvents := ("Event2");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event3",theAuditEventData);
			  previousEvents := ("Event3");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event4",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event4");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexRainyDay1",previousEvents,"Event5",theAuditEventData);
			  //
			  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  previousEvents := ("Event5"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event6",theAuditEventData);
			  //
			  previousEvents := ("Event6");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event7",theAuditEventData);
			  previousEvents := ("Event5");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event8",theAuditEventData);
			  previousEvents := ("Event8");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexRainyDay1",previousEvents,"Event9",theAuditEventData);
			  // End of additional invalid instance fork
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexRainyDay1",previousEvents,"Event31",theAuditEventData);
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexRainyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexRainyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the job 'ComplexRainyDay1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexRainyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexRainyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theSourceDynamicControls := theAuditEvents -> R37;
			  theUsedDynamicControls := theAuditEvents -> R36;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs were created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences were created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 43, "Wrong number of audit events were created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 7, "Wrong number of dynamic controls were created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theSourceDynamicControls'length = 5, "Wrong number of dynamic controls employed as sources were created: " & (theSourceDynamicControls'length)'image);
			  Assertions::assertTrue(theUsedDynamicControls'length = 4, "Wrong number of dynamic controls employed as usages were created: " & (theUsedDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions were created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions were created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions were created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants were created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 10, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 8, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  theJob := find_only Job(jobID = "GenToken1");
			  Assertions::assertTrue(theJob.jobCompleted, "ERROR - Job is incomplete: " & theJob.jobID);
			  theJob := find_only Job(jobID = "ComplexRainyDay1");
			  Assertions::assertTrue(theJob.jobCompleted = false, "ERROR Job has completed : " & theJob.jobID);
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop; 
			  //
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(6);
		function Test70ComplexSequence_SunnyDay1() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexSunnyDay1' of type 'ComplexJob1'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test delivers events compliant with the two job definitions (as defined in the scenario 'InitComplexEventSequence1Definition'
			  // and does not result in any errors being expected.
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,1' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
			  previousEvents := ("Event63");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
			  previousEvents := ("Event19");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event55",theAuditEventData);
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS1-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56" & "Event57";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event55" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
			  //
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event47",theAuditEventData);
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the job 'ComplexSunnyDay1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexSunnyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexSunnyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 46, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 7, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 10, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 8, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  for theJob in theJobs loop
			    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
			    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
			  end loop;
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop;
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(6);
		function Test71ComplexSequence_SunnyDay2() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theIntraJobInvariantUsages : set of instance of TransientInvariant;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // ******************************************************************************
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexSunnyDay1' of type 'ComplexJob1'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test delivers events compliant with the two job definitions (as defined in the scenario 'InitComplexEventSequence1Definition'
			  // and does not result in any errors being expected.
			  //
			  // The only difference between this test and Test70ComplexSequence_SunnyDay1 is that sections 2 & 3 do not merge at Event15 
			  // and section 3 terminates at Event69.
			  // *******************************************************************************
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for section 2 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
			  previousEvents := ("Event63");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
			  previousEvents := ("Event19");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event55",theAuditEventData);
			  previousEvents := ("Event55");
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS1-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56" & "Event57";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
			  previousEvents := ("Event14");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-N","ComplexSunnyDay1",previousEvents,"Event69",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
			  //
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event47",theAuditEventData);
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the Job ComplexSunnyDay1 should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the ProtProc-0001 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexSunnyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theIntraJobInvariantUsages := theAuditEvents -> R23;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 47, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 7, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantUsages'length = 9, "Wrong number of Intra-Job Invariant usages created: " & (theIntraJobInvariantUsages'length)'image);
			  //
			  for theJob in theJobs loop
			    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
			    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
			  end loop;
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop; 
			  
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(6);
		function Test72ComplexSequence_SunnyDay3() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // *******************************************************************************
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken1' of type 'GenerateAuthorisationTokenJob'
			  //    (2) 'ComplexSunnyDay1' of type 'ComplexJob1'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test is designed to check that an invalid break-out of a loop can be detected and reported and result in a failed Job
			  //
			  // The only difference between this test and Test72ComplexSequence_SunnyDay1 is that the second of two loops in section 2 of the
			  // sequence breaks out of the loop after Event66 on the 2nd occurrence of event 'E,2'.
			  // *******************************************************************************
			  //
			  // Firstly, deliver a set of events for the 'GenerateAuthorisationTokenJob'
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","AuthGen-0001","TOK-A","GenToken1",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","AuthGen-0001","TOK-B","GenToken1",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","AuthGen-0001","TOK-C","GenToken1",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOK-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246658","AuthGen-0001","TOK-D","GenToken1",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken1' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken1 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken1' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexJob1' - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  previousEvents := empty;
			  // Event occurrence 'CS1-A,1' in the sequence is the source of loop constraint 'LC3' (which constrains the loop involving event occurrence 'CS1-S,1' to 2), and
			  // is also the source of branch constraint 'BC2' (which constrains the number of instance branches at 'CS1-K,2' to 3).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC3", "2") & (aeDataKindEnum.BRANCHCOUNT, "BC2", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS1-A","ComplexSunnyDay1",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event25");
			  // Event occurrence 'CS1-B,1' in the sequence is the source of two loop constraints 'LC1' (which constrains the loop involving event occurrence 'CS1-E,1' to 3) and
			  // 'LC2' (which constrains the loop involving event occurrence 'CS1-D,2' to 2).
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LC1", "3") & (aeDataKindEnum.LOOPCOUNT, "LC2", "2") & (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS1-B","ComplexSunnyDay1",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event41",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246795","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event63",theAuditEventData);
			  previousEvents := ("Event63");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246796","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event19",theAuditEventData);
			  previousEvents := ("Event19");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246797","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS1-T","ComplexSunnyDay1",previousEvents,"Event77",theAuditEventData);
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS1-K","ComplexSunnyDay1",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS1-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  //theAuditEventData := emptyAuditEventData;
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event56",theAuditEventData);
			  previousEvents := ("Event61");
			  //theAuditEventData := emptyAuditEventData;
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246808","ProtProc-0001","CS1-L","ComplexSunnyDay1",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS1-M event
			  previousEvents := empty & "Event62" & "Event56" & "Event57";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS1-M","ComplexSunnyDay1",previousEvents,"Event14",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event77" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantA", "AAAAA");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS1-H","ComplexSunnyDay1",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS1-J","ComplexSunnyDay1",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS1-P","ComplexSunnyDay1",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS1-Q","ComplexSunnyDay1",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS1-C","ComplexSunnyDay1",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS1-F,3' in the sequence is the source of branch constraint 'BC1' (which constrains the number of instance branches at 'CS1-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BC1", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS1-F","ComplexSunnyDay1",previousEvents,"Event24",theAuditEventData);
			  //
			  // Event occurrence 'CS1-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_A'.
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event39",theAuditEventData);
			  //
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_A", "ProtectedFact_A1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS1-G","ComplexSunnyDay1",previousEvents,"Event47",theAuditEventData);
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS1-S","ComplexSunnyDay1",previousEvents,"Event31",theAuditEventData);
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS1-D","ComplexSunnyDay1",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS1-E","ComplexSunnyDay1",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the job 'ComplexSunnyDay1' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexSunnyDay1' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexSunnyDay1");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexSunnyDay1' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 46, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 7, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 3, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 10, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 8, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  for theJob in theJobs loop
			    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
			    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
			  end loop;
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop; 
			  //
			end service;
			//
			//
			@endnoparse
		end function;

		@function_num(1);
		function Test73InstanceForkVariantsWithoutMERGECOUNT_SunnyDay1() is
			@noparse
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			previousEvents : sequence of string;
			empty : sequence of string;
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			
			begin
			  // This test covers 3 Jobs which are all compliant with the Job Definition 'ComplexInstanceForkJob1' but exhibit very 
			  // different topologies. The test is intended to expose this issue which can be solved by mandating the use of 
			  // MERGECOUNT controls to enforce the required topology.
			  //
			  // This test does not reveal any erroneous behaviour of the twin.
			  //
			  // ****************************************************************************************************************
			  // Job 1 of 3
			  // ****************************************************************************************************************
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BCV1", "3");
			  acceptOrderedEvent ("1620920000","Test73","CS2-U","InstanceForkVariant1",previousEvents,"Event1",theAuditEventData);
			  theAuditEventData :=  emptyAuditEventData;
			  previousEvents := ("Event1");
			  acceptOrderedEvent ("1620920001","Test73","CS2-V","InstanceForkVariant1",previousEvents,"Event2",theAuditEventData);
			  previousEvents := ("Event2");
			  acceptOrderedEvent ("1620920002","Test73","CS2-W","InstanceForkVariant1",previousEvents,"Event3",theAuditEventData);
			  previousEvents := ("Event2");
			  acceptOrderedEvent ("1620920003","Test73","CS2-W","InstanceForkVariant1",previousEvents,"Event6",theAuditEventData);
			  previousEvents := ("Event2");
			  acceptOrderedEvent ("1620920004","Test73","CS2-W","InstanceForkVariant1",previousEvents,"Event9",theAuditEventData);
			  previousEvents := empty & "Event3" & "Event6" & "Event9";
			  acceptOrderedEvent ("1620920005","Test73","CS2-X","InstanceForkVariant1",previousEvents,"Event7",theAuditEventData);
			  previousEvents := ("Event7");
			  acceptOrderedEvent ("1620920006","Test73","CS2-Y","InstanceForkVariant1",previousEvents,"Event8",theAuditEventData);
			  previousEvents := ("Event8");
			  acceptOrderedEvent ("1620920007","Test73","CS2-Z","InstanceForkVariant1",previousEvents,"Event12",theAuditEventData);
			  
			  Test::service_event_queue();
			  
			  // ****************************************************************************************************************
			  // Job 2 of 3
			  // ****************************************************************************************************************
			  previousEvents := empty;
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BCV1", "3");
			  acceptOrderedEvent ("1620920000","Test73","CS2-U","InstanceForkVariant2",previousEvents,"Event21",theAuditEventData);
			  theAuditEventData :=  emptyAuditEventData;
			  previousEvents := ("Event21");
			  acceptOrderedEvent ("1620920001","Test73","CS2-V","InstanceForkVariant2",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  acceptOrderedEvent ("1620920002","Test73","CS2-W","InstanceForkVariant2",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  acceptOrderedEvent ("1620920003","Test73","CS2-X","InstanceForkVariant2",previousEvents,"Event24",theAuditEventData);
			  previousEvents := ("Event24");
			  acceptOrderedEvent ("1620920004","Test73","CS2-Y","InstanceForkVariant2",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event22");
			  acceptOrderedEvent ("1620920002","Test73","CS2-W","InstanceForkVariant2",previousEvents,"Event26",theAuditEventData);
			  previousEvents := ("Event26");
			  acceptOrderedEvent ("1620920003","Test73","CS2-X","InstanceForkVariant2",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  acceptOrderedEvent ("1620920004","Test73","CS2-Y","InstanceForkVariant2",previousEvents,"Event28",theAuditEventData);
			  previousEvents := ("Event22");
			  acceptOrderedEvent ("1620920002","Test73","CS2-W","InstanceForkVariant2",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  acceptOrderedEvent ("1620920003","Test73","CS2-X","InstanceForkVariant2",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  acceptOrderedEvent ("1620920004","Test73","CS2-Y","InstanceForkVariant2",previousEvents,"Event31",theAuditEventData);
			  previousEvents := empty & "Event25" & "Event28" & "Event31";
			  acceptOrderedEvent ("1620920005","Test73","CS2-Z","InstanceForkVariant2",previousEvents,"Event32",theAuditEventData);
			  
			  Test::service_event_queue();
			  
			  // ****************************************************************************************************************
			  // Job 3 of 3
			  // ****************************************************************************************************************
			  previousEvents := empty;
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BCV1", "3");
			  acceptOrderedEvent ("1620920000","Test73","CS2-U","InstanceForkVariant3",previousEvents,"Event41",theAuditEventData);
			  theAuditEventData :=  emptyAuditEventData;
			  previousEvents := ("Event41");
			  acceptOrderedEvent ("1620920001","Test73","CS2-V","InstanceForkVariant3",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  acceptOrderedEvent ("1620920002","Test73","CS2-W","InstanceForkVariant3",previousEvents,"Event43",theAuditEventData);
			  previousEvents := ("Event43");
			  acceptOrderedEvent ("1620920003","Test73","CS2-X","InstanceForkVariant3",previousEvents,"Event44",theAuditEventData);
			  previousEvents := ("Event44");
			  acceptOrderedEvent ("1620920004","Test73","CS2-Y","InstanceForkVariant3",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  acceptOrderedEvent ("1620920005","Test73","CS2-Z","InstanceForkVariant3",previousEvents,"Event52",theAuditEventData);
			  previousEvents := ("Event42");
			  acceptOrderedEvent ("1620920002","Test73","CS2-W","InstanceForkVariant3",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  acceptOrderedEvent ("1620920003","Test73","CS2-X","InstanceForkVariant3",previousEvents,"Event47",theAuditEventData);
			  previousEvents := ("Event47");
			  acceptOrderedEvent ("1620920004","Test73","CS2-Y","InstanceForkVariant3",previousEvents,"Event48",theAuditEventData);
			  previousEvents := ("Event48");
			  acceptOrderedEvent ("1620920002","Test73","CS2-Z","InstanceForkVariant3",previousEvents,"Event53",theAuditEventData);
			  previousEvents := ("Event42");
			  acceptOrderedEvent ("1620920002","Test73","CS2-W","InstanceForkVariant3",previousEvents,"Event49",theAuditEventData);
			  previousEvents := ("Event49");
			  acceptOrderedEvent ("1620920003","Test73","CS2-X","InstanceForkVariant3",previousEvents,"Event50",theAuditEventData);
			  previousEvents := ("Event50");
			  acceptOrderedEvent ("1620920004","Test73","CS2-Y","InstanceForkVariant3",previousEvents,"Event51",theAuditEventData);
			  previousEvents := ("Event51");
			  acceptOrderedEvent ("1620920005","Test73","CS2-Z","InstanceForkVariant3",previousEvents,"Event54",theAuditEventData);
			  
			 //
			  Test::service_event_queue();
			  
			  if (Test::get_scheduled_timers ())'length /= 0 then
			    Test::fire_scheduled_timers();
			  end if; 
			  
			  //
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  //
			  Assertions::assertTrue(theJobs'length = 3, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 3, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 34, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  for theJob in theJobs loop
			    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
			    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
			  end loop;  
			end service;
			@endnoparse
		end function;

		@function_num(1);
		function Test74SingleEventForkAndMerge_SunnyDay1() is
			@noparse
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			previousEvents : sequence of string;
			empty : sequence of string;
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			
			begin
			  // This test covers 1 Job which is compliant with the Job Definition 'ComplexInstanceForkAndMergeJob1'..
			  //
			  // This test does not reveal any erroneous behaviour of the twin.
			  //
			  // ****************************************************************************************************************
			
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BCV2", "3") & (aeDataKindEnum.MERGECOUNT, "MCX2", "3");
			  acceptOrderedEvent ("1620920000","Test74","CS3-U","InstanceForkAndMerge1",previousEvents,"Event1",theAuditEventData);
			  theAuditEventData :=  emptyAuditEventData;
			  previousEvents := ("Event1");
			  acceptOrderedEvent ("1620920001","Test74","CS3-V","InstanceForkAndMerge1",previousEvents,"Event2",theAuditEventData);
			  previousEvents := ("Event2");
			  acceptOrderedEvent ("1620920002","Test74","CS3-W","InstanceForkAndMerge1",previousEvents,"Event3",theAuditEventData);
			  previousEvents := ("Event2");
			  acceptOrderedEvent ("1620920003","Test74","CS3-W","InstanceForkAndMerge1",previousEvents,"Event6",theAuditEventData);
			  previousEvents := ("Event2");
			  acceptOrderedEvent ("1620920004","Test74","CS3-W","InstanceForkAndMerge1",previousEvents,"Event9",theAuditEventData);
			  previousEvents := empty & "Event3" & "Event6" & "Event9";
			  acceptOrderedEvent ("1620920005","Test74","CS3-X","InstanceForkAndMerge1",previousEvents,"Event7",theAuditEventData);
			  previousEvents := ("Event7");
			  acceptOrderedEvent ("1620920006","Test74","CS3-Y","InstanceForkAndMerge1",previousEvents,"Event8",theAuditEventData);
			  previousEvents := ("Event8");
			  acceptOrderedEvent ("1620920007","Test74","CS3-Z","InstanceForkAndMerge1",previousEvents,"Event12",theAuditEventData);
			  
			  Test::service_event_queue();
			  
			  if (Test::get_scheduled_timers ())'length /= 0 then
			    Test::fire_scheduled_timers();
			  end if; 
			  
			  //
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  //
			  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 8, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  for theJob in theJobs loop
			    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
			    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
			  end loop;  
			end service;
			@endnoparse
		end function;

		@function_num(8);
		function Test75MultiEventForkAndMerge_SunnyDay1() is
			@noparse
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			previousEvents : sequence of string;
			empty : sequence of string;
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			
			begin
			  // This test covers 1 Job which is compliant with the Job Definition 'ComplexInstanceForkAndMergeJob2'..
			  //
			  // This test does not reveal any erroneous behaviour of the twin.
			  //
			  // ****************************************************************************************************************
			
			  
			  previousEvents := empty;
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BCV3", "3") & (aeDataKindEnum.MERGECOUNT, "MCZ3", "3");
			  acceptOrderedEvent ("1620920000","Test75","CS4-U","InstanceForkAndMerge2",previousEvents,"Event21",theAuditEventData);
			  theAuditEventData :=  emptyAuditEventData;
			  previousEvents := ("Event21");
			  acceptOrderedEvent ("1620920001","Test75","CS4-V","InstanceForkAndMerge2",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  acceptOrderedEvent ("1620920002","Test75","CS4-W","InstanceForkAndMerge2",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  acceptOrderedEvent ("1620920003","Test75","CS4-X","InstanceForkAndMerge2",previousEvents,"Event24",theAuditEventData);
			  previousEvents := ("Event24");
			  acceptOrderedEvent ("1620920004","Test75","CS4-Y","InstanceForkAndMerge2",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event22");
			  acceptOrderedEvent ("1620920002","Test75","CS4-W","InstanceForkAndMerge2",previousEvents,"Event26",theAuditEventData);
			  previousEvents := ("Event26");
			  acceptOrderedEvent ("1620920003","Test75","CS4-X","InstanceForkAndMerge2",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  acceptOrderedEvent ("1620920004","Test75","CS4-Y","InstanceForkAndMerge2",previousEvents,"Event28",theAuditEventData);
			  previousEvents := ("Event22");
			  acceptOrderedEvent ("1620920002","Test75","CS4-W","InstanceForkAndMerge2",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  acceptOrderedEvent ("1620920003","Test75","CS4-X","InstanceForkAndMerge2",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  acceptOrderedEvent ("1620920004","Test75","CS4-Y","InstanceForkAndMerge2",previousEvents,"Event31",theAuditEventData);
			  previousEvents := empty & "Event25" & "Event28" & "Event31";
			  acceptOrderedEvent ("1620920005","Test75","CS4-Z","InstanceForkAndMerge2",previousEvents,"Event32",theAuditEventData);
			  
			  Test::service_event_queue();
			  
			  if (Test::get_scheduled_timers ())'length /= 0 then
			    Test::fire_scheduled_timers();
			  end if; 
			  
			  //
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  //
			  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 12, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  for theJob in theJobs loop
			    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
			    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
			  end loop;  
			  
			end service;
			@endnoparse
		end function;

		@function_num(9);
		function Test76NestedEventForkAndMerge_SunnyDay1() is
			@noparse
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			previousEvents : sequence of string;
			empty : sequence of string;
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			
			begin
			  // This test covers 1 Job which is compliant with the Job Definition 'ComplexInstanceForkAndMergeJob3'..
			  //
			  // This test does not reveal any erroneous behaviour of the twin.
			  //
			  // ****************************************************************************************************************
			
			previousEvents := empty;
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BCV4", "3") & (aeDataKindEnum.BRANCHCOUNT, "BCW4", "2") & (aeDataKindEnum.MERGECOUNT, "MCZ4", "6");
			  acceptOrderedEvent ("1620920000","Test76","CS5-U","InstanceForkAndMerge3",previousEvents,"Event21",theAuditEventData);
			  theAuditEventData :=  emptyAuditEventData;
			  previousEvents := ("Event21");
			  acceptOrderedEvent ("1620920001","Test76","CS5-V","InstanceForkAndMerge3",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  acceptOrderedEvent ("1620920002","Test76","CS5-W","InstanceForkAndMerge3",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  acceptOrderedEvent ("1620920003","Test76","CS5-X","InstanceForkAndMerge3",previousEvents,"Event24",theAuditEventData);
			  previousEvents := ("Event24");
			  acceptOrderedEvent ("1620920004","Test76","CS5-Y","InstanceForkAndMerge3",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event23");
			  acceptOrderedEvent ("1620920003","Test76","CS5-X","InstanceForkAndMerge3",previousEvents,"Event26",theAuditEventData);
			  previousEvents := ("Event26");
			  acceptOrderedEvent ("1620920004","Test76","CS5-Y","InstanceForkAndMerge3",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event22");
			  acceptOrderedEvent ("1620920002","Test76","CS5-W","InstanceForkAndMerge3",previousEvents,"Event28",theAuditEventData);
			  previousEvents := ("Event28");
			  acceptOrderedEvent ("1620920003","Test76","CS5-X","InstanceForkAndMerge3",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  acceptOrderedEvent ("1620920004","Test76","CS5-Y","InstanceForkAndMerge3",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event28");
			  acceptOrderedEvent ("1620920003","Test76","CS5-X","InstanceForkAndMerge3",previousEvents,"Event31",theAuditEventData);
			  previousEvents := ("Event31");
			  acceptOrderedEvent ("1620920004","Test76","CS5-Y","InstanceForkAndMerge3",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event22");
			  acceptOrderedEvent ("1620920002","Test76","CS5-W","InstanceForkAndMerge3",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  acceptOrderedEvent ("1620920003","Test76","CS5-X","InstanceForkAndMerge3",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event34");
			  acceptOrderedEvent ("1620920004","Test76","CS5-Y","InstanceForkAndMerge3",previousEvents,"Event35",theAuditEventData);
			  previousEvents := ("Event33");
			  acceptOrderedEvent ("1620920003","Test76","CS5-X","InstanceForkAndMerge3",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  acceptOrderedEvent ("1620920004","Test76","CS5-Y","InstanceForkAndMerge3",previousEvents,"Event37",theAuditEventData);
			  previousEvents := empty & "Event25" & "Event27" & "Event30" & "Event32" & "Event35" & "Event37";
			  acceptOrderedEvent ("1620920005","Test76","CS5-Z","InstanceForkAndMerge3",previousEvents,"Event38",theAuditEventData);
			  
			  Test::service_event_queue();
			  
			  if (Test::get_scheduled_timers ())'length /= 0 then
			    Test::fire_scheduled_timers();
			  end if; 
			  
			  //
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  //
			  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 18, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  for theJob in theJobs loop
			    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
			    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
			  end loop;  
			  
			end service;
			@endnoparse
		end function;

		@function_num(10);
		function Test77NestedEventForkAndMergeAcrossSequences_SunnyDay1() is
			@noparse
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			previousEvents : sequence of string;
			empty : sequence of string;
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			
			begin
			  // This test covers 1 Job which is compliant with the Job Definition 'ComplexInstanceForkAndMergeJob4'..
			  //
			  // This test does not reveal any erroneous behaviour of the twin.
			  //
			  // ****************************************************************************************************************
			
			  previousEvents := empty;
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BCV5", "3") & (aeDataKindEnum.BRANCHCOUNT, "BCW5", "2") & (aeDataKindEnum.MERGECOUNT, "MCZ5", "6");
			  acceptOrderedEvent ("1620920000","Test77","CS6-U","InstanceForkAndMerge4",previousEvents,"Event21",theAuditEventData);
			  theAuditEventData :=  emptyAuditEventData;
			  previousEvents := ("Event21");
			  acceptOrderedEvent ("1620920001","Test77","CS6-V","InstanceForkAndMerge4",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  acceptOrderedEvent ("1620920002","Test77","CS6-W","InstanceForkAndMerge4",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  acceptOrderedEvent ("1620920003","Test77","CS6-X","InstanceForkAndMerge4",previousEvents,"Event24",theAuditEventData);
			  previousEvents := empty;
			  acceptOrderedEvent ("1620920004","Test77","CS6-Y","InstanceForkAndMerge4",previousEvents,"Event25",theAuditEventData);
			  previousEvents := ("Event23");
			  acceptOrderedEvent ("1620920003","Test77","CS6-X","InstanceForkAndMerge4",previousEvents,"Event26",theAuditEventData);
			  previousEvents := empty;
			  acceptOrderedEvent ("1620920004","Test77","CS6-Y","InstanceForkAndMerge4",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event22");
			  acceptOrderedEvent ("1620920002","Test77","CS6-W","InstanceForkAndMerge4",previousEvents,"Event28",theAuditEventData);
			  previousEvents := ("Event28");
			  acceptOrderedEvent ("1620920003","Test77","CS6-X","InstanceForkAndMerge4",previousEvents,"Event29",theAuditEventData);
			  previousEvents := empty;
			  acceptOrderedEvent ("1620920004","Test77","CS6-Y","InstanceForkAndMerge4",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event28");
			  acceptOrderedEvent ("1620920003","Test77","CS6-X","InstanceForkAndMerge4",previousEvents,"Event31",theAuditEventData);
			  previousEvents := empty;
			  acceptOrderedEvent ("1620920004","Test77","CS6-Y","InstanceForkAndMerge4",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event22");
			  acceptOrderedEvent ("1620920002","Test77","CS6-W","InstanceForkAndMerge4",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  acceptOrderedEvent ("1620920003","Test77","CS6-X","InstanceForkAndMerge4",previousEvents,"Event34",theAuditEventData);
			  previousEvents := empty;
			  acceptOrderedEvent ("1620920004","Test77","CS6-Y","InstanceForkAndMerge4",previousEvents,"Event35",theAuditEventData);
			  previousEvents := ("Event33");
			  acceptOrderedEvent ("1620920003","Test77","CS6-X","InstanceForkAndMerge4",previousEvents,"Event36",theAuditEventData);
			  previousEvents := empty;
			  acceptOrderedEvent ("1620920004","Test77","CS6-Y","InstanceForkAndMerge4",previousEvents,"Event37",theAuditEventData);
			  previousEvents := empty & "Event25" & "Event27" & "Event30" & "Event32" & "Event35" & "Event37";
			  acceptOrderedEvent ("1620920005","Test77","CS6-Z","InstanceForkAndMerge4",previousEvents,"Event38",theAuditEventData);
			  
			  Test::service_event_queue();
			  
			  if (Test::get_scheduled_timers ())'length /= 0 then
			    Test::fire_scheduled_timers();
			  end if; 
			  
			  //
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  //
			  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 18, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  for theJob in theJobs loop
			    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
			    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
			  end loop;  
			  
			end service;
			@endnoparse
		end function;

		@function_num(11);
		function Test78ComplexSequence2_SunnyDay1() is
			@noparse
			theAuditEventData : sequence of auditEventDataStructure;
			emptyAuditEventData : sequence of auditEventDataStructure;
			previousEvents : sequence of string;
			empty : sequence of string;
			theJob : instance of Job;
			theJobs : set of instance of Job;
			theSequences : set of instance of Sequence;
			theAuditEvents : set of instance of AuditEvent;
			theDynamicControls : set of instance of DynamicControl;
			theDynamicControlDefinitions : set of instance of DynamicControlDefinition;
			theLOOPCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theBRANCHCOUNTcontrolDefinitions : set of instance of DynamicControlDefinition;
			theIntraJobInvariantDefinitions : set of instance of IntraJobInvariantDefn;
			theTransientInvariantsForIntraJobInvariants : set of instance of TransientInvariant;
			theUsagesOfTransientInvariant : set of instance of TransientInvariant;
			theSourcesOfExtraJobInvariant : set of instance of PersistedInvariant;   // As delivered by an AuditEvent in this test
			theUsageOfTransientInvariant : instance of TransientInvariant;           // As delivered by an AuditEvent in this test
			theExtraJobInvariantDefnForTransientInvariantUsage : instance of ExtraJobInvariantDefn;
			theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn : integer;
			thePersistedInvariants : set of instance of PersistedInvariant;
			thePersistedInvariant : instance of PersistedInvariant;
			logMessage : string;
			
			begin
			  // This test delivers events for two jobs:
			  //    (1) 'GenToken2' of type 'GenerateAuthorisationTokenJob2'
			  //    (2) 'ComplexSunnyDay2' of type 'ComplexJob2'
			  // The first of these two jobs is the source of an Extra Job Invariant that is used several times within the second job.
			  //
			  // This test delivers events compliant with the two job definitions (as defined in the scenario 'InitComplexEventSequence1Definition'
			  // and does not result in any errors being expected.
			  //
			  // Firstly, deliver a set of events for the 'GenToken2'job
			  previousEvents := empty;
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246655","TokenGenerator","TOKGEN-A","GenToken2",previousEvents,"Event97",theAuditEventData);
			  previousEvents := ("Event97");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246656","TokenGenerator","TOKGEN-B","GenToken2",previousEvents,"Event98",theAuditEventData);
			  previousEvents := ("Event98");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246657","TokenGenerator","TOKGEN-C","GenToken2",previousEvents,"Event99",theAuditEventData);
			  //
			  // Event occurrence TOKGEN-D,1 is the source of an Extra Job Invariant.
			  previousEvents := ("Event99");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_B", "ProtectedFact_B1");
			  acceptOrderedEvent ("1670246658","TokenGenerator","TOKGEN-D","GenToken2",previousEvents,"Event100",theAuditEventData);
			  // End of event definitions for the 'GenToken2' instance of the 'GenerateAuthorisationTokenJob'.
			  //
			  // Process all the events on the event queue - note that the job 'GenToken2' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the GenToken2 job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "GenToken2");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'GenToken2' being fired.
			  Test::service_event_queue();
			  //
			  //
			  // Now deliver a set of events for the 'ComplexSunnyDay2' job - this job consists of a single but highly complex sequence which,
			  // for practical purposes, has been divided into 7 separate sections. The sequence overall consists of combinations of 
			  // various topologies, constraints and invariants.
			  //
			  // Starting with the initial 3 events of section 1 of the complex sequence...
			  //
			  // Event occurrence 'CS7-A,1' in the sequence is the source for:
			  //    (1) a LOOPCOUNT dynamic control named 'LCS1' (which constrains the loop involving event occurrence 'CS7-S,1' to 2)
			  //    (2) a BRANCHCOUNT dynamic control named 'BCK1'(which constrains the number of instance branches at 'CS7-K,1' to 3)
			  //    (3) a MERGECOUNT dynamic control named 'MCM1' (which constrains the merges at 'CS7-M,1' to 3)
			  previousEvents := empty;
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LCS1", "2") & (aeDataKindEnum.BRANCHCOUNT, "BCK1", "3") & (aeDataKindEnum.MERGECOUNT, "MCM1", "3");
			  acceptOrderedEvent ("1670246786","ProtProc-0001","CS7-A","ComplexSunnyDay2",previousEvents,"Event25",theAuditEventData);
			  //
			  // Event occurrence 'CS7-B,1' in the sequence is the source for:
			  //     (1) a LOOPCOUNT dynamic control 'LCE1' (which constrains the loop involving event occurrence 'CS7-E,1' to 3)
			  //     (2) a LOOPCOUNT dynamic control 'LCD2' (which constrains the loop involving event occurrence 'CS7-D,2' to 2)
			  //     (3) a LOOPCOUNT dynamic control 'LCF1' (which constrains the loop involving event occurrence 'CS7-F,1' to 3)
			  // This event also includes the use of an intra-job invariant 'InvariantB' whose value id 'BBBBB'
			  previousEvents := ("Event25");
			  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "LCE1", "3") & (aeDataKindEnum.LOOPCOUNT, "LCD2", "2") & (aeDataKindEnum.LOOPCOUNT, "LCF1", "3") & (aeDataKindEnum.INTRAJOBINV, "InvariantB", "BBBBB");
			  acceptOrderedEvent ("1670246787","ProtProc-0001","CS7-B","ComplexSunnyDay2",previousEvents,"Event59",theAuditEventData);
			  previousEvents := ("Event59");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246788","ProtProc-0001","CS7-C","ComplexSunnyDay2",previousEvents,"Event13",theAuditEventData);
			  //
			  // ...then the events for the second section of the sequence (up until Event55 which is just before the Type Merge at Event15)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246789","ProtProc-0001","CS7-D","ComplexSunnyDay2",previousEvents,"Event60",theAuditEventData);
			  previousEvents := ("Event60");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_B", "ProtectedFact_B1");
			  acceptOrderedEvent ("1670246790","ProtProc-0001","CS7-E","ComplexSunnyDay2",previousEvents,"Event11",theAuditEventData);
			  previousEvents := ("Event11");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246791","ProtProc-0001","CS7-F","ComplexSunnyDay2",previousEvents,"Event17",theAuditEventData);
			  previousEvents := ("Event17");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246792","ProtProc-0001","CS7-D","ComplexSunnyDay2",previousEvents,"Event29",theAuditEventData);
			  previousEvents := ("Event29");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_B", "ProtectedFact_B1");
			  acceptOrderedEvent ("1670246793","ProtProc-0001","CS7-E","ComplexSunnyDay2",previousEvents,"Event33",theAuditEventData);
			  previousEvents := ("Event33");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246794","ProtProc-0001","CS7-F","ComplexSunnyDay2",previousEvents,"Event41",theAuditEventData);
			  previousEvents := ("Event41");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246795","ProtProc-0001","CS7-D","ComplexSunnyDay2",previousEvents,"Event63",theAuditEventData);
			  previousEvents := ("Event63");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_B", "ProtectedFact_B1");
			  acceptOrderedEvent ("1670246796","ProtProc-0001","CS7-E","ComplexSunnyDay2",previousEvents,"Event19",theAuditEventData);
			  previousEvents := ("Event19");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246797","ProtProc-0001","CS7-F","ComplexSunnyDay2",previousEvents,"Event23",theAuditEventData);
			  previousEvents := ("Event23");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246798","ProtProc-0001","CS7-G","ComplexSunnyDay2",previousEvents,"Event16",theAuditEventData);
			  previousEvents := ("Event16");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246799","ProtProc-0001","CS7-D","ComplexSunnyDay2",previousEvents,"Event27",theAuditEventData);
			  previousEvents := ("Event27");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246800","ProtProc-0001","CS7-E","ComplexSunnyDay2",previousEvents,"Event70",theAuditEventData);
			  previousEvents := ("Event70");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246801","ProtProc-0001","CS7-F","ComplexSunnyDay2",previousEvents,"Event18",theAuditEventData);
			  previousEvents := ("Event18");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246802","ProtProc-0001","CS7-D","ComplexSunnyDay2",previousEvents,"Event36",theAuditEventData);
			  previousEvents := ("Event36");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246803","ProtProc-0001","CS7-E","ComplexSunnyDay2",previousEvents,"Event66",theAuditEventData);
			  previousEvents := ("Event66");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246804","ProtProc-0001","CS7-F","ComplexSunnyDay2",previousEvents,"Event55",theAuditEventData);
			  //
			  // ...and now the events for the third section of the sequence (which includes an instance fork and merge)...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246805","ProtProc-0001","CS7-K","ComplexSunnyDay2",previousEvents,"Event61",theAuditEventData);
			  // An instance fork starts here - with 3 instances of CS7-L
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_B", "ProtectedFact_B1");
			  acceptOrderedEvent ("1670246806","ProtProc-0001","CS7-L","ComplexSunnyDay2",previousEvents,"Event62",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_B", "ProtectedFact_B1");
			  acceptOrderedEvent ("1670246807","ProtProc-0001","CS7-L","ComplexSunnyDay2",previousEvents,"Event56",theAuditEventData);
			  previousEvents := ("Event61");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_B", "ProtectedFact_B1");
			  acceptOrderedEvent ("1670246808","ProtProc-0001","CS7-L","ComplexSunnyDay2",previousEvents,"Event57",theAuditEventData);
			  //
			  // ...and the INSTANCE fork merges here at the CS7-M event
			  previousEvents := empty & "Event62" & "Event56" & "Event57";
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246809","ProtProc-0001","CS7-M","ComplexSunnyDay2",previousEvents,"Event14",theAuditEventData);
			  //
			  // At this point the third section in the sequence merges with the second section in the sequence at Event15, so deliver the remaining 
			  // events up to the end point in the second section of the sequence.
			  //
			  previousEvents := empty & "Event55" & "Event14";
			  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvariantB", "BBBBB");
			  acceptOrderedEvent ("1670246810","ProtProc-0001","CS7-H","ComplexSunnyDay2",previousEvents,"Event15",theAuditEventData);
			  previousEvents := ("Event15");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246811","ProtProc-0001","CS7-J","ComplexSunnyDay2",previousEvents,"Event44",theAuditEventData);
			  //
			  // ...and now the events for section 4 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246812","ProtProc-0001","CS7-P","ComplexSunnyDay2",previousEvents,"Event20",theAuditEventData);
			  previousEvents := ("Event20");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246813","ProtProc-0001","CS7-Q","ComplexSunnyDay2",previousEvents,"Event10",theAuditEventData);
			  //
			  // ...and now the events for section 5 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246816","ProtProc-0001","CS7-C","ComplexSunnyDay2",previousEvents,"Event64",theAuditEventData);
			  previousEvents := ("Event64");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246817","ProtProc-0001","CS7-D","ComplexSunnyDay2",previousEvents,"Event30",theAuditEventData);
			  previousEvents := ("Event30");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246818","ProtProc-0001","CS7-E","ComplexSunnyDay2",previousEvents,"Event32",theAuditEventData);
			  previousEvents := ("Event32");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246819","ProtProc-0001","CS7-D","ComplexSunnyDay2",previousEvents,"Event45",theAuditEventData);
			  previousEvents := ("Event45");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246890","ProtProc-0001","CS7-E","ComplexSunnyDay2",previousEvents,"Event21",theAuditEventData);
			  //
			  // Event occurrence 'CS7-F,3' in the sequence is the source of branch constraint 'BCF3' (which constrains the number of instance branches at 'CS7-F,3' to 2)
			  previousEvents := ("Event21");
			  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "BCF3", "2");
			  acceptOrderedEvent ("1670246891","ProtProc-0001","CS7-F","ComplexSunnyDay2",previousEvents,"Event24",theAuditEventData);
			  //
			  // Event occurrence 'CS7-D,4' in the sequence is a user of the Extra Job Invariant 'AUTH_TOKEN_B'.
			  previousEvents := ("Event24"); 
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_B", "ProtectedFact_B1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS7-D","ComplexSunnyDay2",previousEvents,"Event39",theAuditEventData);
			  //
			  previousEvents := ("Event39");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS7-G","ComplexSunnyDay2",previousEvents,"Event34",theAuditEventData);
			  previousEvents := ("Event24");
			  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "AUTH_TOKEN_B", "ProtectedFact_B1");
			  acceptOrderedEvent ("1670246892","ProtProc-0001","CS7-D","ComplexSunnyDay2",previousEvents,"Event46",theAuditEventData);
			  previousEvents := ("Event46");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246893","ProtProc-0001","CS7-G","ComplexSunnyDay2",previousEvents,"Event47",theAuditEventData);
			  //
			  // ...and finally the events for section 6 of the sequence...
			  previousEvents := ("Event13");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246894","ProtProc-0001","CS7-S","ComplexSunnyDay2",previousEvents,"Event42",theAuditEventData);
			  previousEvents := ("Event42");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246895","ProtProc-0001","CS7-S","ComplexSunnyDay2",previousEvents,"Event31",theAuditEventData);
			  previousEvents := ("Event31");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246896","ProtProc-0001","CS7-D","ComplexSunnyDay2",previousEvents,"Event22",theAuditEventData);
			  previousEvents := ("Event22");
			  theAuditEventData := emptyAuditEventData;
			  acceptOrderedEvent ("1670246897","ProtProc-0001","CS7-E","ComplexSunnyDay2",previousEvents,"Event28",theAuditEventData);
			  //
			  // Process all the events on the event queue - note that the job 'ComplexSunnyDay2' should be in the 'CheckingSequenceCompletion' state after this.
			  Test::service_event_queue();
			  //
			  // Fire the jobEventTimer to move the 'ComplexSunnyDay2' job (which thinks it's complete) through to the state for checking constraints & invariants
			  theJob := find_only Job(jobID = "ComplexSunnyDay2");
			  Test::fire_timer(theJob.jobEventTimer);
			  //
			  // Service the event queue again to process any events placed on queue resulting from  
			  // the jobEventTimer for Job 'ComplexSunnyDay2' being fired.
			  Test::service_event_queue();
			  //
			  // ...and now check that the state of the model is as expected.
			  theJobs := find Job ();
			  theSequences := theJobs -> R10;
			  theAuditEvents := theSequences -> R11;
			  theDynamicControls := theJobs -> R35;
			  theDynamicControlDefinitions := theJobs -> R35 -> R29;
			  theLOOPCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.LOOPCOUNT);
			  theBRANCHCOUNTcontrolDefinitions := find theDynamicControlDefinitions (dynamicControlType = dynamicControlTypeEnum.BRANCHCOUNT);
			  theIntraJobInvariantDefinitions := theJobs -> R8 -> R22;
			  theTransientInvariantsForIntraJobInvariants := theIntraJobInvariantDefinitions -> R26;
			  theSourcesOfExtraJobInvariant := theAuditEvents -> R27;
			  theUsagesOfTransientInvariant := theAuditEvents -> R23;
			  theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := 0;
			  for theUsageOfTransientEvent in theUsagesOfTransientInvariant loop
			    theExtraJobInvariantDefnForTransientInvariantUsage := theUsageOfTransientEvent -> R28;
			    if theExtraJobInvariantDefnForTransientInvariantUsage /= null then
			      theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn := theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn + 1;
			    end if;
			  end loop;
			  //
			  Assertions::assertTrue(theJobs'length = 2, "Wrong number of jobs created: " & (theJobs'length)'image);
			  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
			  Assertions::assertTrue(theAuditEvents'length = 46, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
			  Assertions::assertTrue(theDynamicControls'length = 9, "Wrong number of dynamic controls created: " & (theDynamicControls'length)'image);
			  Assertions::assertTrue(theLOOPCOUNTcontrolDefinitions'length = 4, "Wrong number of LOOPCOUNT control definitions created: " & (theLOOPCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theBRANCHCOUNTcontrolDefinitions'length = 2, "Wrong number of BRANCHCOUNT control definitions created: " & (theBRANCHCOUNTcontrolDefinitions'length)'image);
			  Assertions::assertTrue(theIntraJobInvariantDefinitions'length = 1, "Wrong number of Intra-Job Invariant definitions created: " & (theIntraJobInvariantDefinitions'length)'image);
			  Assertions::assertTrue(theTransientInvariantsForIntraJobInvariants'length = 2, "Wrong number of Transient Invariants created for IntraJob Invariants: " & (theTransientInvariantsForIntraJobInvariants'length)'image);
			  Assertions::assertTrue(theSourcesOfExtraJobInvariant'length = 1, "Wrong number of audit events acting as source of a PersistedInvariant : " & (theSourcesOfExtraJobInvariant'length)'image);
			  Assertions::assertTrue(theUsagesOfTransientInvariant'length = 10, "Wrong number of audit events making usage of a TransientInvariant : " & (theUsagesOfTransientInvariant'length)'image);
			  Assertions::assertTrue(theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn = 8, "Wrong number of audit events using an Extra-Job Invariant : " & (theNumberOfTransientInvariantsActingAsUsagesOfAnExtraJobInvariantDefn)'image);
			  //
			  for theJob in theJobs loop
			    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
			    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
			  end loop;
			  //
			  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
			  thePersistedInvariants := find PersistedInvariant();
			  for thePersistedInvariant in thePersistedInvariants loop
			    thePersistedInvariant.deletePersistedInvariant();   
			  end loop;
			end service;
			//
			//
			@endnoparse
		end function;

	end package;

end;
