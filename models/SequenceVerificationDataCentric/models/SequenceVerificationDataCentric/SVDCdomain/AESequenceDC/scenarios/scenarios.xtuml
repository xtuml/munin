// BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

within SequenceVerificationDataCentric::SVDCdomain::AESequenceDC is

  package scenarios is
    @dialect("masl");
    function CleanUpAllJobs();

    @dialect("masl");
    function CleanUpJobA();

    @dialect("masl");
    function CleanUpJobB();

    @dialect("masl");
    function CleanUpJobG();

    @dialect("masl");
    function InitComplexEventSequence1Definition();

    @dialect("masl");
    function InitCyclicTopologyEventDefinition();

    @dialect("masl");
    function InitEventDefinition();

    @dialect("masl");
    function InitEventDefinitionForInclusiveOR();

    @dialect("masl");
    function InitForkAndMergeTopologyEventDefinition();

    @dialect("masl");
    function InitIntraJobInvariantDefinition();

    @dialect("masl");
    function InitLoopBreakEventDefinition();

    @dialect("masl");
    function InitLoopCountDefinition();

    @dialect("masl");
    function InitPersistentInvariantAuthAndBankTransferDefinition();

    @dialect("masl");
    @function_num(1);
    function InitSystemSpec();

    @dialect("masl");
    function OLD_InitBranchCountDefinition();

    @dialect("masl");
    function OLD_InitialisationData();

    @dialect("masl");
    function TestDeprecateJobADefinition();

    @dialect("masl");
    function TestDeprecateJobBDefinition();

    @dialect("masl");
    function TestInsertAuthJobGEvent01_AuthoriserSendOrderRequest();

    @dialect("masl");
    function TestInsertAuthJobGEvent02_AuthReceiveRequest();

    @dialect("masl");
    function TestInsertAuthJobGEvent03_AuthSendMidRequest();

    @dialect("masl");
    function TestInsertAuthJobGEvent04_AuthReceiveMidResponse();

    @dialect("masl");
    function TestInsertAuthJobGEvent05_AuthSendMidRequest();

    @dialect("masl");
    function TestInsertAuthJobGEvent06_AuthReceiveMidResponse();

    @dialect("masl");
    function TestInsertAuthJobGEvent07_AuthSendResponse();

    @dialect("masl");
    function TestInsertAuthJobGEvent08_AuthoriserReceiveOrder();

    @dialect("masl");
    function TestInsertCycJobEvent01_A();

    @dialect("masl");
    function TestInsertCycJobEvent02_B();

    @dialect("masl");
    function TestInsertCycJobEvent03_C();

    @dialect("masl");
    function TestInsertCycJobEvent04_B();

    @dialect("masl");
    function TestInsertCycJobEvent04_enD();

    @dialect("masl");
    function TestInsertCycJobEvent05_C();

    @dialect("masl");
    function TestInsertCycJobEvent06_B();

    @dialect("masl");
    function TestInsertCycJobEvent06_enD();

    @dialect("masl");
    function TestInsertCycJobEvent07_C();

    @dialect("masl");
    function TestInsertCycJobEvent08_enD();

    @dialect("masl");
    function TestInsertEAuthJobGEvent01a_AuthoriserSendOrderRequestWithPersistentInvariant();

    @dialect("masl");
    function TestInsertEAuthJobGEvent02a_AuthReceiveRequestWithoutPersistentInvariant();

    @dialect("masl");
    function TestInsertEAuthJobGEvent03a_AuthSendMidRequestWithoutPersistentInvariant();

    @dialect("masl");
    function TestInsertEAuthJobGEvent04a_AuthReceiveMidResponseWithoutPersistentInvariant();

    @dialect("masl");
    function TestInsertEAuthJobGEvent05a_AuthSendMidRequestWithoutPersistentInvariant();

    @dialect("masl");
    function TestInsertEAuthJobGEvent06a_AuthReceiveMidResponseWithoutPersistentInvariant();

    @dialect("masl");
    function TestInsertEAuthJobGEvent07a_AuthSendResponseWithoutPersistentInvariant();

    @dialect("masl");
    function TestInsertEAuthJobGEvent08a_AuthoriserReceiveOrderWithPersistentInvariant();

    @dialect("masl");
    function TestInsertEJobAEvent01e_NearInputUsingPersistentInvariant();

    @dialect("masl");
    function TestInsertEJobAEvent02to07();

    @dialect("masl");
    function TestInsertEJobAEvent08e_AgentReceiveWidgetsUsingPersistentInvariant();

    @dialect("masl");
    function TestInsertEJobAEvent09to11();

    @dialect("masl");
    function TestInsertEJobAEvent12e_GatewayWritePayloadUsingPersistentInvariant();

    @dialect("masl");
    function TestInsertEJobAEvent13to16();

    @dialect("masl");
    function TestInsertFandMJobEvent01_A();

    @dialect("masl");
    function TestInsertFandMJobEvent02_B();

    @dialect("masl");
    function TestInsertFandMJobEvent03_C();

    @dialect("masl");
    function TestInsertFandMJobEvent04_D();

    @dialect("masl");
    function TestInsertFandMJobEvent05_E();

    @dialect("masl");
    function TestInsertFandMJobEvent06_F();

    @dialect("masl");
    function TestInsertFandMJobEvent07_G();

    @dialect("masl");
    function TestInsertIllegalSequenceEndEvents01to03();

    @dialect("masl");
    function TestInsertIllegalSequenceEndEvents04to05();

    @dialect("masl");
    function TestInsertJobAEvent01_NearInput();

    @dialect("masl");
    function TestInsertJobAEvent02_NearPartWrite();

    @dialect("masl");
    function TestInsertJobAEvent03_NearJustificationWrite();

    @dialect("masl");
    function TestInsertJobAEvent04_AgentRequestWidgets();

    @dialect("masl");
    function TestInsertJobAEvent05_AuthoriserReadWidgetRequest();

    @dialect("masl");
    function TestInsertJobAEvent06_AuthoriserParsedJustification();

    @dialect("masl");
    function TestInsertJobAEvent07_AuthoriserSendWidgets();

    @dialect("masl");
    function TestInsertJobAEvent08_AgentReceiveWidgets();

    @dialect("masl");
    function TestInsertJobAEvent09_AgentPartRead();

    @dialect("masl");
    function TestInsertJobAEvent09a_AgentProcessedRequest();

    @dialect("masl");
    function TestInsertJobAEvent10_AgentWritePayload();

    @dialect("masl");
    function TestInsertJobAEvent11_GatewayReadPayload();

    @dialect("masl");
    function TestInsertJobAEvent12_GatewayWritePayload();

    @dialect("masl");
    function TestInsertJobAEvent13_MidProcessPayload();

    @dialect("masl");
    function TestInsertJobAEvent14_MidWritePayload();

    @dialect("masl");
    function TestInsertJobAEvent15_FarInput();

    @dialect("masl");
    function TestInsertJobAEvent16_FarOutput();

    @dialect("masl");
    function TestInsertJobBEvent01_NearInput();

    @dialect("masl");
    function TestInsertJobBEvent02_NearPartWrite();

    @dialect("masl");
    function TestInsertJobBEvent03_NearJustificationWrite();

    @dialect("masl");
    function TestInsertJobBEvent04_AgentRequestWidgets();

    @dialect("masl");
    function TestInsertJobBEvent05_AuthoriserReadWidgetRequest();

    @dialect("masl");
    function TestInsertJobBEvent06_AuthoriserParsedJustification();

    @dialect("masl");
    function TestInsertJobBEvent07_AuthoriserSendWidgets();

    @dialect("masl");
    function TestInsertJobBEvent08_AgentReceiveWidgets();

    @dialect("masl");
    function TestInsertJobBEvent09_AgentPartRead();

    @dialect("masl");
    function TestInsertJobBEvent09a_AgentProcessedRequest();

    @dialect("masl");
    function TestInsertJobBEvent10_AgentWritePayload();

    @dialect("masl");
    function TestInsertJobBEvent11_GatewayReadPayload();

    @dialect("masl");
    function TestInsertJobBEvent12_GatewayWritePayload();

    @dialect("masl");
    function TestInsertJobBEvent13_MidProcessPayload();

    @dialect("masl");
    function TestInsertJobBEvent14_MidWritePayload();

    @dialect("masl");
    function TestInsertJobBEvent15_FarInput();

    @dialect("masl");
    function TestInsertJobBEvent16_FarOutput();

    @dialect("masl");
    function TestInsertMalJobAEvent13_MidProcessPayload();

    @dialect("masl");
    function TestInsertSplitFandMJobEvents01to05();

    @dialect("masl");
    function TestInsertSplitFandMJobEvents06to10();

    @dialect("masl");
    function TestInsertSplitInstanceFandMJobEvents01to21();

    @dialect("masl");
    function TestInsertSplitInstanceFandMJobEvents22to24();

    @dialect("masl");
    function TestJobAComplete();

    @dialect("masl");
    function TestJobAFailed();

    @dialect("masl");
    function TestJobBComplete();

    @dialect("masl");
    function TestJobBFailed();

    @dialect("masl");
    function TestMalEvent02_FakeNearPartWrite();

    @dialect("masl");
    function TestRepeatEvent02_NearPartWrite();

  end package;

end;
