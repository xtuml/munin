//! ACTIVITY BEGIN. '86c90ce2-9f27-40e5-9c0a-5b393d957488' DO NOT EDIT THIS LINE.
private service AESequenceDC::InitComplexEventSequence2Definition () is
// Initialisation goes here.
previousEventTypes : sequence of eventStructure;
empty : sequence of eventStructure;
//userEventOccurrences : sequence of userEventDataStructure;

begin
  // *****************************************************************************************************************
  // This scenario sets up the definitions for two Job types - 'ComplexInstanceForkJob1' and 'ComplexInstanceForkJob2'
  // *****************************************************************************************************************
  // 
  // Firstly the event definitions for Job: ComplexInstanceForkJob1, Sequence: MultipleEventsInEachInstanceBranch 
  //
  previousEventTypes := empty;
  eventDefinition ("ComplexInstanceForkJob1","MultipleEventsInEachInstanceBranch","CS2-U",1,previousEventTypes,true,false,false);  
  previousEventTypes := ("CS2-U",1,"","");
  eventDefinition ("ComplexInstanceForkJob1","MultipleEventsInEachInstanceBranch","CS2-V",1,previousEventTypes,false,false,false); 
  previousEventTypes := ("CS2-V",1,"","");
  eventDefinition ("ComplexInstanceForkJob1","MultipleEventsInEachInstanceBranch","CS2-W",1,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-W",1,"","");
  eventDefinition ("ComplexInstanceForkJob1","MultipleEventsInEachInstanceBranch","CS2-X",1,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-X",1,"","");
  eventDefinition ("ComplexInstanceForkJob1","MultipleEventsInEachInstanceBranch","CS2-Y",1,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-Y",1,"","");
  eventDefinition ("ComplexInstanceForkJob1","MultipleEventsInEachInstanceBranch","CS2-Z",1,previousEventTypes,false,true,false);
  
  // Now, set up the dynamic control definitions for 'ComplexInstanceForkJob1'...
  dynamicControlDefinition("ComplexInstanceForkJob1", "BCV1", dynamicControlTypeEnum.BRANCHCOUNT, "CS2-U",1,"CS2-V",1);
  //
  // Now the event definitions for Job: ComplexInstanceForkJob2, Sequence: NestedInstanceForks
  //
  previousEventTypes := empty;
  eventDefinition ("ComplexInstanceForkJob2","NestedInstanceForks","CS3-U",2,previousEventTypes,true,false,false);  
  previousEventTypes := ("CS3-U",2,"","");
  eventDefinition ("ComplexInstanceForkJob2","NestedInstanceForks","CS3-V",2,previousEventTypes,false,false,false); 
  previousEventTypes := ("CS3-V",2,"","");
  eventDefinition ("ComplexInstanceForkJob2","NestedInstanceForks","CS3-W",2,previousEventTypes,false,false,false);
  previousEventTypes := ("CS3-W",2,"","");
  eventDefinition ("ComplexInstanceForkJob2","NestedInstanceForks","CS3-X",2,previousEventTypes,false,false,false);
  previousEventTypes := ("CS3-X",2,"","");
  eventDefinition ("ComplexInstanceForkJob2","NestedInstanceForks","CS3-Y",2,previousEventTypes,false,false,false);
  previousEventTypes := ("CS3-Y",2,"","");
  eventDefinition ("ComplexInstanceForkJob2","NestedInstanceForks","CS3-Z",2,previousEventTypes,false,true,false);
  
  // Now, set up the dynamic control definitions for 'ComplexInstanceForkJob2'...
  dynamicControlDefinition("ComplexInstanceForkJob2", "BCV2", dynamicControlTypeEnum.BRANCHCOUNT, "CS3-U",2,"CS3-V",2);
  dynamicControlDefinition("ComplexInstanceForkJob2", "BCW2", dynamicControlTypeEnum.BRANCHCOUNT, "CS3-U",2,"CS3-W",2);
  //
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'cb65d55d-2024-4988-aa4f-d9fad1cd4170' DO NOT EDIT THIS LINE.
private service AESequenceDC::InitComplexEventSequence3Definition () is
// Initialisation goes here.
previousEventTypes : sequence of eventStructure;
empty : sequence of eventStructure;
invariantEventTypeUses : sequence of intraJobInvDataStructure;
userEventOccurrences : sequence of userEventDataStructure;

begin
  // This scenario sets up the definitions for two Job types - 'ComplexJob2' and 'GenerateAuthorisationTokenJob'
  //
  // Job: ComplexJob2, Sequence: ComplexSequence 
  //
  // Event definitions for section 1 of sequence...
  previousEventTypes := empty;
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-A",1,previousEventTypes,true,false,false);  
  previousEventTypes := ("CS2-A",1,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-B",1,previousEventTypes,false,false,false); 
  previousEventTypes := ("CS2-B",1,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-C",1,previousEventTypes,false,false,false);
  // Event definitions for section 2 of sequence...
  // Start of first loop in section 2.
  previousEventTypes := ("CS2-C",1,"MultiWayANDFork","AND") & ("CS2-F",1,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-D",1,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-D",1,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-E",1,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-E",1,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-F",1,previousEventTypes,false,false,false);
  // End of first loop of events in section 2.
  previousEventTypes := ("CS2-F",1,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-G",1,previousEventTypes,false,false,false);
  // Start of second loop in section 2 of sequence - this loop includes an XOR break-out alternative at event CS2-E
  previousEventTypes := ("CS2-G",1,"","") & ("CS2-F",2,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-D",2,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-D",2,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-E",2,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-E",2,"LoopBreakoutAtCS2-E2","XOR");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-F",2,previousEventTypes,false,false,false);
  // End of second loop in section2 of sequence
  //
  // ...and now the remaining event definitions for section 2 of sequence.
  previousEventTypes := ("CS2-E",2,"LoopBreakoutAtCS2-E2","XOR");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-T",1,previousEventTypes,false,false,true);
  previousEventTypes := ("CS2-F",2,"","") & ("CS2-T",1,"","") & ("CS2-M",1,"ErrorAtCS2-M1","XOR");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-H",1,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-H",1,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-J",1,previousEventTypes,false,true,false);
  //
  // Event definitions for section 3 of sequence...
  previousEventTypes := ("CS2-C",1,"MultiWayANDFork","AND");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-K",1,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-K",1,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-L",1,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-L",1,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-M",1,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-M",1,"ErrorAtCS2-M1","XOR");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-N",1,previousEventTypes,false,true,false);
  //
  // Event definitions for section 4 of sequence...
  previousEventTypes := ("CS2-C",1,"MultiWayANDFork","AND");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-P",1,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-P",1,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-Q",1,previousEventTypes,false,true,false);
  //
  // Event definitions for section 5 of sequence...
  previousEventTypes := ("CS2-C",1,"MultiWayANDFork","AND");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-C",2,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-C",2,"","") & ("CS2-E",3,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-D",3,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-D",3,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-E",3,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-E",3,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-F",3,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-F",3,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-D",4,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-D",4,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-G",2,previousEventTypes,false,true,false);
  //
  // Event definitions for section 6 of sequence...
  previousEventTypes := ("CS2-C",1,"MultiWayANDFork","AND") & ("CS2-S",1,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-S",1,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-S",1,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-D",5,previousEventTypes,false,false,false);
  previousEventTypes := ("CS2-D",5,"","");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-E",4,previousEventTypes,false,true,false);
  //
  // Event definitions for section 7 of sequence...
  previousEventTypes := ("CS2-C",1,"ErrorAtCS2-C1","XOR");
  eventDefinition ("ComplexJob2","ComplexSequence","CS2-R",1,previousEventTypes,false,true,false);
  //
  // Now, set up the dynamic control definitions for 'ComplexJob2'...
  dynamicControlDefinition("ComplexJob2", "LC1", dynamicControlTypeEnum.LOOPCOUNT, "CS2-B",1,"CS2-E",1);
  dynamicControlDefinition("ComplexJob2", "LC2", dynamicControlTypeEnum.LOOPCOUNT, "CS2-B",1,"CS2-D",2);
  dynamicControlDefinition("ComplexJob2", "LC3", dynamicControlTypeEnum.LOOPCOUNT, "CS2-A",1,"CS2-S",1);
  dynamicControlDefinition("ComplexJob2", "LC4", dynamicControlTypeEnum.LOOPCOUNT, "CS2-B",1,"CS2-F",1);
  dynamicControlDefinition("ComplexJob2", "BC1", dynamicControlTypeEnum.BRANCHCOUNT, "CS2-F",3,"CS2-F",3);
  dynamicControlDefinition("ComplexJob2", "BC2", dynamicControlTypeEnum.BRANCHCOUNT, "CS2-A",1,"CS2-K",1);
  //
  // And then set up the Invariant definitions for 'ComplexJob2'...
  // Define an intra-job invariant for the 'ComplexJob2' that is used at B,1 and H,1
  invariantEventTypeUses := ("CS2-B",1,"") & ("CS2-H",1,"");
  intraJobInvariantDefinition("ComplexJob2","InvariantA",invariantEventTypeUses);
  
  // Now define the event definitions for 'GenerateAuthorisationTokenJob'...
  //previousEventTypes := empty;
  //eventDefinition ("GenerateAuthorisationTokenJob","GenerateAuthorisationToken","TOK-A",1,previousEventTypes,true,false,false);  
  //previousEventTypes := ("TOK-A",1,"","");
  //eventDefinition ("GenerateAuthorisationTokenJob","GenerateAuthorisationToken","TOK-B",1,previousEventTypes,false,false,false);
  //previousEventTypes := ("TOK-B",1,"","");
  //eventDefinition ("GenerateAuthorisationTokenJob","GenerateAuthorisationToken","TOK-C",1,previousEventTypes,false,false,false);
  //previousEventTypes := ("TOK-C",1,"","");
  //eventDefinition ("GenerateAuthorisationTokenJob","GenerateAuthorisationToken","TOK-D",1,previousEventTypes,false,true,false);
  
  //Define the source of the ExtraJobInvariant 'AUTH_TOKEN_A' in the 'GenerateAuthorisationTokenJob' that is used by
  // event occurrences CS2-E,1 & CS2-L,1 & CS2-F,3 in the 'ComplexJob2'.
  userEventOccurrences := ("ComplexJob2","CS2-E",1,"") & ("ComplexJob2","CS2-L",1,"") & ("ComplexJob2","CS2-D",4,"");
  //extraJobInvariantDefinition("AUTH_TOKEN_A", "GenerateAuthorisationTokenJob", "TOK-D",1,userEventOccurrences);
  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

