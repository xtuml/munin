//! ACTIVITY BEGIN. '4cded56f-8e48-4fec-9a14-8096c119868a' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test63InvalidLoopWithNonIntegerLoopCount () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
theDynamicControlDefn : instance of DynamicControlDefinition;
sourceOccurrence: instance of AEOccurrenceInSequenceDefinition;
userOccurrence: instance of AEOccurrenceInSequenceDefinition;
theJobDefn : instance of JobDefinition;
theDynamicControl : instance of DynamicControl;
theDynamicControls : set of instance of DynamicControl;

begin
  // initial Test of Definitions
  theDynamicControlDefn := find_one DynamicControlDefinition (dynamicControlName = "Counter_1");
  sourceOccurrence := theDynamicControlDefn -> R30;
  userOccurrence := theDynamicControlDefn -> R31;
  theJobDefn := theDynamicControlDefn -> R32;
  
  Assertions::assertTrue(theDynamicControlDefn.dynamicControlName = "Counter_1", "Loop Counter not created as expected: " & theDynamicControlDefn.dynamicControlName);
  Assertions::assertTrue((theDynamicControlDefn -> R30 -> R12 -> R1.SequencedAuditEventDefinition).AEType = "LCLA", "Source Event for Dynamic Control is incorrect: " & (theDynamicControlDefn -> R30 -> R12 -> R1.SequencedAuditEventDefinition).AEType);
//  Assertions::assertTrue((theDynamicControlDefn -> R31 -> R12 -> R1.AuditEventDefinition).AEType = "LCLB", "User Event for Dynamic Control is incorrect: " & (theDynamicControlDefn -> R31 -> R12 -> R1.AuditEventDefinition).AEType);
  Assertions::assertTrue(theJobDefn.jobName = "LoopCountJob", "Job not created as expected: " & theJobDefn.jobName);
  
  
  // This test covers 1 Jobs with 1 sequences based on a looped path definition - 5 full iterations of the loop
  // but the loop count has an erroneous non-integer value
  // This test does  reveal any erroneous behaviour of the twin
  //
  // Loop count should be an integer. Here is it replaced by the string "FIVE" to provoke an error
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "Counter_1", "FIVE");
  acceptOrderedEvent ("1620920000","LCLA","Job_LoopCount_1","LoopCountJob","","Ev301",theAuditEventData);
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","LCLB","Job_LoopCount_1","LoopCountJob","Ev301","Ev302",theAuditEventData);
  acceptOrderedEvent ("1620920002","LCLC","Job_LoopCount_1","LoopCountJob","Ev302","Ev303",theAuditEventData);
  acceptOrderedEvent ("1620920003","LCLD","Job_LoopCount_1","LoopCountJob","Ev303","Ev304",theAuditEventData);
  acceptOrderedEvent ("1620920004","LCLB","Job_LoopCount_1","LoopCountJob","Ev304","Ev305",theAuditEventData);
  acceptOrderedEvent ("1620920005","LCLC","Job_LoopCount_1","LoopCountJob","Ev305","Ev306",theAuditEventData);
  acceptOrderedEvent ("1620920006","LCLD","Job_LoopCount_1","LoopCountJob","Ev306","Ev307",theAuditEventData);
  acceptOrderedEvent ("1620920007","LCLB","Job_LoopCount_1","LoopCountJob","Ev307","Ev308",theAuditEventData);
  acceptOrderedEvent ("1620920008","LCLC","Job_LoopCount_1","LoopCountJob","Ev308","Ev309",theAuditEventData);
  acceptOrderedEvent ("1620920009","LCLD","Job_LoopCount_1","LoopCountJob","Ev309","Ev310",theAuditEventData);
  acceptOrderedEvent ("1620920010","LCLB","Job_LoopCount_1","LoopCountJob","Ev310","Ev311",theAuditEventData);
  acceptOrderedEvent ("1620920011","LCLC","Job_LoopCount_1","LoopCountJob","Ev311","Ev312",theAuditEventData);
  acceptOrderedEvent ("1620920012","LCLD","Job_LoopCount_1","LoopCountJob","Ev312","Ev313",theAuditEventData);
  acceptOrderedEvent ("1620920013","LCLB","Job_LoopCount_1","LoopCountJob","Ev313","Ev314",theAuditEventData);
  acceptOrderedEvent ("1620920014","LCLC","Job_LoopCount_1","LoopCountJob","Ev314","Ev315",theAuditEventData);
  acceptOrderedEvent ("1620920015","LCLD","Job_LoopCount_1","LoopCountJob","Ev315","Ev316",theAuditEventData);
  acceptOrderedEvent ("1620920016","LCLE","Job_LoopCount_1","LoopCountJob","Ev316","Ev317",theAuditEventData);

  //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted = false, "Job completed even though loop count was invalid: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '98dfb3f9-4ba1-4f93-84fa-9b6bca1ba933' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test29NormalBranchCountWithSameSourceAndUserEvent () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Job with 1 sequences based on a fork and merge path definition - there are 10 branches
  // This test does not reveal any erroneous behaviour of the twin but does demonstrate use of the same source and user event
  //
  acceptOrderedEvent ("1620920000","SSUFA","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev301",theAuditEventData);
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "Branch_SameSourceAndUser_1", "10");
  previousEvents := ("Ev301");
  acceptOrderedEvent ("1620920001","SSUFB","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev302",theAuditEventData);
  theAuditEventData :=  emptyAuditEventData;
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SSUFC","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SSUFC","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SSUFC","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SSUFC","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SSUFC","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SSUFC","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SSUFC","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SSUFC","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SSUFC","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SSUFC","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev312",theAuditEventData);
  previousEvents := empty & "Ev303" & "Ev304" & "Ev305" & "Ev306" & "Ev307" & "Ev308" & "Ev309" & "Ev310" & "Ev311" & "Ev312";
  acceptOrderedEvent ("1620920003","SSUFD","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := ("Ev313");
  acceptOrderedEvent ("1620920004","SSUFE","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := ("Ev314");
  acceptOrderedEvent ("1620920005","SSUFF","Branch_Count_Job_SSU","BranchSameSourceAndUserJob",previousEvents,"Ev315",theAuditEventData);
 //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 15, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '4f40861d-adb9-4b43-868e-8d6225259141' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test64InvalidLoopWithLoopCountExceedingExpectedValue () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
theDynamicControlDefn : instance of DynamicControlDefinition;
sourceOccurrence: instance of AEOccurrenceInSequenceDefinition;
userOccurrence: instance of AEOccurrenceInSequenceDefinition;
theJobDefn : instance of JobDefinition;
theDynamicControl : instance of DynamicControl;
theDynamicControls : set of instance of DynamicControl;

begin
  // initial Test of Definitions
  theDynamicControlDefn := find_one DynamicControlDefinition (dynamicControlName = "Counter_1");
  sourceOccurrence := theDynamicControlDefn -> R30;
  userOccurrence := theDynamicControlDefn -> R31;
  theJobDefn := theDynamicControlDefn -> R32;
  
  Assertions::assertTrue(theDynamicControlDefn.dynamicControlName = "Counter_1", "Loop Counter not created as expected: " & theDynamicControlDefn.dynamicControlName);
  Assertions::assertTrue((theDynamicControlDefn -> R30 -> R12 -> R1.SequencedAuditEventDefinition).AEType = "LCLA", "Source Event for Dynamic Control is incorrect: " & (theDynamicControlDefn -> R30 -> R12 -> R1.SequencedAuditEventDefinition).AEType);
//  Assertions::assertTrue((theDynamicControlDefn -> R31 -> R12 -> R1.AuditEventDefinition).AEType = "LCLB", "User Event for Dynamic Control is incorrect: " & (theDynamicControlDefn -> R31 -> R12 -> R1.AuditEventDefinition).AEType);
  Assertions::assertTrue(theJobDefn.jobName = "LoopCountJob", "Job not created as expected: " & theJobDefn.jobName);
  
  
  // This test covers 1 Jobs with 1 sequences based on a looped path definition - 4 full iterations of the loop
  // followed by an error which cause the loop to be exited.
  // This test does not reveal any erroneous behaviour of the twin
  //
  
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "Counter_1", "5");
  acceptOrderedEvent ("1620920000","LCLA","Job_LoopCount_1","LoopCountJob","","Ev301",theAuditEventData);
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","LCLB","Job_LoopCount_1","LoopCountJob","Ev301","Ev302",theAuditEventData);
  acceptOrderedEvent ("1620920002","LCLC","Job_LoopCount_1","LoopCountJob","Ev302","Ev303",theAuditEventData);
  acceptOrderedEvent ("1620920003","LCLD","Job_LoopCount_1","LoopCountJob","Ev303","Ev304",theAuditEventData);
  acceptOrderedEvent ("1620920004","LCLB","Job_LoopCount_1","LoopCountJob","Ev304","Ev305",theAuditEventData);
  acceptOrderedEvent ("1620920005","LCLC","Job_LoopCount_1","LoopCountJob","Ev305","Ev306",theAuditEventData);
  acceptOrderedEvent ("1620920006","LCLD","Job_LoopCount_1","LoopCountJob","Ev306","Ev307",theAuditEventData);
  acceptOrderedEvent ("1620920007","LCLB","Job_LoopCount_1","LoopCountJob","Ev307","Ev308",theAuditEventData);
  acceptOrderedEvent ("1620920008","LCLC","Job_LoopCount_1","LoopCountJob","Ev308","Ev309",theAuditEventData);
  acceptOrderedEvent ("1620920009","LCLD","Job_LoopCount_1","LoopCountJob","Ev309","Ev310",theAuditEventData);
  acceptOrderedEvent ("1620920010","LCLB","Job_LoopCount_1","LoopCountJob","Ev310","Ev311",theAuditEventData);
  acceptOrderedEvent ("1620920011","LCLC","Job_LoopCount_1","LoopCountJob","Ev311","Ev312",theAuditEventData);
  acceptOrderedEvent ("1620920012","LCLD","Job_LoopCount_1","LoopCountJob","Ev312","Ev313",theAuditEventData);
  acceptOrderedEvent ("1620920013","LCLB","Job_LoopCount_1","LoopCountJob","Ev313","Ev314",theAuditEventData);
  acceptOrderedEvent ("1620920014","LCLC","Job_LoopCount_1","LoopCountJob","Ev314","Ev315",theAuditEventData);
  acceptOrderedEvent ("1620920015","LCLD","Job_LoopCount_1","LoopCountJob","Ev315","Ev316",theAuditEventData);
  acceptOrderedEvent ("1620920016","LCLB","Job_LoopCount_1","LoopCountJob","Ev316","Ev317",theAuditEventData);
  acceptOrderedEvent ("1620920017","LCLC","Job_LoopCount_1","LoopCountJob","Ev317","Ev318",theAuditEventData);
  acceptOrderedEvent ("1620920018","LCLD","Job_LoopCount_1","LoopCountJob","Ev318","Ev319",theAuditEventData);
  acceptOrderedEvent ("1620920019","LCLE","Job_LoopCount_1","LoopCountJob","Ev319","Ev320",theAuditEventData);

  //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted = false, "Job completed even though loop count exceeded the expected value: " & theJob.jobID);
 end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '5f653156-31f3-4973-983d-7e8e9c0c7a14' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test200NormalInstanceForkWithBranchAndMergeCount () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Job with 1 sequences based on a fork and merge path definition - there are 10 branches
  // This test does not reveal any erroneous behaviour of the twin
  //
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "Branch_Counter_1", "10");
  theAuditEventData := theAuditEventData & (aeDataKindEnum.MERGECOUNT, "Merge_Counter_1", "10");
  acceptOrderedEvent ("1620920000","BCFA","Branch_Count_Job","BranchCountJob",previousEvents,"Ev301",theAuditEventData);
  theAuditEventData :=  emptyAuditEventData;
  previousEvents := ("Ev301");
  acceptOrderedEvent ("1620920001","BCFB","Branch_Count_Job","BranchCountJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev312",theAuditEventData);
  previousEvents := empty & "Ev303" & "Ev304" & "Ev305" & "Ev306" & "Ev307" & "Ev308" & "Ev309" & "Ev310" & "Ev311" & "Ev312";
  acceptOrderedEvent ("1620920003","BCFD","Branch_Count_Job","BranchCountJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := ("Ev313");
  acceptOrderedEvent ("1620920004","BCFE","Branch_Count_Job","BranchCountJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := ("Ev314");
  acceptOrderedEvent ("1620920005","BCFF","Branch_Count_Job","BranchCountJob",previousEvents,"Ev315",theAuditEventData);
 //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 15, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '41148b44-b55d-4ee3-8075-ef5d2c6a820a' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test250IllegalInstanceForkAndMergePath () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Job with 1 sequences based on a fork and merge path definition - there are 3 branches
  // However no branch count is provided so the test will fail
  // This test does reveal any erroneous behaviour of the twin
  //
  acceptOrderedEvent ("1620920000","IFA","Instance_FandM_Job","InstForkJob",previousEvents,"Ev301",theAuditEventData);
  previousEvents := ("Ev301");
  acceptOrderedEvent ("1620920001","IFB","Instance_FandM_Job","InstForkJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev312",theAuditEventData);
  previousEvents := empty & "Ev303" & "Ev304" & "Ev305" & "Ev306" & "Ev307" & "Ev308" & "Ev309" & "Ev310" & "Ev311" & "Ev312";
  acceptOrderedEvent ("1620920003","IFD","Instance_FandM_Job","InstForkJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := ("Ev313");
  acceptOrderedEvent ("1620920004","IFE","Instance_FandM_Job","InstForkJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := ("Ev314");
  acceptOrderedEvent ("1620920005","IFF","Instance_FandM_Job","InstForkJob",previousEvents,"Ev315",theAuditEventData);
 //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted = false, "Job completed despite having no branch count: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '20368041-ef75-4561-a07a-f4198ed9831d' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test251IllegalSplitInstanceForkAndMergePath () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Job with 2 sequences based on a split fork and merge path definition - there are 10 branches
  // This test does reveal any erroneous behaviour of the twin
  // Forking Sequence
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "Branch_Counter_3", "10");
  acceptOrderedEvent ("1620920000","SIFA","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev301",theAuditEventData);
  theAuditEventData := emptyAuditEventData;
  previousEvents := ("Ev301");
  acceptOrderedEvent ("1620920001","SIFB","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev312",theAuditEventData);
  
  // Merging Sequence
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev315",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev316",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev317",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev318",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev319",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev320",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev321",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev322",theAuditEventData);
  previousEvents := empty & "Ev313" & "Ev314" & "Ev315" & "Ev316" & "Ev317" & "Ev318" & "Ev319" & "Ev320" & "Ev321" & "Ev322";
  acceptOrderedEvent ("1620920004","SIFE","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev323",theAuditEventData);
  previousEvents := ("Ev323");
  acceptOrderedEvent ("1620920005","SIFF","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev324",theAuditEventData);
 //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted = false, "Job completed despite having no branch count: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '0b3a718b-eb02-45ab-9ad7-7ee673712201' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test252IllegalInstanceAndTypeForkAndMergePath () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Job with 1 sequence based on a fork and merge path definition - 
  // there are 3 type branches and each type branch has 5 instance branches 
  // all at the same fork point
  // This test does reveal any erroneous behaviour of the twin
  //
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "Branch_Counter_3", "15");
  acceptOrderedEvent ("1620920000","FMA","Job_FandM","BranchedJob",previousEvents,"Ev301",theAuditEventData);
  theAuditEventData := emptyAuditEventData;
  previousEvents := ("Ev301");
  acceptOrderedEvent ("1620920001","FMB","Job_FandM","BranchedJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMC","Job_FandM","BranchedJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMC","Job_FandM","BranchedJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMC","Job_FandM","BranchedJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMC","Job_FandM","BranchedJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMC","Job_FandM","BranchedJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMD","Job_FandM","BranchedJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMD","Job_FandM","BranchedJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMD","Job_FandM","BranchedJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMD","Job_FandM","BranchedJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMD","Job_FandM","BranchedJob",previousEvents,"Ev312",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FME","Job_FandM","BranchedJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FME","Job_FandM","BranchedJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FME","Job_FandM","BranchedJob",previousEvents,"Ev315",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FME","Job_FandM","BranchedJob",previousEvents,"Ev316",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FME","Job_FandM","BranchedJob",previousEvents,"Ev317",theAuditEventData);
   
  // The merge point
  previousEvents := empty & "Ev303" & "Ev304" & "Ev305" & "Ev306" & "Ev307" & "Ev308" & "Ev309" & "Ev310" & "Ev311" & "Ev312" & "Ev313" & "Ev314" & "Ev315" & "Ev316" & "Ev317";
  acceptOrderedEvent ("1620920006","FMF","Job_FandM","BranchedJob",previousEvents,"Ev318",theAuditEventData);
  previousEvents := ("Ev318");
  acceptOrderedEvent ("1620920007","FMG","Job_FandM","BranchedJob",previousEvents,"Ev319",theAuditEventData);
  //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted = false, "Job completed despite having no branch count: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '0c97faca-2a3b-47d0-87a2-87d633707061' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test203NormalTypeAndInstanceForkWithBranchAndMergeCount () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Job with 1 sequence based on a fork and merge path definition - 
  // there are 3 type branches and each type branch has 5 instance branches 
  // all at the same fork and merge points. Branch and Merge counts are defined.
  // This test does not reveal any erroneous behaviour of the twin
  //
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "TypeFork_1", "15");
  theAuditEventData := theAuditEventData & (aeDataKindEnum.MERGECOUNT, "TypeFork_2", "15");
  acceptOrderedEvent ("1620920000","FMA","Job_FandM","BranchedJob",previousEvents,"Ev301",theAuditEventData);
  theAuditEventData := emptyAuditEventData;
  previousEvents := ("Ev301");
  acceptOrderedEvent ("1620920001","FMB","Job_FandM","BranchedJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMC","Job_FandM","BranchedJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMC","Job_FandM","BranchedJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMC","Job_FandM","BranchedJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMC","Job_FandM","BranchedJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMC","Job_FandM","BranchedJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMD","Job_FandM","BranchedJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMD","Job_FandM","BranchedJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMD","Job_FandM","BranchedJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMD","Job_FandM","BranchedJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FMD","Job_FandM","BranchedJob",previousEvents,"Ev312",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FME","Job_FandM","BranchedJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FME","Job_FandM","BranchedJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FME","Job_FandM","BranchedJob",previousEvents,"Ev315",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FME","Job_FandM","BranchedJob",previousEvents,"Ev316",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920001","FME","Job_FandM","BranchedJob",previousEvents,"Ev317",theAuditEventData);
   
  // The merge point
  previousEvents := empty & "Ev303" & "Ev304" & "Ev305" & "Ev306" & "Ev307" & "Ev308" & "Ev309" & "Ev310" & "Ev311" & "Ev312" & "Ev313" & "Ev314" & "Ev315" & "Ev316" & "Ev317";
  acceptOrderedEvent ("1620920006","FMF","Job_FandM","BranchedJob",previousEvents,"Ev318",theAuditEventData);
  previousEvents := ("Ev318");
  acceptOrderedEvent ("1620920007","FMG","Job_FandM","BranchedJob",previousEvents,"Ev319",theAuditEventData);
  //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 19, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '08b32a91-9e3c-41cd-afb4-1e4733539108' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test201NormalInstanceForkWithBranchAndMergeCount () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Job with 1 sequences based on a fork and merge path definition - there are 3 branches
  // This test does not reveal any erroneous behaviour of the twin
  //
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "InstFork_1", "10");
  theAuditEventData := theAuditEventData & (aeDataKindEnum.MERGECOUNT, "InstMerge_1", "10");
  acceptOrderedEvent ("1620920000","IFA","Instance_FandM_Job","InstForkJob",previousEvents,"Ev301",theAuditEventData);
  theAuditEventData := emptyAuditEventData;
  previousEvents := ("Ev301");
  acceptOrderedEvent ("1620920001","IFB","Instance_FandM_Job","InstForkJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev312",theAuditEventData);
  previousEvents := empty & "Ev303" & "Ev304" & "Ev305" & "Ev306" & "Ev307" & "Ev308" & "Ev309" & "Ev310" & "Ev311" & "Ev312";
  acceptOrderedEvent ("1620920003","IFD","Instance_FandM_Job","InstForkJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := ("Ev313");
  acceptOrderedEvent ("1620920004","IFE","Instance_FandM_Job","InstForkJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := ("Ev314");
  acceptOrderedEvent ("1620920005","IFF","Instance_FandM_Job","InstForkJob",previousEvents,"Ev315",theAuditEventData);
 //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 15, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '37a6d0d1-c1c1-4302-a498-ace07518d026' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test202NormalSplitInstanceForkWithBranchAndMergeCount () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Job with 2 sequences based on a split fork and merge path definition - there are 10 branches
  // This test does not reveal any erroneous behaviour of the twin
  // Forking Sequence

  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "SplitInstFork_1", "10");
  theAuditEventData := theAuditEventData & (aeDataKindEnum.MERGECOUNT, "SplitInstMerge_1", "10");
  acceptOrderedEvent ("1620920000","SIFA","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev301",theAuditEventData);
  theAuditEventData := emptyAuditEventData;
  previousEvents := ("Ev301");
  acceptOrderedEvent ("1620920001","SIFB","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev312",theAuditEventData);
  
  // Merging Sequence
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev315",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev316",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev317",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev318",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev319",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev320",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev321",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev322",theAuditEventData);
  previousEvents := empty & "Ev313" & "Ev314" & "Ev315" & "Ev316" & "Ev317" & "Ev318" & "Ev319" & "Ev320" & "Ev321" & "Ev322";
  acceptOrderedEvent ("1620920004","SIFE","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev323",theAuditEventData);
  previousEvents := ("Ev323");
  acceptOrderedEvent ("1620920005","SIFF","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev324",theAuditEventData);
 //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 24, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'ac486785-caa0-4039-b2f7-bd14ee5d67bf' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test254IllegalInstanceForkWithIncorrectBranchAndMergeCount () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Job with 1 sequences based on a fork and merge path definition - there are 3 branches
  // The branch and merge count is set to 9 though there are 10 branches merging
  // This test does reveal any erroneous behaviour of the twin
  //
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "InstFork_1", "9");
  theAuditEventData := theAuditEventData & (aeDataKindEnum.MERGECOUNT, "InstMerge_1", "9");
  acceptOrderedEvent ("1620920000","IFA","Instance_FandM_Job","InstForkJob",previousEvents,"Ev301",theAuditEventData);
  theAuditEventData := emptyAuditEventData;
  previousEvents := ("Ev301");
  acceptOrderedEvent ("1620920001","IFB","Instance_FandM_Job","InstForkJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","IFC","Instance_FandM_Job","InstForkJob",previousEvents,"Ev312",theAuditEventData);
  previousEvents := empty & "Ev303" & "Ev304" & "Ev305" & "Ev306" & "Ev307" & "Ev308" & "Ev309" & "Ev310" & "Ev311" & "Ev312";
  acceptOrderedEvent ("1620920003","IFD","Instance_FandM_Job","InstForkJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := ("Ev313");
  acceptOrderedEvent ("1620920004","IFE","Instance_FandM_Job","InstForkJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := ("Ev314");
  acceptOrderedEvent ("1620920005","IFF","Instance_FandM_Job","InstForkJob",previousEvents,"Ev315",theAuditEventData);
 //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted = false, "Job completed even though the branch and merge count is incorrect: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '9dd36025-f91f-488c-81b7-a602c933f4ad' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test255IllegalSplitInstanceForkWithBranchAndMergeCount () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Job with 2 sequences based on a split fork and merge path definition - there are 10 branches
  // There merge count has been set to 11 though only 10 branches merge at the merge point
  // This test does reveal any erroneous behaviour of the twin
  // Forking Sequence

  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "SplitInstFork_1", "10");
  theAuditEventData := theAuditEventData & (aeDataKindEnum.MERGECOUNT, "SplitInstMerge_1", "11");
  acceptOrderedEvent ("1620920000","SIFA","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev301",theAuditEventData);
  theAuditEventData := emptyAuditEventData;
  previousEvents := ("Ev301");
  acceptOrderedEvent ("1620920001","SIFB","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","SIFC","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev312",theAuditEventData);
  
  // Merging Sequence
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev315",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev316",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev317",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev318",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev319",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev320",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev321",theAuditEventData);
  previousEvents := empty;
  acceptOrderedEvent ("1620920003","SIFD","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev322",theAuditEventData);
  previousEvents := empty & "Ev313" & "Ev314" & "Ev315" & "Ev316" & "Ev317" & "Ev318" & "Ev319" & "Ev320" & "Ev321" & "Ev322";
  acceptOrderedEvent ("1620920004","SIFE","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev323",theAuditEventData);
  previousEvents := ("Ev323");
  acceptOrderedEvent ("1620920005","SIFF","Instance_FandM_Job","SplitInstForkJob",previousEvents,"Ev324",theAuditEventData);
 //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted = false, "Job is completed even though merge count was incorrect: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'fd59ce5a-ea6c-4e1c-aab0-964b60e6a963' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test204NormalMultiInstanceForkWithBranchAndMergeCount () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Job with 1 sequences based on a fork and merge path definition - there are 10 branches
  // This test does not reveal any erroneous behaviour of the twin
  //
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "MultiFork_1", "2");
  theAuditEventData := theAuditEventData & (aeDataKindEnum.BRANCHCOUNT, "MultiFork_2", "4");
  theAuditEventData := theAuditEventData & (aeDataKindEnum.MERGECOUNT, "MultiMerge_1", "2");
  theAuditEventData := theAuditEventData & (aeDataKindEnum.MERGECOUNT, "MultiMerge_2", "4");
  acceptOrderedEvent ("1620920000","MFMA","MultiForkJob","MultiForkJob",previousEvents,"Ev301",theAuditEventData);
  theAuditEventData :=  emptyAuditEventData;
  previousEvents := ("Ev301");
  acceptOrderedEvent ("1620920001","MFMB","MultiForkJob","MultiForkJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","MFMC","MultiForkJob","MultiForkJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","MFMC","MultiForkJob","MultiForkJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev303");
  acceptOrderedEvent ("1620920002","MFMD","MultiForkJob","MultiForkJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev303");
  acceptOrderedEvent ("1620920002","MFMD","MultiForkJob","MultiForkJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev303");
  acceptOrderedEvent ("1620920002","MFMD","MultiForkJob","MultiForkJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev303");
  acceptOrderedEvent ("1620920002","MFMD","MultiForkJob","MultiForkJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev304");
  acceptOrderedEvent ("1620920002","MFMD","MultiForkJob","MultiForkJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev304");
  acceptOrderedEvent ("1620920002","MFMD","MultiForkJob","MultiForkJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev304");
  acceptOrderedEvent ("1620920002","MFMD","MultiForkJob","MultiForkJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev304");
  acceptOrderedEvent ("1620920002","MFMD","MultiForkJob","MultiForkJob",previousEvents,"Ev312",theAuditEventData);
  previousEvents := empty & "Ev305" & "Ev306";
  acceptOrderedEvent ("1620920003","MFME","MultiForkJob","MultiForkJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := empty & "Ev307" & "Ev308";
  acceptOrderedEvent ("1620920003","MFME","MultiForkJob","MultiForkJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := empty & "Ev309" & "Ev310";
  acceptOrderedEvent ("1620920003","MFME","MultiForkJob","MultiForkJob",previousEvents,"Ev315",theAuditEventData);
  previousEvents := empty & "Ev311" & "Ev312";
  acceptOrderedEvent ("1620920003","MFME","MultiForkJob","MultiForkJob",previousEvents,"Ev316",theAuditEventData);
  previousEvents := empty & "Ev313" & "Ev314" & "Ev315" & "Ev316";
  acceptOrderedEvent ("1620920004","MFMF","MultiForkJob","MultiForkJob",previousEvents,"Ev317",theAuditEventData);
  previousEvents := ("Ev317");
  acceptOrderedEvent ("1620920005","MFMG","MultiForkJob","MultiForkJob",previousEvents,"Ev318",theAuditEventData);
 //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 18, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '6f2d058c-034d-4399-959f-32ad44e48c84' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test205NormalUserExtraJobInvariantWithRestoredSourceEJI () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
theUserInvariants : set of instance of TransientInvariant;
theSourceInvariants : set of instance of PersistedInvariant;
previousEvents : sequence of string;
restoredInvariant : persistedInvariantStructure;
restoredInvariants : sequence of persistedInvariantStructure;
empty : sequence of string;
logMessage : string;

thePersistedInvariants : set of instance of PersistedInvariant;
thePersistedInvariant : instance of PersistedInvariant;
theExtraJobInvariantDefn : instance of ExtraJobInvariantDefn;

begin
  // This test initially creates 1 Auth Job with 2 persistentinvariant values being defined
  // This part of the test does not reveal any erroneous behaviour of the twin
  //
  
  // This test test that the persistentinvariant can be used ok using 1 Job with 3 sequences and all events are in the standard default order
  // 3 of the events refer to the persistentinvariant value and all must match to pass the extra job invariant check
  // This test does not reveal any erroneous behaviour of the twin
  //
  // Bank Transfer Sequence
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Restore1");
  acceptOrderedEvent ("1620920000","ENearInput","Job_PersistentInvariant_Use","EBankTransferJob","","Ev1",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","ENearPartWrite","Job_PersistentInvariant_Use","EBankTransferJob","Ev1","Ev2",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920002","ENearJustificationWrite","Job_PersistentInvariant_Use","EBankTransferJob","Ev2","Ev3",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920003","EAgentRequestWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev3","Ev4",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920004","EAuthoriserReadWidgetRequest","Job_PersistentInvariant_Use","EBankTransferJob","Ev4","Ev5",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920005","EAuthoriserParsedJustification","Job_PersistentInvariant_Use","EBankTransferJob","Ev5","Ev6",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920006","EAuthoriserSendWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev6","Ev7",theAuditEventData);
  
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Restore1");
  acceptOrderedEvent ("1620920007","EAgentReceiveWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev7","Ev8",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920008","EAgentPartRead","Job_PersistentInvariant_Use","EBankTransferJob","Ev8","Ev9",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920008","EAgentProcessedRequest","Job_PersistentInvariant_Use","EBankTransferJob","Ev8","Ev9a",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920009","EAgentWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev9","Ev10",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920010","EGatewayReadPayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev10","Ev11",theAuditEventData);
  
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Restore1");
  acceptOrderedEvent ("1620920011","EGatewayWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev11","Ev12",theAuditEventData);
  
  // Mid Sequence - note first event of a sequence has no previous event id (penultimate parameter)
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920012","EMidProcessPayload","Job_PersistentInvariant_Use","EBankTransferJob","","Ev13",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920013","EMidWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev13","Ev14",theAuditEventData);
  
  // Far Side Sequence - note first event of a sequence has no previous event id (penultimate parameter)
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920050","EFarInput","Job_PersistentInvariant_Use","EBankTransferJob","","Ev50",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920055","EFarOutput","Job_PersistentInvariant_Use","EBankTransferJob","Ev50","Ev55",theAuditEventData);
  //
  Test::service_event_queue();
  theJob := find_only Job(jobID = "Job_PersistentInvariant_Use");
  Test::fire_timer(theJob.jobEventTimer);
  Test::service_event_queue();
  //
  // The invariant provided does not match any source invariant at this point so SVDC will request an update from the persistence
  // service to see if that source invariant has been made available elsewhere. The next section simulates the required
  // invariant being found and provided
  
  // Simulate the Persistence domain providing an updated set of invariants
  
  restoredInvariant.invariantName := "PersistentInvariantTypeB";
  restoredInvariant.invariantValue := "Restore1";
  restoredInvariant.validFrom := timestamp'now;
  restoredInvariant.validTo := restoredInvariant.validFrom + @P1D@;
  restoredInvariant.sourceJobDefinitionType := "Auth_PersistentInvariantJob";
  restoredInvariant.sourceAuditEventType := "EAuthoriserReceiveOrder";
  restoredInvariant.sourceAuditEventOccurrenceId := 1;
  
  restoredInvariants := restoredInvariants & restoredInvariant;
  
  restoreInvariants (restoredInvariants);
  //
  //
  Test::service_event_queue();
  //
  
  theJob := find_only Job(jobID = "Job_PersistentInvariant_Use");
  Test::fire_timer(theJob.jobEventTimer);

  Test::service_event_queue();
  
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theUserInvariants := theAuditEvents -> R23;
  theSourceInvariants := find PersistedInvariant(inForce = true);
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 3, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 17, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theUserInvariants'length = 3, "Wrong number of user invariants created: " & (theUserInvariants'length)'image);
  Assertions::assertTrue(theSourceInvariants'length = 1, "Wrong number of source invariants in force: " & (theSourceInvariants'length)'image);
  for eachJob in theJobs loop
    Assertions::assertTrue(eachJob.jobCompleted, "Job is incomplete: " & eachJob.jobID);
    Assertions::assertTrue(eachJob.sequencingFailed = false, "Sequencing has failed: " & eachJob.jobID);
  end loop; 
  
  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
  thePersistedInvariants := find PersistedInvariant();
  for thePersistedInvariant in thePersistedInvariants loop
    thePersistedInvariant.deletePersistedInvariant();   
  end loop; 
  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '61685058-10b8-4552-942d-cec8667db6f2' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test206NormalUserExtraJobInvariantWithRestoredSourceEJI () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
theUserInvariants : set of instance of TransientInvariant;
theSourceInvariants : set of instance of PersistedInvariant;
previousEvents : sequence of string;
empty : sequence of string;
logMessage : string;

thePersistedInvariants : set of instance of PersistedInvariant;
thePersistedInvariant : instance of PersistedInvariant;
theExtraJobInvariantDefn : instance of ExtraJobInvariantDefn;
restoredInvariant : persistedInvariantStructure;
restoredInvariants : sequence of persistedInvariantStructure;

begin
  // This test initially simulates the pulling in of a persisted invariant that was sourced in a different
  // instance of SVDC. This tests the restore of persisted invariants from the Persistence Service
  // using the provided interface service restoreInvariants - 2 persistentinvariant values being restored
  // This part of the test does not reveal any erroneous behaviour of the twin
  //
  
  restoredInvariant.invariantName := "PersistentInvariantTypeB";
  restoredInvariant.invariantValue := "Restore2";
  restoredInvariant.validFrom := timestamp'now;
  restoredInvariant.validTo := restoredInvariant.validFrom + @P1D@;
  restoredInvariant.sourceJobDefinitionType := "Auth_PersistentInvariantJob";
  restoredInvariant.sourceAuditEventType := "EAuthoriserReceiveOrder";
  restoredInvariant.sourceAuditEventOccurrenceId := 1;
  
  restoredInvariants := restoredInvariants & restoredInvariant;
  
  restoredInvariant.invariantName := "PersistentInvariantTypeB";
  restoredInvariant.invariantValue := "Restore3";
  restoredInvariant.validFrom := timestamp'now;
  restoredInvariant.validTo := restoredInvariant.validFrom + @P1D@;
  restoredInvariant.sourceJobDefinitionType := "Auth_PersistentInvariantJob";
  restoredInvariant.sourceAuditEventType := "EAuthoriserReceiveOrder";
  restoredInvariant.sourceAuditEventOccurrenceId := 1;
  
  restoredInvariants := restoredInvariants & restoredInvariant;
  
  restoreInvariants (restoredInvariants);
  
  // This test tests that the restored persistent invariants can be used ok using 1 Job with 3 sequences and all events are in the standard default order
  // 3 of the events refer to the persistent invariant values and all must match to pass the extra job invariant check
  // This test does not reveal any erroneous behaviour of the twin
  //
  // Bank Transfer Sequence
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Restore2");
  acceptOrderedEvent ("1620920000","ENearInput","Job_PersistentInvariant_Use","EBankTransferJob","","Ev1",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","ENearPartWrite","Job_PersistentInvariant_Use","EBankTransferJob","Ev1","Ev2",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920002","ENearJustificationWrite","Job_PersistentInvariant_Use","EBankTransferJob","Ev2","Ev3",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920003","EAgentRequestWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev3","Ev4",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920004","EAuthoriserReadWidgetRequest","Job_PersistentInvariant_Use","EBankTransferJob","Ev4","Ev5",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920005","EAuthoriserParsedJustification","Job_PersistentInvariant_Use","EBankTransferJob","Ev5","Ev6",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920006","EAuthoriserSendWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev6","Ev7",theAuditEventData);
  
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Restore2");
  acceptOrderedEvent ("1620920007","EAgentReceiveWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev7","Ev8",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920008","EAgentPartRead","Job_PersistentInvariant_Use","EBankTransferJob","Ev8","Ev9",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920008","EAgentProcessedRequest","Job_PersistentInvariant_Use","EBankTransferJob","Ev8","Ev9a",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920009","EAgentWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev9","Ev10",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920010","EGatewayReadPayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev10","Ev11",theAuditEventData);
  
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Restore3");
  acceptOrderedEvent ("1620920011","EGatewayWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev11","Ev12",theAuditEventData);
  
  // Mid Sequence - note first event of a sequence has no previous event id (penultimate parameter)
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920012","EMidProcessPayload","Job_PersistentInvariant_Use","EBankTransferJob","","Ev13",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920013","EMidWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev13","Ev14",theAuditEventData);
  
  // Far Side Sequence - note first event of a sequence has no previous event id (penultimate parameter)
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920050","EFarInput","Job_PersistentInvariant_Use","EBankTransferJob","","Ev50",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920055","EFarOutput","Job_PersistentInvariant_Use","EBankTransferJob","Ev50","Ev55",theAuditEventData);
  //
  //
  Test::service_event_queue();
  
  theJob := find_only Job(jobID = "Job_PersistentInvariant_Use");
  Test::fire_timer(theJob.jobEventTimer);

  Test::service_event_queue();
  
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theUserInvariants := theAuditEvents -> R23;
  theSourceInvariants := find PersistedInvariant(inForce = true);
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 3, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 17, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theUserInvariants'length = 3, "Wrong number of user invariants created: " & (theUserInvariants'length)'image);
  Assertions::assertTrue(theSourceInvariants'length = 2, "Wrong number of source invariants in force: " & (theSourceInvariants'length)'image);
  for eachJob in theJobs loop
    Assertions::assertTrue(eachJob.jobCompleted, "Job is incomplete: " & eachJob.jobID);
    Assertions::assertTrue(eachJob.sequencingFailed = false, "Sequencing has failed: " & eachJob.jobID);
  end loop; 
  
  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
  thePersistedInvariants := find PersistedInvariant();
  for thePersistedInvariant in thePersistedInvariants loop
    thePersistedInvariant.deletePersistedInvariant();   
  end loop; 
  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '9011f660-12a2-4578-9780-58e232a5acba' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test256TimeoutDueToNoRestoredExtraJobInvariant () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
theUserInvariants : set of instance of TransientInvariant;
theSourceInvariants : set of instance of PersistedInvariant;
previousEvents : sequence of string;
restoredInvariant : persistedInvariantStructure;
restoredInvariants : sequence of persistedInvariantStructure;
empty : sequence of string;
logMessage : string;

thePersistedInvariants : set of instance of PersistedInvariant;
thePersistedInvariant : instance of PersistedInvariant;
theExtraJobInvariantDefn : instance of ExtraJobInvariantDefn;

begin
  // This test initially creates 1 Auth Job with 2 persistentinvariant values being defined
  // This part of the test does not reveal any erroneous behaviour of the twin
  //
  
  // This test test that the persistentinvariant can be used ok using 1 Job with 3 sequences and all events are in the standard default order
  // 3 of the events refer to the persistentinvariant value and all must match to pass the extra job invariant check
  // This test does not reveal any erroneous behaviour of the twin
  //
  // Bank Transfer Sequence
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Restore1");
  acceptOrderedEvent ("1620920000","ENearInput","Job_PersistentInvariant_Use","EBankTransferJob","","Ev1",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","ENearPartWrite","Job_PersistentInvariant_Use","EBankTransferJob","Ev1","Ev2",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920002","ENearJustificationWrite","Job_PersistentInvariant_Use","EBankTransferJob","Ev2","Ev3",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920003","EAgentRequestWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev3","Ev4",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920004","EAuthoriserReadWidgetRequest","Job_PersistentInvariant_Use","EBankTransferJob","Ev4","Ev5",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920005","EAuthoriserParsedJustification","Job_PersistentInvariant_Use","EBankTransferJob","Ev5","Ev6",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920006","EAuthoriserSendWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev6","Ev7",theAuditEventData);
  
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Restore1");
  acceptOrderedEvent ("1620920007","EAgentReceiveWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev7","Ev8",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920008","EAgentPartRead","Job_PersistentInvariant_Use","EBankTransferJob","Ev8","Ev9",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920008","EAgentProcessedRequest","Job_PersistentInvariant_Use","EBankTransferJob","Ev8","Ev9a",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920009","EAgentWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev9","Ev10",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920010","EGatewayReadPayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev10","Ev11",theAuditEventData);
  
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Restore1");
  acceptOrderedEvent ("1620920011","EGatewayWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev11","Ev12",theAuditEventData);
  
  // Mid Sequence - note first event of a sequence has no previous event id (penultimate parameter)
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920012","EMidProcessPayload","Job_PersistentInvariant_Use","EBankTransferJob","","Ev13",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920013","EMidWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev13","Ev14",theAuditEventData);
  
  // Far Side Sequence - note first event of a sequence has no previous event id (penultimate parameter)
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920050","EFarInput","Job_PersistentInvariant_Use","EBankTransferJob","","Ev50",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920055","EFarOutput","Job_PersistentInvariant_Use","EBankTransferJob","Ev50","Ev55",theAuditEventData);
  //
  Test::service_event_queue();
  theJob := find_only Job(jobID = "Job_PersistentInvariant_Use");
  Test::fire_timer(theJob.jobEventTimer);
  Test::service_event_queue();
  //
  // The invariant provided does not match any source invariant at this point so SVDC will request an update from the persistence
  // service to see if that source invariant has been made available elsewhere. The next section simulates the required
  // invariant being found and provided
  
  // Simulate the Persistence domain providing no updated invariants
  
  //
  Test::service_event_queue();
  //
  
  // If the persistence service doesn't have anything new then it won't invoke the restoreInvaraints service
  // so we need to simulate timing out the jobInvariantSyncTimer which will cause the job to fail as the invariant check has failed
  theJob := find_only Job(jobID = "Job_PersistentInvariant_Use");
  Test::fire_timer(theJob.jobInvariantSyncTimer);
  Test::service_event_queue();
  Test::fire_timer(theJob.jobEventTimer);

 
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted = false, "Job has succeeded even though no matching extra job invariant was found: " & theJob.jobID);
  end loop;  

  
  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
  thePersistedInvariants := find PersistedInvariant();
  for thePersistedInvariant in thePersistedInvariants loop
    thePersistedInvariant.deletePersistedInvariant();   
  end loop; 
  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '7cb6e24d-a5cc-4202-9ee2-7931ab0650ac' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test257InvalidRestoredExtraJobInvariant () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
theUserInvariants : set of instance of TransientInvariant;
theSourceInvariants : set of instance of PersistedInvariant;
previousEvents : sequence of string;
restoredInvariant : persistedInvariantStructure;
restoredInvariants : sequence of persistedInvariantStructure;
empty : sequence of string;
logMessage : string;

thePersistedInvariants : set of instance of PersistedInvariant;
thePersistedInvariant : instance of PersistedInvariant;
theExtraJobInvariantDefn : instance of ExtraJobInvariantDefn;

begin
  // This test initially creates 1 Auth Job with 2 persistentinvariant values being defined
  // This part of the test does not reveal any erroneous behaviour of the twin
  //
  
  // This test test that the persistentinvariant can be used ok using 1 Job with 3 sequences and all events are in the standard default order
  // 3 of the events refer to the persistentinvariant value and all must match to pass the extra job invariant check
  // This test does not reveal any erroneous behaviour of the twin
  //
  // Bank Transfer Sequence
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Restore1");
  acceptOrderedEvent ("1620920000","ENearInput","Job_PersistentInvariant_Use","EBankTransferJob","","Ev1",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","ENearPartWrite","Job_PersistentInvariant_Use","EBankTransferJob","Ev1","Ev2",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920002","ENearJustificationWrite","Job_PersistentInvariant_Use","EBankTransferJob","Ev2","Ev3",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920003","EAgentRequestWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev3","Ev4",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920004","EAuthoriserReadWidgetRequest","Job_PersistentInvariant_Use","EBankTransferJob","Ev4","Ev5",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920005","EAuthoriserParsedJustification","Job_PersistentInvariant_Use","EBankTransferJob","Ev5","Ev6",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920006","EAuthoriserSendWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev6","Ev7",theAuditEventData);
  
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Restore1");
  acceptOrderedEvent ("1620920007","EAgentReceiveWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev7","Ev8",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920008","EAgentPartRead","Job_PersistentInvariant_Use","EBankTransferJob","Ev8","Ev9",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920008","EAgentProcessedRequest","Job_PersistentInvariant_Use","EBankTransferJob","Ev8","Ev9a",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920009","EAgentWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev9","Ev10",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920010","EGatewayReadPayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev10","Ev11",theAuditEventData);
  
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Restore1");
  acceptOrderedEvent ("1620920011","EGatewayWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev11","Ev12",theAuditEventData);
  
  // Mid Sequence - note first event of a sequence has no previous event id (penultimate parameter)
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920012","EMidProcessPayload","Job_PersistentInvariant_Use","EBankTransferJob","","Ev13",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920013","EMidWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev13","Ev14",theAuditEventData);
  
  // Far Side Sequence - note first event of a sequence has no previous event id (penultimate parameter)
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920050","EFarInput","Job_PersistentInvariant_Use","EBankTransferJob","","Ev50",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920055","EFarOutput","Job_PersistentInvariant_Use","EBankTransferJob","Ev50","Ev55",theAuditEventData);
  //
  Test::service_event_queue();
  theJob := find_only Job(jobID = "Job_PersistentInvariant_Use");
  Test::fire_timer(theJob.jobEventTimer);
  Test::service_event_queue();
  //
  // The invariant provided does not match any source invariant at this point so SVDC will request an update from the persistence
  // service to see if that source invariant has been made available elsewhere. The next section simulates the required
  // invariant being found and provided
  
  // Simulate the Persistence domain providing an updated set of invariants
  
  restoredInvariant.invariantName := "PersistentInvariantTypeB";
  restoredInvariant.invariantValue := "InvalidRestore";
  restoredInvariant.validFrom := timestamp'now;
  restoredInvariant.validTo := restoredInvariant.validFrom + @P1D@;
  restoredInvariant.sourceJobDefinitionType := "Auth_PersistentInvariantJob";
  restoredInvariant.sourceAuditEventType := "EAuthoriserReceiveOrder";
  restoredInvariant.sourceAuditEventOccurrenceId := 1;
  
  restoredInvariants := restoredInvariants & restoredInvariant;
  
  restoreInvariants (restoredInvariants);
  //
  //
  Test::service_event_queue();
  //
  
  theJob := find_only Job(jobID = "Job_PersistentInvariant_Use");
  Test::fire_timer(theJob.jobEventTimer);

  Test::service_event_queue();
  
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted = false, "Job has succeeded even though no matching extra job invariant was found: " & theJob.jobID);
  end loop;  

  
  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
  thePersistedInvariants := find PersistedInvariant();
  for thePersistedInvariant in thePersistedInvariants loop
    thePersistedInvariant.deletePersistedInvariant();   
  end loop; 
  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '0e9d8322-95b7-4054-a81e-ab89eab5a766' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test66IntraJobInvariantWithUpdatedDefinition () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
theIntraJobInvariants : set of instance of TransientInvariant;
invariantEventTypes : sequence of intraJobInvDataStructure;

begin

  // Start by updating the invariant definition - it moves the invariant to be expected on different events
  invariantEventTypes := ("SFMB",1,"") & ("SFMG",1,"");
  intraJobInvariantDefinition("SplitBranchedJob","InvA",invariantEventTypes);

  // This test is based upon Test14 which covers 1 Job with 2 sequences based on a fork and merge path definition - the first
  // sequence contains a fork to 3 branches and the second sequence contains a merge back to a single branch
  // This test adds invariant audit event data which is used to verify the two sequences have been used correctly
  // This test does not reveal any erroneous behaviour of the twin
  //
  previousEvents := empty;
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920000","SFMA","Job_Split_FandM","SplitBranchedJob",previousEvents,"Ev301",theAuditEventData);
  previousEvents := ("Ev301");
  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvA", "B12345");
  acceptOrderedEvent ("1620920001","SFMB","Job_Split_FandM","SplitBranchedJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","SFMC","Job_Split_FandM","SplitBranchedJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","SFMD","Job_Split_FandM","SplitBranchedJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","SFME","Job_Split_FandM","SplitBranchedJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := empty;
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920005","SFMC1","Job_Split_FandM","SplitBranchedJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := empty;
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920005","SFMD1","Job_Split_FandM","SplitBranchedJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := empty;
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920005","SFME1","Job_Split_FandM","SplitBranchedJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := empty & "Ev306" & "Ev307" & "Ev308";
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920006","SFMF","Job_Split_FandM","SplitBranchedJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev309");
  theAuditEventData := (aeDataKindEnum.INTRAJOBINV, "InvA", "B12345");
  acceptOrderedEvent ("1620920007","SFMG","Job_Split_FandM","SplitBranchedJob",previousEvents,"Ev310",theAuditEventData);
  //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theIntraJobInvariants := theAuditEvents -> R23;
  
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 2, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 10, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theIntraJobInvariants'length = 2, "Wrong number of invariants created: " & (theIntraJobInvariants'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;
  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '9ef5aa18-7677-4c8e-a170-4de4671cfe38' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test67ExtraJobInvariantWithUpdatedDefinition () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
theIntraJobInvariants : set of instance of TransientInvariant;
invariantEventTypes : sequence of intraJobInvDataStructure;
userEvents : sequence of userEventDataStructure;
userEvent : userEventDataStructure;
theSourceInvariants : set of instance of PersistedInvariant;
thePersistedInvariants : set of instance of PersistedInvariant;

begin

  // Start by updating the invariant definition - it moves the invariant to be expected on different events
  userEvents := ("EBankTransferJob","ENearPartWrite",1,"") & ("EBankTransferJob","EAuthoriserSendWidgets",1,"") & ("EBankTransferJob","EGatewayWritePayload",1,"");
  extraJobInvariantDefinition("PersistentInvariantTypeB", "Auth_PersistentInvariantJob", "EAuthSendResponse",1,userEvents);

  // This test covers 1 Auth Job with 2 persistentinvariant values being defined
  // This test does not reveal any erroneous behaviour of the twin
  //
  previousEvents := empty;
//  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeA", "Ent987654321");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920000","EAuthoriserSendOrderRequest","Job_PersistentInvariant","Auth_PersistentInvariantJob",previousEvents,"Ev1201",theAuditEventData);
  previousEvents := ("Ev1201");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","EAuthReceiveRequest","Job_PersistentInvariant","Auth_PersistentInvariantJob",previousEvents,"Ev1202",theAuditEventData);
  previousEvents := ("Ev1202");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920002","EAuthSendMidRequest","Job_PersistentInvariant","Auth_PersistentInvariantJob",previousEvents,"Ev1203",theAuditEventData);
  previousEvents := ("Ev1203");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920003","EAuthReceiveMidResponse","Job_PersistentInvariant","Auth_PersistentInvariantJob",previousEvents,"Ev1204",theAuditEventData);
  previousEvents := ("Ev1204");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920004","EAuthSendMidRequest","Job_PersistentInvariant","Auth_PersistentInvariantJob",previousEvents,"Ev1205",theAuditEventData);
  previousEvents := ("Ev1205");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920005","EAuthReceiveMidResponse","Job_PersistentInvariant","Auth_PersistentInvariantJob",previousEvents,"Ev1206",theAuditEventData);
  previousEvents := ("Ev1206");
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Ent987654321");
  acceptOrderedEvent ("1620920006","EAuthSendResponse","Job_PersistentInvariant","Auth_PersistentInvariantJob",previousEvents,"Ev1207",theAuditEventData);
  previousEvents := ("Ev1207");
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920007","EAuthoriserReceiveOrder","Job_PersistentInvariant","Auth_PersistentInvariantJob",previousEvents,"Ev1208",theAuditEventData);
  //
  Test::service_event_queue();
  theJob := find_only Job(jobID = "Job_PersistentInvariant");
  Test::fire_timer(theJob.jobEventTimer);
  
  
  // It then deletes the Job that created the PersistentInvariant values but retains the persistentinvariant values as PersistedInvariants
  
  deleteJob ("Job_PersistentInvariant");
  theSourceInvariants := find PersistedInvariant(inForce = true);
  Assertions::assertTrue(theSourceInvariants'length = 1, "Wrong number of source invariants in force: " & (theSourceInvariants'length)'image);

  
    // Bank Transfer Sequence
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920000","ENearInput","Job_PersistentInvariant_Use","EBankTransferJob","","Ev1",theAuditEventData);
  
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Ent987654321");
  acceptOrderedEvent ("1620920001","ENearPartWrite","Job_PersistentInvariant_Use","EBankTransferJob","Ev1","Ev2",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920002","ENearJustificationWrite","Job_PersistentInvariant_Use","EBankTransferJob","Ev2","Ev3",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920003","EAgentRequestWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev3","Ev4",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920004","EAuthoriserReadWidgetRequest","Job_PersistentInvariant_Use","EBankTransferJob","Ev4","Ev5",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920005","EAuthoriserParsedJustification","Job_PersistentInvariant_Use","EBankTransferJob","Ev5","Ev6",theAuditEventData);
  
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Ent987654321");
  acceptOrderedEvent ("1620920006","EAuthoriserSendWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev6","Ev7",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920007","EAgentReceiveWidgets","Job_PersistentInvariant_Use","EBankTransferJob","Ev7","Ev8",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920008","EAgentPartRead","Job_PersistentInvariant_Use","EBankTransferJob","Ev8","Ev9",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920008","EAgentProcessedRequest","Job_PersistentInvariant_Use","EBankTransferJob","Ev8","Ev9a",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920009","EAgentWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev9","Ev10",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920010","EGatewayReadPayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev10","Ev11",theAuditEventData);
  
  theAuditEventData := (aeDataKindEnum.EXTRAJOBINV, "PersistentInvariantTypeB", "Ent987654321");
  acceptOrderedEvent ("1620920011","EGatewayWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev11","Ev12",theAuditEventData);
  
  // Mid Sequence - note first event of a sequence has no previous event id (penultimate parameter)
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920012","EMidProcessPayload","Job_PersistentInvariant_Use","EBankTransferJob","","Ev13",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920013","EMidWritePayload","Job_PersistentInvariant_Use","EBankTransferJob","Ev13","Ev14",theAuditEventData);
  
  // Far Side Sequence - note first event of a sequence has no previous event id (penultimate parameter)
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920050","EFarInput","Job_PersistentInvariant_Use","EBankTransferJob","","Ev50",theAuditEventData);
  
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920055","EFarOutput","Job_PersistentInvariant_Use","EBankTransferJob","Ev50","Ev55",theAuditEventData);
  
  Test::service_event_queue();
  
  theJob := find_only Job(jobID = "Job_PersistentInvariant_Use");
  Test::fire_timer(theJob.jobEventTimer);

  Test::service_event_queue();
  
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 3, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 17, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;
  
  // ... and finally clear down all the existing instances of PersistedInvariant in readiness for other tests.
  thePersistedInvariants := find PersistedInvariant();
  for thePersistedInvariant in thePersistedInvariants loop
    thePersistedInvariant.deletePersistedInvariant();   
  end loop; 
  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '39fc51e1-aa6e-4b17-9226-79bd08f88e72' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test68BranchCountWithUpdatedDynamicControlDefn () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // First update the dynamic control definitions to move the event on which the event data is expected and to move the merge point
  createDynamicControlDefinition("BranchCountJob", "Branch_Counter_1", dynamicControlTypeEnum.BRANCHCOUNT, "BCFB",1,"BCFB",1);
  createDynamicControlDefinition("BranchCountJob", "Merge_Counter_1", dynamicControlTypeEnum.MERGECOUNT, "BCFB",1,"BCFE",1);

  // This test covers 1 Job with 1 sequences based on a fork and merge path definition - there are 10 branches
  // This test does not reveal any erroneous behaviour of the twin
  //
  theAuditEventData :=  emptyAuditEventData;
  acceptOrderedEvent ("1620920000","BCFA","Branch_Count_Job","BranchCountJob",previousEvents,"Ev301",theAuditEventData);
  previousEvents := ("Ev301");
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "Branch_Counter_1", "10") & (aeDataKindEnum.MERGECOUNT, "Merge_Counter_1", "10");
  acceptOrderedEvent ("1620920001","BCFB","Branch_Count_Job","BranchCountJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  theAuditEventData :=  emptyAuditEventData;
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev312",theAuditEventData);
  previousEvents := ("Ev303");
  acceptOrderedEvent ("1620920003","BCFD","Branch_Count_Job","BranchCountJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := ("Ev304");
  acceptOrderedEvent ("1620920003","BCFD","Branch_Count_Job","BranchCountJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := ("Ev305");
  acceptOrderedEvent ("1620920003","BCFD","Branch_Count_Job","BranchCountJob",previousEvents,"Ev315",theAuditEventData);
  previousEvents := ("Ev306");
  acceptOrderedEvent ("1620920003","BCFD","Branch_Count_Job","BranchCountJob",previousEvents,"Ev316",theAuditEventData);
  previousEvents := ("Ev307");
  acceptOrderedEvent ("1620920003","BCFD","Branch_Count_Job","BranchCountJob",previousEvents,"Ev317",theAuditEventData);
  previousEvents := ("Ev308");
  acceptOrderedEvent ("1620920003","BCFD","Branch_Count_Job","BranchCountJob",previousEvents,"Ev318",theAuditEventData);
  previousEvents := ("Ev309");
  acceptOrderedEvent ("1620920003","BCFD","Branch_Count_Job","BranchCountJob",previousEvents,"Ev319",theAuditEventData);
  previousEvents := ("Ev310");
  acceptOrderedEvent ("1620920003","BCFD","Branch_Count_Job","BranchCountJob",previousEvents,"Ev320",theAuditEventData);
  previousEvents := ("Ev311");
  acceptOrderedEvent ("1620920003","BCFD","Branch_Count_Job","BranchCountJob",previousEvents,"Ev321",theAuditEventData);
  previousEvents := ("Ev312");
  acceptOrderedEvent ("1620920003","BCFD","Branch_Count_Job","BranchCountJob",previousEvents,"Ev322",theAuditEventData);
  previousEvents := empty & "Ev313" & "Ev314" & "Ev315" & "Ev316" & "Ev317" & "Ev318" & "Ev319" & "Ev320" & "Ev321" & "Ev322";
  acceptOrderedEvent ("1620920004","BCFE","Branch_Count_Job","BranchCountJob",previousEvents,"Ev323",theAuditEventData);
  previousEvents := ("Ev323");
  acceptOrderedEvent ("1620920005","BCFF","Branch_Count_Job","BranchCountJob",previousEvents,"Ev324",theAuditEventData);
 //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 24, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

