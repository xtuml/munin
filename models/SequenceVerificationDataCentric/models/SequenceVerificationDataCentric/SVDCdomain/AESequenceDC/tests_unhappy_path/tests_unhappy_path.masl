//! ACTIVITY BEGIN. 'e02e3ece-2259-4b87-a003-3bdca65e0783' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test901SimpleUnhappyEvent () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
theUnhappyEvents : set of instance of UnsequencedAuditEvent;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 2 Jobs with 4 sequences and all events are in the standard default order
  // This test does not reveal any erroneous behaviour of the twin
  //
  // Bank Transfer Sequence
  acceptOrderedEvent ("1620920000","component-1234","SUHJ-A","UJ_Alpha","IncludingUnhappyEventsJob","","Ev1",theAuditEventData);
  acceptOrderedEvent ("1620920001","component-1234","SUHJ-B","UJ_Alpha","IncludingUnhappyEventsJob","Ev1","Ev2",theAuditEventData);
  acceptOrderedEvent ("1620920002","component-1234","SUHJ-C","UJ_Alpha","IncludingUnhappyEventsJob","Ev2","Ev3",theAuditEventData);
  acceptOrderedEvent ("1620920003","component-1234","SUHJ-Error","UJ_Alpha","IncludingUnhappyEventsJob","Ev3","Ev4",theAuditEventData);
  acceptOrderedEvent ("1620920004","component-1234","SUHJ-D","UJ_Alpha","IncludingUnhappyEventsJob","Ev4","Ev5",theAuditEventData);
  acceptOrderedEvent ("1620920005","component-1234","SUHJ-E","UJ_Alpha","IncludingUnhappyEventsJob","Ev5","Ev6",theAuditEventData);
//
  Test::service_event_queue();
  //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theJobs -> R44;
  theUnhappyEvents := theJobs -> R3;
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 5, "Wrong number of happy audit events created: " & (theAuditEvents'length)'image);
  Assertions::assertTrue(theUnhappyEvents'length = 1, "Wrong number of unhappy events created: " & (theUnhappyEvents'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = true, "Sequencing has not failed though it should have: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

