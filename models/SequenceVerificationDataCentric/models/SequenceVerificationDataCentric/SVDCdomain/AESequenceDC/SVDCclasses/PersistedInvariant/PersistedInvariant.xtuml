// BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

within SequenceVerificationDataCentric::SVDCdomain::AESequenceDC::SVDCclasses is

	@key_letters("EJI");
	@class_num(19);
	class PersistedInvariant is

		unique invariantId: integer;

		@ref_mode("referred_to");
		extraJobInvName: referential (R24.ExtraJobInvariantDefn.extraJobInvName) string;

		validFrom: timestamp;

		validUntil: timestamp;

		invariantValue: string;

		@ref_mode("referred_to");
		AuditEventId: referential (R27.AuditEvent.AuditEventId) string;

		invariantName: string;

		inForce: boolean;

		invariantTimer: timer;

		preferred identifier is (invariantId);

		@operation_num(1);
		class operation createSourceExtraJobInvariant(extraJobInvDefn: in instance of ExtraJobInvariantDefn, invariantName: in string, invariantValue: in string, errorReason: out string) return instance of PersistedInvariant is
			@noparse
			endTime : timestamp;
			existingExtraJobInvariant : instance of PersistedInvariant;
			newExtraJobInvariant : instance of PersistedInvariant;
			sourceAEOccurrenceDefn : instance of AEOccurrenceInSequenceDefinition;
			sourceEventDefn : instance of AuditEventDefinition;
			sourceJobDefn : instance of JobDefinition;
			logMessage : string;
			
			begin
			  endTime := timestamp'now + extraJobInvDefn.lifetime;
			  //TODO Is this adequate for setting the validity period? Currently not known if timestamps are available
			  // so set validFrom to now and ValidUntil to now plus lifetime
			  
			  if invariantValue /= "" then
			    newExtraJobInvariant := create unique PersistedInvariant (invariantName => invariantName,
			  	                                                          invariantValue => invariantValue,
			  	                                                          validFrom => timestamp'now, 
			  	                                                          validUntil => endTime, 
			  	                                                          Current_State => Pending );
			  	                                         
			    link newExtraJobInvariant R24 extraJobInvDefn;
			    generate PersistedInvariant.invariantComesIntoForce() to newExtraJobInvariant;
			    sourceAEOccurrenceDefn := extraJobInvDefn -> R20;
			    sourceEventDefn := sourceAEOccurrenceDefn -> R12 -> R1.AuditEventDefinition;
			    sourceJobDefn := sourceAEOccurrenceDefn -> R12 -> R1.AESequenceDefinition -> R7;
			    
			    Persistence_Req_IF~>PersistInvariant(newExtraJobInvariant.invariantName, 
			    	                          newExtraJobInvariant.invariantValue,
			    	                          newExtraJobInvariant.validFrom,
			    	                          newExtraJobInvariant.validUntil,
			    	                          sourceJobDefn.jobName,
			    	                          sourceEventDefn.AEType,
			    	                          sourceAEOccurrenceDefn.occurrenceNumberInSequence    );
			  else
			    errorReason := "Empty Invariant Value provided for this ExtraJob Invariant = " & invariantName;
			  end if;
			  return newExtraJobInvariant;
			end service;
			//
			//
			@endnoparse
		end operation;

		@operation_num(2);
		operation deletePersistedInvariant() is
			@noparse
			theExtraJobInvariantDefn : instance of ExtraJobInvariantDefn;
			theProvidingAuditEvent : instance of AuditEvent;
			
			logMessage : string;
			
			begin
			  // This operation deletes the respective instance of PersistedInvariant
			  
			  // Firstly, ensure that all association instances that the PersistedInvariant is involved in are unlinked (R24 & R27)
			
			  // Unlink the PersistedInvariant that is to be deleted from its definition
			    theExtraJobInvariantDefn := this -> R24;
			    unlink this R24 theExtraJobInvariantDefn;
			    
			    // Unlink from the AuditEvent that provided it (if linked)
			    theProvidingAuditEvent := this -> R27;
			    if theProvidingAuditEvent /= null then
			      unlink this R27 theProvidingAuditEvent;
			    end if;
			        
			    // ... and finally deleted the specified instance of PersistedInvariant and log this.    
			    logMessage := "PersistentInvariant: " & this.invariantId'image & " deleted ";
			    Logger::log(Logger::Information, "AESequenceDC", logMessage);
			    delete this;
			end service;
			@endnoparse
		end operation;

	end class;

end;
