//! ACTIVITY BEGIN. '577ba888-088a-4859-a16d-98dfc25eb790' DO NOT EDIT THIS LINE.
public service AESequenceDC::PersistedInvariant.createSourceExtraJobInvariant ( extraJobInvDefn : in instance of ExtraJobInvariantDefn,
                                                                               invariantName : in string,
                                                                               invariantValue : in string,
                                                                               errorReason : out string ) return instance of PersistedInvariant is
endTime : timestamp;
existingExtraJobInvariant : instance of PersistedInvariant;
newExtraJobInvariant : instance of PersistedInvariant;
sourceAEOccurrenceDefn : instance of AEOccurrenceInSequenceDefinition;
sourceEventDefn : instance of SequencedAuditEventDefinition;
sourceJobDefn : instance of JobDefinition;
kvps : dictionary of string;

begin
  endTime := timestamp'now + extraJobInvDefn.lifetime;
  //TODO Is this adequate for setting the validity period? Currently not known if timestamps are available
  // so set validFrom to now and ValidUntil to now plus lifetime
  
  if invariantValue /= "" then
    // Hash the invariant value and persist (only) the (string encoded) hash.
    newExtraJobInvariant := create unique PersistedInvariant (invariantName => invariantName,
                                                              invariantValue => Strings::encodeBase64(Hash::hash(Hash::Algorithm.SHA3_256, invariantValue)),
                                                              validFrom => timestamp'now,
                                                              validUntil => endTime,
                                                              Current_State => Pending);

    link newExtraJobInvariant R24 extraJobInvDefn;
    
    // Log info: Audit event data provided with this audit event has been captured
    if (Logger::enabled(Logger::Debug, "pv.sv.persistedinvariant.createsourceextrajobinvariant")) then
      kvps["invariantName"] := newExtraJobInvariant.invariantName;
      // Do not log invariant values.  These could be sensitive security information.  Uncomment only in a development build.
      kvps["invariantValue"] := invariantValue;
      kvps["invariantHashString"] := newExtraJobInvariant.invariantValue;
      Logger::log(Logger::Debug, "pv.sv.persistedinvariant.createsourceextrajobinvariant",
        svLog("svdc_eji_new_invariant", "persisted invariant has been created", "", "", kvps));
    end if;
    
    generate PersistedInvariant.invariantComesIntoForce() to newExtraJobInvariant;
    sourceAEOccurrenceDefn := extraJobInvDefn -> R20;
    sourceEventDefn := sourceAEOccurrenceDefn -> R12 -> R1.SequencedAuditEventDefinition;
    sourceJobDefn := sourceAEOccurrenceDefn -> R12 -> R1.AESequenceDefinition -> R7;
    
    Persistence_Req_IF~>PersistInvariant(newExtraJobInvariant.invariantName, 
    	                          newExtraJobInvariant.invariantValue,
    	                          newExtraJobInvariant.validFrom,
    	                          newExtraJobInvariant.validUntil,
    	                          sourceJobDefn.jobName,
    	                          sourceEventDefn.AEType,
    	                          sourceAEOccurrenceDefn.occurrenceNumberInSequence    );
  else
    errorReason := "Empty Invariant Value provided for this ExtraJob Invariant = " & invariantName;
  end if;
  return newExtraJobInvariant;
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2869fcaf-8e75-459e-8a4b-c88648b57c5f' DO NOT EDIT THIS LINE.
public instance service AESequenceDC::PersistedInvariant.deletePersistedInvariant () is
theExtraJobInvariantDefn : instance of ExtraJobInvariantDefn;
theProvidingAuditEvent : instance of SequencedAuditEvent;

kvps : dictionary of string;

begin
  // This operation deletes the respective instance of PersistedInvariant
  
  // Firstly, ensure that all association instances that the PersistedInvariant is involved in are unlinked (R24 & R27)

  // Unlink the PersistedInvariant that is to be deleted from its definition
    theExtraJobInvariantDefn := this -> R24;
    unlink this R24 theExtraJobInvariantDefn;
    
    // Unlink from the AuditEvent that provided it (if linked)
    theProvidingAuditEvent := this -> R27;
    if theProvidingAuditEvent /= null then
      unlink this R27 theProvidingAuditEvent;
    end if;
        
    // ... and finally deleted the specified instance of PersistedInvariant and log this.    
    if (Logger::enabled(Logger::Debug, "pv.sv.persistedinvariant.deletepersistedinvariant")) then
      // Do not log invariant values.  These could be sensitive security information.
      Logger::log(Logger::Debug, "pv.sv.persistedinvariant.deletepersistedinvariant",
        svLog("svdc_invariant_deleted", "persisted invariant has been deleted", "", "", kvps));
    end if;
    delete this;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

