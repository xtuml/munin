//! ACTIVITY BEGIN. '3d42cd49-1305-4d1b-9faf-370efe278d18' DO NOT EDIT THIS LINE.
public instance service AESequenceDC::Job.failJob ( failureReason : in string ) is
logMessage : string;
begin
	
	// This is just a progress message - the failure is reported in the state machine
	logMessage := "AESequenceDC::Job.failJob : failed job ";
	AsyncLogger::log(Logger::Debug, "AESequenceDC", logMessage);
	
		
	generate Job.jobFailed(failureReason) to this;
	
	// TODO: Every call to this function (elsewhere in the model) could be replaced
	// with the generate Job.jobFailed(failureReason) to this; statement and then this
	// function could be deleted from the model.
	//
end service;
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '29df042e-fb35-4443-881f-62ea6991447a' DO NOT EDIT THIS LINE.
public instance service AESequenceDC::Job.deleteJob () is
theHappyJob : instance of HappyJob;
theUnhappyJob : instance of UnhappyJob;
theAuditEvents : set of instance of SequencedAuditEvent;
theAuditEvent : instance of SequencedAuditEvent;
theOrphanedAuditEvents : set of instance of SequencedAuditEvent;
theNextAuditEvent : instance of SequencedAuditEvent;
theNextAuditEvents : set of instance of SequencedAuditEvent;
theSequences : set of instance of Sequence;
theJobDef : instance of JobDefinition;
theAuditEventPairs : set of instance of SequencedAuditEventPair;
theAuditEventPair : instance of SequencedAuditEventPair;
theAuditEventDefinition : instance of SequencedAuditEventDefinition;
theTransientInvariant : instance of TransientInvariant;
thePersistedInvariant : instance of PersistedInvariant;
theDynamicControls : set of instance of DynamicControl;
theSupertypeAuditEvent : instance of AuditEvent;
theSupertypeAuditEvents : set of instance of AuditEvent;
theSupertypeAuditEvents1 : set of instance of AuditEvent;
theSupertypeAuditEvents2 : set of instance of AuditEvent;
theSupertypeAuditEvents3 : set of instance of AuditEvent;
theUnhappyAuditEvents : set of instance of UnsequencedAuditEvent;
theUnhappyAuditEvent : instance of UnsequencedAuditEvent;
theNextSupertypeAuditEvents : set of instance of AuditEvent;
theSupertypeAuditEventLink : instance of AuditEventLink;

begin
  theHappyJob := this -> R45.HappyJob;
  if theHappyJob /= null then
    unlink theHappyJob R45 this;
    delete theHappyJob;
  else  
    theUnhappyJob := this -> R45.UnhappyJob;
    if theUnhappyJob /= null then
      unlink theUnhappyJob R45 this;
      delete theUnhappyJob;
    end if;  
  end if;  
  
  theAuditEvents := this -> R10 -> R11;
  theUnhappyAuditEvents := this -> R3;
  theOrphanedAuditEvents := this -> R44;
  theSupertypeAuditEvents1 := theAuditEvents -> R46;
  theSupertypeAuditEvents2 := theUnhappyAuditEvents -> R46;
  theSupertypeAuditEvents3 := theOrphanedAuditEvents -> R46;  
  theSupertypeAuditEvents := theSupertypeAuditEvents1 & theSupertypeAuditEvents2 & theSupertypeAuditEvents3;
  
  theAuditEvents := theSupertypeAuditEvents -> R46.SequencedAuditEvent;

  for theAuditEvent in theAuditEvents'elements loop
    theNextAuditEvents := theAuditEvent -> R4.has_next.SequencedAuditEvent;
    for theNextAuditEvent in theNextAuditEvents loop
      theAuditEventPair := theAuditEvent with theNextAuditEvent -> R4.has_next.SequencedAuditEventPair;
      if (theAuditEventPair -> R15) /= null then
        unlink (theAuditEventPair -> R15) R15 theAuditEventPair;
      end if;
      unlink theAuditEvent R4.has_next.SequencedAuditEvent theNextAuditEvent using theAuditEventPair;
      delete theAuditEventPair;
    end loop;
    if (theAuditEvent -> R11) /= null then
      unlink (theAuditEvent -> R11) R11 theAuditEvent;
    end if;  
    if (theAuditEvent -> R2) /= null then
      unlink (theAuditEvent -> R2) R2 theAuditEvent;
    end if;
    if (theAuditEvent -> R13) /= null then      
      unlink (theAuditEvent -> R13) R13 theAuditEvent;  
    end if;  
    if (theAuditEvent -> R44) /= null then      
      unlink (theAuditEvent -> R44) R44 theAuditEvent;  
    end if;  
    
    // Delete the associated Intra Job Invariants
    theTransientInvariant := theAuditEvent -> R23;
    if theTransientInvariant /= null then
      if (theTransientInvariant -> R26) /= null then
        unlink (theTransientInvariant -> R26) R26 theTransientInvariant;
      end if;  
      if (theTransientInvariant -> R28) /= null then
        unlink (theTransientInvariant -> R28) R28 theTransientInvariant;
      end if;  
      unlink theTransientInvariant R23 theAuditEvent;
      delete theTransientInvariant;
    end if;
    // Extra Job Invariants are not deleted here as they have an independent lifecycle

    // Unlink the associated Source Extra Job Invariant
    thePersistedInvariant := theAuditEvent -> R27;
    if thePersistedInvariant /= null then
      unlink thePersistedInvariant R27 theAuditEvent;
    end if;

    // Delete the associated Dynamic Controls
    theDynamicControls := this -> R35;
    for theDynamicControl in theDynamicControls loop
      if (theDynamicControl -> R29) /= null then
        unlink (theDynamicControl -> R29) R29 theDynamicControl;
      end if;  
      if (theDynamicControl -> R36) /= null then
        unlink (theDynamicControl -> R36) R36 theDynamicControl;
      end if;  
      if (theDynamicControl -> R37) /= null then
        unlink (theDynamicControl -> R37) R37 theDynamicControl;
      end if;  
      unlink theDynamicControl R35 this;
      delete theDynamicControl;
    end loop;
     
    theSupertypeAuditEvent := theAuditEvent -> R46;
    if theSupertypeAuditEvent /= null then
      theNextSupertypeAuditEvents := theSupertypeAuditEvent -> R47.has_next.AuditEvent;
      for theNextSupertypeAuditEvent in theNextSupertypeAuditEvents loop
        theSupertypeAuditEventLink := theSupertypeAuditEvent with theNextSupertypeAuditEvent -> R47.has_next.AuditEventLink;
        unlink theSupertypeAuditEvent R47.has_next.AuditEvent theNextSupertypeAuditEvent using theSupertypeAuditEventLink;
        delete theSupertypeAuditEventLink;
      end loop;
    end if;
    
  end loop;
  
  // Unlink and delete all the associatives first and then unlink the supertype subtype relationship
  for theAuditEvent in theAuditEvents loop
    theSupertypeAuditEvent := theAuditEvent -> R46;
    unlink theAuditEvent R46 theSupertypeAuditEvent;
  end loop;

  theUnhappyAuditEvents := theSupertypeAuditEvents -> R46.UnsequencedAuditEvent;
  
  for theUnhappyAuditEvent in theUnhappyAuditEvents loop
    if (theUnhappyAuditEvent -> R41) /= null then
      unlink (theUnhappyAuditEvent -> R41) R41 theUnhappyAuditEvent;
    end if;  
    if (theUnhappyAuditEvent -> R3) /= null then
      unlink (theUnhappyAuditEvent -> R3) R3 theUnhappyAuditEvent;
    end if;  

    theSupertypeAuditEvent := theUnhappyAuditEvent -> R46;
    if theSupertypeAuditEvent /= null then
      theNextSupertypeAuditEvents := theSupertypeAuditEvent -> R47.has_next.AuditEvent;
      for theNextSupertypeAuditEvent in theNextSupertypeAuditEvents loop
        theSupertypeAuditEventLink := theSupertypeAuditEvent with theNextSupertypeAuditEvent -> R47.has_next.AuditEventLink;
        unlink theSupertypeAuditEvent R47.has_next.AuditEvent theNextSupertypeAuditEvent using theSupertypeAuditEventLink;
        delete theSupertypeAuditEventLink;
      end loop;
    end if;
  end loop;
  // Unlink and delete all the associatives first and then unlink the supertype subtype relationship
  for theUnhappyAuditEvent in theUnhappyAuditEvents loop
    theSupertypeAuditEvent := theUnhappyAuditEvent -> R46;
    unlink theUnhappyAuditEvent R46 theSupertypeAuditEvent;
  end loop;
   
  delete theAuditEvents;
  delete theUnhappyAuditEvents;
  delete theSupertypeAuditEvents;
  
  theOrphanedAuditEvents := this -> R44;
  if theOrphanedAuditEvents /= null then
  
    for theOrphanedAuditEvent in theOrphanedAuditEvents loop
      if (theOrphanedAuditEvent -> R2) /= null then
        unlink (theOrphanedAuditEvent -> R2) R2 theOrphanedAuditEvent;
      end if;
      if (theOrphanedAuditEvent -> R13) /= null then      
        unlink (theOrphanedAuditEvent -> R13) R13 theOrphanedAuditEvent;  
      end if;  
    end loop;
    
    unlink theOrphanedAuditEvents R44 this;
    delete theOrphanedAuditEvents;
  end if;
  
  theSequences := this -> R10;
  if theSequences /= null then
    for theSequence in theSequences loop
      if (theSequence -> R14) /= null then
        unlink theSequence R14 (theSequence -> R14);
      end if;
    end loop;
    unlink theSequences R10 this;
    delete theSequences;
  end if;  
  theJobDef := this -> R8;
  if theJobDef /= null then
    unlink theJobDef R8 this;
  end if;  
  delete this;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'db347d85-0ef8-469b-a066-39e28a893522' DO NOT EDIT THIS LINE.
public instance service AESequenceDC::Job.migrateToUnhappyJob ( eventId : in string,
                                                               prevAEIds : in sequence of string,
                                                               aeType : in string,
                                                               aeData : in sequence of auditEventDataStructure ) is
theHappyJob : instance of HappyJob;
theUnhappyJob : instance of UnhappyJob;
logMessage : string;


begin
  logMessage := "AESequenceDC::Job.migrateToUnhappyJob : Migration from Happy Job to Unhappy Job for - jobId = " & this.jobID & " with Job Name = " & this.jobName;
  AsyncLogger::log(Logger::Debug, "AESequenceDC", logMessage);

  // Unlink HappyJob from Job
  theHappyJob := this -> R45.HappyJob;
  if theHappyJob /= null then
    unlink theHappyJob R45 this;
    // Delete the Happy Job
    delete theHappyJob;
  end if;
    
  // Create UnhappyJob in some Created state
  theUnhappyJob := create UnhappyJob (jobID => this.jobID, Current_State => Created );
  // Link UnhappyJob to Job
  link theUnhappyJob R45 this;
  
  // Set sequencing failed to true
  this.sequencingFailed := true;
  
  // Generate firstUnhappyEvent event to UnhappyJob (this needs to leave it in a different JobInProgress state for further events which may be happy or unhappy)

  logMessage := "AESequenceDC::Job.migrateToUnhappyJob : Unhappy Job created for - jobId = " & this.jobID & " with Job Name = " & this.jobName ;
  AsyncLogger::log(Logger::Debug, "AESequenceDC", logMessage);

  generate Job.unhappyJobCreated (eventId, prevAEIds, aeType, aeData) to this;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

