//! ACTIVITY BEGIN. 'b3c55334-2f4c-4778-b915-f281fc35d7f0' DO NOT EDIT THIS LINE.
public service AESequenceDC::DynamicControlDefinition.createDynamicControlDefinition ( jobName : in string,
                                                                                      dynamicControlName : in string,
                                                                                      dynamicControlType : in dynamicControlTypeEnum,
                                                                                      sourceEventType : in string,
                                                                                      sourceOccurrenceId : in integer ) is
theJobDefn : instance of JobDefinition;
theDynamicControlDefinition : instance of DynamicControlDefinition;
theJobsAuditEventDefns : set of instance of SequencedAuditEventDefinition;
sourceAuditEventDefn : instance of SequencedAuditEventDefinition;
sourceSequenceDefn : instance of AESequenceDefinition;
sourceSequenceDefns : set of instance of AESequenceDefinition;
theJobsSequenceDefns : set of instance of AESequenceDefinition;
theJobsSourceSequenceDefns : set of instance of AESequenceDefinition;
sourceAEInSequenceDefn : instance of AEInSequenceDefinition;
sourceAEOccurrenceDefn : instance of AEOccurrenceInSequenceDefinition;
sourceAEOccurrenceDefns : set of instance of AEOccurrenceInSequenceDefinition;
kvps : dictionary of string;

begin
  theJobDefn := find_one JobDefinition (jobName = jobName);
  if theJobDefn /= null then
    theDynamicControlDefinition := find_one DynamicControlDefinition (jobName = jobName and dynamicControlName = dynamicControlName);
    if theDynamicControlDefinition = null then
      theDynamicControlDefinition := create DynamicControlDefinition (jobName => jobName, dynamicControlName => dynamicControlName, dynamicControlType => dynamicControlType);
      link theDynamicControlDefinition R32 theJobDefn;
    else
      theDynamicControlDefinition.dynamicControlType := dynamicControlType;
      if (theDynamicControlDefinition -> R30) /= null then
        unlink (theDynamicControlDefinition -> R30) R30 theDynamicControlDefinition;
      end if;  
      if (theDynamicControlDefinition -> R31) /= null then
        unlink (theDynamicControlDefinition -> R31) R31 theDynamicControlDefinition;
      end if;  
    end if;  
    
    // Find the source AEOccurrenceInSequenceDefinition
    theJobsSequenceDefns := theJobDefn -> R7;
    theJobsAuditEventDefns := theJobsSequenceDefns -> R1.SequencedAuditEventDefinition;
    sourceAuditEventDefn := find_one theJobsAuditEventDefns (AEType = sourceEventType);
    if sourceAuditEventDefn /= null then
      sourceSequenceDefns := sourceAuditEventDefn -> R1.AESequenceDefinition;
      theJobsSourceSequenceDefns := theJobsSequenceDefns intersection sourceSequenceDefns;
      sourceSequenceDefn := find_one theJobsSourceSequenceDefns ();
      
      if sourceSequenceDefn /= null then
        sourceAEInSequenceDefn := sourceAuditEventDefn with sourceSequenceDefn -> R1.AEInSequenceDefinition;
        sourceAEOccurrenceDefns := sourceAEInSequenceDefn -> R12;
        sourceAEOccurrenceDefn := find_one sourceAEOccurrenceDefns (occurrenceNumberInSequence = sourceOccurrenceId);
        if sourceAEOccurrenceDefn /= null then
          //link R30
          link theDynamicControlDefinition R30 sourceAEOccurrenceDefn;
        else
          // Error handling for the specified Audit Event Occurrence Definition was not found
          kvps["eventType"] := sourceEventType; kvps["occurrenceId"] := sourceOccurrenceId'image;
          Logger::log(Logger::Warning, "pv.sv.dynamiccontroldefinition.createdynamiccontroldefinition",
            svLog("svdc_job_definition_failed", "There is no known Audit Event Occurrence Definition with Audit Event Definition name corresponding to the source event specified for Dynamic Control Definition", "", jobName, kvps));
        end if;  
      else
        // Error handling for the Sequence Definition corresponding to this Audit Event was not found
        kvps["eventType"] := sourceEventType;
        Logger::log(Logger::Warning, "pv.sv.dynamiccontroldefinition.createdynamiccontroldefinition",
          svLog("svdc_job_definition_failed", "There is no known Sequence Definition associated with Audit Event Definition named corresponding to the source event specified for Dynamic Control Definition", "", jobName, kvps));
      end if;    
    else
      // Error handling for the sourceEventType specified is invalid
      kvps["eventType"] := sourceEventType;
      Logger::log(Logger::Warning, "pv.sv.dynamiccontroldefinition.createdynamiccontroldefinition",
        svLog("svdc_job_definition_failed", "There is no known Audit Event Definition with name corresponding to the source event specified for Dynamic Control Definition", "", jobName, kvps));
    end if;    
  else
    // Error handling for Error Job Definition Unknown
    Logger::log(Logger::Warning, "pv.sv.dynamiccontroldefinition.createdynamiccontroldefinition",
      svLog("svdc_job_definition_failed", "There is no known Job Definition with name corresponding to the source event specified for Dynamic Control Definition", "", jobName, kvps));
  end if;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '0fb3e6b3-46d1-4b82-835b-a97e063e17ba' DO NOT EDIT THIS LINE.
public service AESequenceDC::DynamicControlDefinition.linkUserEventDefn ( jobName : in string,
                                                                         dynamicControlName : in string,
                                                                         dynamicControlType : in dynamicControlTypeEnum,
                                                                         userEventType : in string,
                                                                         userOccurrenceId : in integer ) is
theJobDefn : instance of JobDefinition;
theDynamicControlDefn : instance of DynamicControlDefinition;
userAuditEventDefn : instance of SequencedAuditEventDefinition;
userSequenceDefn : instance of AESequenceDefinition;
userSequenceDefns : set of instance of AESequenceDefinition;
userAEInSequenceDefn : instance of AEInSequenceDefinition;
userAEOccurrenceDefn : instance of AEOccurrenceInSequenceDefinition;
userAEOccurrenceDefns : set of instance of AEOccurrenceInSequenceDefinition;
kvps : dictionary of string;

begin
  theDynamicControlDefn := find_one DynamicControlDefinition (jobName = jobName and 
  	                                                          dynamicControlName = dynamicControlName and
                                                              dynamicControlType = dynamicControlType );
  if theDynamicControlDefn /= null then
    // Find the source AEOccurrenceInSequenceDefinition
    userAuditEventDefn := find_one SequencedAuditEventDefinition (AEType = userEventType);
    if userAuditEventDefn /= null then
      userSequenceDefns := userAuditEventDefn -> R1.AESequenceDefinition;
      
      //TODO Check this line is working (it's repeated in other functions too)
      userSequenceDefn := find_one userSequenceDefns (jobName = jobName);
      
      if userSequenceDefn /= null then
        userAEInSequenceDefn := userAuditEventDefn with userSequenceDefn -> R1.AEInSequenceDefinition;
        userAEOccurrenceDefns := userAEInSequenceDefn -> R12;
        userAEOccurrenceDefn := find_one userAEOccurrenceDefns (occurrenceNumberInSequence = userOccurrenceId);
        if userAEOccurrenceDefn /= null then
          //link R31
          link theDynamicControlDefn R31 userAEOccurrenceDefn;
        else
          // Error handling for the specified Audit Event Occurrence Definition was not found
          kvps["eventType"] := userEventType; kvps["occurrenceId"] := userOccurrenceId'image;
          Logger::log(Logger::Warning, "pv.sv.dynamiccontroldefinition.linkusereventdefn",
            svLog("svdc_job_definition_failed", "There is no known Audit Event Occurrence Definition with Audit Event Definition name corresponding to the user event specified for Dynamic Control Definition", "", jobName, kvps));
        end if;  
      else
        // Error handling for the Sequence Definition corresponding to this Audit Event was not found
        kvps["eventType"] := userEventType;
        Logger::log(Logger::Warning, "pv.sv.dynamiccontroldefinition.linkusereventdefn",
          svLog("svdc_job_definition_failed", "There is no known Sequence Definition associated with Audit Event Definition named corresponding to the user event specified for Dynamic Control Definition", "", jobName, kvps));
      end if;    
    else
      // Error handling for the userEventType specified is invalid
      kvps["eventType"] := userEventType;
      Logger::log(Logger::Warning, "pv.sv.dynamiccontroldefinition.linkusereventdefn",
        svLog("svdc_job_definition_failed", "There is no known Audit Event Definition with name corresponding to the user event specified for Dynamic Control Definition", "", jobName, kvps));
    end if;    
    
  else
    //Error handling for the specified Dynamic Control Definition instance was not found
    Logger::log(Logger::Warning, "pv.sv.dynamiccontroldefinition.linkusereventdefn",
      svLog("svdc_job_definition_failed", "There is no known Job Definition with name corresponding to the user event specified for Dynamic Control Definition", "", jobName, kvps));
  end if;

    
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

