// BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

within SequenceVerificationDataCentric::SVDCdomain::AESequenceDC::SVDCclasses is

	//! This supports dynamic controls such as loop counts and branch counts.
	//! The Dynamic Control Definition specifies which Audit Event (Occurrence strictly speaking)
	//! provides the Dynamic Control value and which Audit Event (again Occurrence strictly)
	//! consumes it. For example an audit event early in the sequence may provide a dynamic control
	//! branch count of 10 stating that it applies to event type F. When event type F is seen at runtime
	//! it would be expected to be followed by 10 branches (i.e. 10 different audit events all refering
	//! to a single audit event of type F as their previous event). The dynamic control check will be
	//! made at the end of the Job and any deviation from 10 branches would be an error.
	@key_letters("DCD");
	@class_num(21);
	class DynamicControlDefinition is

		dynamicControlName: string;

		@ref_mode("referred_to");
		jobName: referential (R32.JobDefinition.jobName) string;

		dynamicControlType: dynamicControlTypeEnum;

		@ref_mode("referred_to");
		@use_prefix(prefix="source", root_name="AESequenceId");
		sourceAESequenceId: referential (R30.AEOccurrenceInSequenceDefinition.AESequenceId) integer;

		@ref_mode("referred_to");
		@use_prefix(prefix="source", root_name="AEDefinitionId");
		sourceAEDefinitionId: referential (R30.AEOccurrenceInSequenceDefinition.AEDefinitionId) integer;

		@ref_mode("referred_to");
		@use_prefix(prefix="source", root_name="occurrenceNumberInSequence");
		sourceoccurrenceNumberInSequence: referential (R30.AEOccurrenceInSequenceDefinition.occurrenceNumberInSequence) integer;

		@ref_mode("referred_to");
		@use_prefix(prefix="user", root_name="AESequenceId");
		userAESequenceId: referential (R31.AEOccurrenceInSequenceDefinition.AESequenceId) integer;

		@ref_mode("referred_to");
		@use_prefix(prefix="user", root_name="AEDefinitionId");
		userAEDefinitionId: referential (R31.AEOccurrenceInSequenceDefinition.AEDefinitionId) integer;

		@ref_mode("referred_to");
		@use_prefix(prefix="user", root_name="occurrenceNumberInSequence");
		useroccurrenceNumberInSequence: referential (R31.AEOccurrenceInSequenceDefinition.occurrenceNumberInSequence) integer;

		preferred identifier is (dynamicControlName, jobName);

		@operation_num(1);
		class operation createDynamicControlDefinition(jobName: in string, dynamicControlName: in string, dynamicControlType: in dynamicControlTypeEnum, sourceEventType: in string, sourceOccurrenceId: in integer) is
			@noparse
			theJobDefn : instance of JobDefinition;
			newDynamicControlDefn : instance of DynamicControlDefinition;
			sourceAuditEventDefn : instance of AuditEventDefinition;
			sourceSequenceDefn : instance of AESequenceDefinition;
			sourceAEInSequenceDefn : instance of AEInSequenceDefinition;
			sourceAEOccurrenceDefn : instance of AEOccurrenceInSequenceDefinition;
			sourceAEOccurrenceDefns : set of instance of AEOccurrenceInSequenceDefinition;
			logMessage : string;
			
			
			begin
			  theJobDefn := find_one JobDefinition (jobName = jobName);
			  if theJobDefn /= null then
			    newDynamicControlDefn := create DynamicControlDefinition (jobName => jobName, dynamicControlName => dynamicControlName, dynamicControlType => dynamicControlType);
			    link newDynamicControlDefn R32 theJobDefn;
			    
			    // Find the source AEOccurrenceInSequenceDefinition
			    sourceAuditEventDefn := find_one AuditEventDefinition (AEType = sourceEventType);
			    if sourceAuditEventDefn /= null then
			      // TODO: The following line will need to change if Audit Event Names are not unique across all Job Definitions
			      sourceSequenceDefn := sourceAuditEventDefn -> R1.AESequenceDefinition;
			      if sourceSequenceDefn /= null then
			        sourceAEInSequenceDefn := sourceAuditEventDefn with sourceSequenceDefn -> R1.AEInSequenceDefinition;
			        sourceAEOccurrenceDefns := sourceAEInSequenceDefn -> R12;
			        sourceAEOccurrenceDefn := find_one sourceAEOccurrenceDefns (occurrenceNumberInSequence = sourceOccurrenceId);
			        if sourceAEOccurrenceDefn /= null then
			          //link R30
			          link newDynamicControlDefn R30 sourceAEOccurrenceDefn;
			        else
			          // Error handling for the specified Audit Event Occurrence Definition was not found
			          logMessage := "There is no known Audit Event Occurrence Definition with Audit Event Definition name " & sourceEventType & " Occurrence Id " & sourceOccurrenceId'image & " corresponding to the source event specified for Dynamic Control Definition";
				      Logger::log(Logger::Error, "AESequenceDC", logMessage);
			        end if;  
			      else
			        // Error handling for the Sequence Definition corresponding to this Audit Event was not found
			        logMessage := "There is no known Sequence Definition associated with Audit Event Definition named " & sourceEventType & " corresponding to the source event specified for Dynamic Control Definition";
				    Logger::log(Logger::Error, "AESequenceDC", logMessage);
			      end if;    
			    else
			      // Error handling for the sourceEventType specified is invalid
			      logMessage := "There is no known Audit Event Definition with name " & sourceEventType & " corresponding to the source event specified for Dynamic Control Definition";
				  Logger::log(Logger::Error, "AESequenceDC", logMessage);
			    end if;    
			  else
			    // Error handling for Error Job Definition Unknown
			    logMessage := "There is no known Job Definition with name " & jobName & " corresponding to the source event specified for Dynamic Control Definition";
				Logger::log(Logger::Error, "AESequenceDC", logMessage);
			    
			  end if;  
			end service;
			@endnoparse
		end operation;

		@operation_num(1);
		class operation linkUserEventDefn(jobName: in string, dynamicControlName: in string, dynamicControlType: in dynamicControlTypeEnum, userEventType: in string, userOccurrenceId: in integer) is
			@noparse
			theJobDefn : instance of JobDefinition;
			theDynamicControlDefn : instance of DynamicControlDefinition;
			userAuditEventDefn : instance of AuditEventDefinition;
			userSequenceDefn : instance of AESequenceDefinition;
			userAEInSequenceDefn : instance of AEInSequenceDefinition;
			userAEOccurrenceDefn : instance of AEOccurrenceInSequenceDefinition;
			userAEOccurrenceDefns : set of instance of AEOccurrenceInSequenceDefinition;
			logMessage : string;
			
			
			begin
			  theDynamicControlDefn := find_one DynamicControlDefinition (jobName = jobName and 
			  	                                                          dynamicControlName = dynamicControlName and
			                                                              dynamicControlType = dynamicControlType );
			  if theDynamicControlDefn /= null then
			    // Find the source AEOccurrenceInSequenceDefinition
			    userAuditEventDefn := find_one AuditEventDefinition (AEType = userEventType);
			    if userAuditEventDefn /= null then
			      // TODO: The following line will need to change if Audit Event Names are not unique across all Job Definitions
			      userSequenceDefn := userAuditEventDefn -> R1.AESequenceDefinition;
			      if userSequenceDefn /= null then
			        userAEInSequenceDefn := userAuditEventDefn with userSequenceDefn -> R1.AEInSequenceDefinition;
			        userAEOccurrenceDefns := userAEInSequenceDefn -> R12;
			        userAEOccurrenceDefn := find_one userAEOccurrenceDefns (occurrenceNumberInSequence = userOccurrenceId);
			        if userAEOccurrenceDefn /= null then
			          //link R31
			          link theDynamicControlDefn R31 userAEOccurrenceDefn;
			        else
			          // Error handling for the specified Audit Event Occurrence Definition was not found
			          logMessage := "There is no known Audit Event Occurrence Definition with Audit Event Definition name " & userEventType & " Occurrence Id " & userOccurrenceId'image & " corresponding to the user event specified for Dynamic Control Definition";
				      Logger::log(Logger::Error, "AESequenceDC", logMessage);
			        end if;  
			      else
			        // Error handling for the Sequence Definition corresponding to this Audit Event was not found
			        logMessage := "There is no known Sequence Definition associated with Audit Event Definition named " & userEventType & " corresponding to the user event specified for Dynamic Control Definition";
				    Logger::log(Logger::Error, "AESequenceDC", logMessage);
			      end if;    
			    else
			      // Error handling for the userEventType specified is invalid
			      logMessage := "There is no known Audit Event Definition with name " & userEventType & " corresponding to the user event specified for Dynamic Control Definition";
				  Logger::log(Logger::Error, "AESequenceDC", logMessage);
			    end if;    
			    
			  else
			    //Error handling for the specified Dynamic Control Definition instance was not found
			    logMessage := "There is no known Job Definition with name " & jobName & " corresponding to the user event specified for Dynamic Control Definition";
				Logger::log(Logger::Error, "AESequenceDC", logMessage);
			  end if;
			
			    
			end service;
			@endnoparse
		end operation;

	end class;

end;
