//! ACTIVITY BEGIN. '3040a8fc-2d4a-4228-a303-7525d987dba5' DO NOT EDIT THIS LINE.
public service AESequenceDC::ExtraJobInvariantDefn.createSourceExtraJobInvariantDefn ( jobDefnName : in string,
                                                                                      invariantName : in string,
                                                                                      invariantEventDefn : in eventStructure,
                                                                                      lifetime : in duration ) is
theInvariant : instance of ExtraJobInvariantDefn;
theJobDefn : instance of JobDefinition;
theJobsEvents : set of instance of SequencedAuditEventDefinition;
theEventDefn : instance of SequencedAuditEventDefinition;
theSequenceDefn: instance of AESequenceDefinition;
theSequenceDefns: set of instance of AESequenceDefinition;
theEventInSeqDefn : instance of AEInSequenceDefinition;
theEventOccurrencesInSeqDefn : set of instance of AEOccurrenceInSequenceDefinition;
theEventOccInSeqDefn : instance of AEOccurrenceInSequenceDefinition;
logMessage : string;

begin
  theJobDefn := find_one JobDefinition (jobName = jobDefnName);
  if theJobDefn /= null then
    theJobsEvents := theJobDefn -> R7 -> R1.SequencedAuditEventDefinition;
  
    theEventDefn := find_one theJobsEvents (AEType = invariantEventDefn.eventTypeName);
    if theEventDefn /= null then
      theInvariant := find_one ExtraJobInvariantDefn (extraJobInvName = invariantName);
      if theInvariant = null then
        theInvariant := create ExtraJobInvariantDefn (extraJobInvName => invariantName, lifetime => lifetime);
      else
        // the invariant definition is being updated which may include the events that carry the invariant
        // Update the lifetime and clear the links to existing events so they can be set up again
        theInvariant.lifetime := lifetime;
        if (theInvariant -> R20) /= null then
          unlink (theInvariant -> R20) R20 theInvariant;
        end if;  
        if (theInvariant -> R21) /= null then
          unlink (theInvariant -> R21) R21 theInvariant;
        end if;  
      end if;  
      theSequenceDefns := theEventDefn -> R1.AESequenceDefinition;
      
      theSequenceDefn := find_one theSequenceDefns (jobName = jobDefnName);
      if theSequenceDefn /= null then
            
        theEventInSeqDefn :=  theEventDefn with theSequenceDefn -> R1.AEInSequenceDefinition;
        theEventOccurrencesInSeqDefn := theEventInSeqDefn -> R12;
        theEventOccInSeqDefn := find_one theEventOccurrencesInSeqDefn (occurrenceNumberInSequence = invariantEventDefn.occurrenceId);
        if theEventOccInSeqDefn /= null then
          link theInvariant R20 theEventOccInSeqDefn;
        else
          logMessage := "svdc_job_definition_failed : FailureReason = Invalid Event Definition provided for Extra Job Invariant Name" & " : EventType = " & invariantEventDefn.eventTypeName & " : InvariantName = " & invariantName;
          Logger::log(Logger::Warning, "pv.sv.extrajobinvariantdefn.createsourceextrajobinvariantdefn", logMessage);
        end if;  
      else
        logMessage := "svdc_job_definition_failed : FailureReason = Invalid Event Definition provided for Extra Job Invariant Name" & " : EventType = " & invariantEventDefn.eventTypeName & " : InvariantName = " & invariantName;
        Logger::log(Logger::Warning, "pv.sv.extrajobinvariantdefn.createsourceextrajobinvariantdefn", logMessage);
      end if;
    else
      logMessage := "svdc_job_definition_failed : FailureReason = Invalid Event Definition provided for Extra Job Invariant Name" & " : EventType = " & invariantEventDefn.eventTypeName & " : InvariantName = " & invariantName;
      Logger::log(Logger::Warning, "pv.sv.extrajobinvariantdefn.createsourceextrajobinvariantdefn", logMessage);
    end if;              
  else
    logMessage := "svdc_job_definition_failed : FailureReason = Invalid Job Definition provided for Extra Job Invariant Name" & " : JobName = " & jobDefnName & " : InvariantName = " & invariantName;
    Logger::log(Logger::Warning, "pv.sv.extrajobinvariantdefn.createsourceextrajobinvariantdefn", logMessage);
  end if;

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'e3251a43-6565-4cb4-8261-012dab3e36fe' DO NOT EDIT THIS LINE.
public service AESequenceDC::ExtraJobInvariantDefn.linkUserExtraJobInvariantDefn ( jobDefnName : in string,
                                                                                  invariantName : in string,
                                                                                  invariantEventDefn : in eventStructure ) is
theInvariantDefn : instance of ExtraJobInvariantDefn;
theJobDefn : instance of JobDefinition;
theJobsEvents : set of instance of SequencedAuditEventDefinition;
theEventDefn : instance of SequencedAuditEventDefinition;
theSequenceDefn: instance of AESequenceDefinition;
theSequenceDefns: set of instance of AESequenceDefinition;
theEventInSeqDefn : instance of AEInSequenceDefinition;
theEventOccurrencesInSeqDefn : set of instance of AEOccurrenceInSequenceDefinition;
theEventOccInSeqDefn : instance of AEOccurrenceInSequenceDefinition;
logMessage : string;

begin
  theJobDefn := find_one JobDefinition (jobName = jobDefnName);
  theJobsEvents := theJobDefn -> R7 -> R1.SequencedAuditEventDefinition;
  
  theEventDefn := find_one theJobsEvents (AEType = invariantEventDefn.eventTypeName);
  if theEventDefn /= null then
    theInvariantDefn := find_one ExtraJobInvariantDefn (extraJobInvName = invariantName);
    if theInvariantDefn /= null then
      theSequenceDefns := theEventDefn -> R1.AESequenceDefinition;
      
      theSequenceDefn := find_one theSequenceDefns (jobName = jobDefnName);
      
      theEventInSeqDefn :=  theEventDefn with theSequenceDefn -> R1.AEInSequenceDefinition;
      theEventOccurrencesInSeqDefn := theEventInSeqDefn -> R12;
      theEventOccInSeqDefn := find_one theEventOccurrencesInSeqDefn (occurrenceNumberInSequence = invariantEventDefn.occurrenceId);
      link theInvariantDefn R21 theEventOccInSeqDefn;
    else
      logMessage := "svdc_job_definition_failed : FailureReason = Invalid Event Definition provided for Extra Job Invariant Name" & " : EventType = " & invariantEventDefn.eventTypeName & " : InvariantName = " & invariantName;
      Logger::log(Logger::Warning, "pv.sv.extrajobinvariantdefn.linkuserextrajobinvariantdefn", logMessage);
    end if;              
  else
    logMessage := "svdc_job_definition_failed : FailureReason = Invalid Job Definition provided for Extra Job Invariant Name" & " : EventType = " & invariantEventDefn.eventTypeName & " : InvariantName = " & invariantName;
    Logger::log(Logger::Warning, "pv.sv.extrajobinvariantdefn.linkuserextrajobinvariantdefn", logMessage);
  end if;  

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '0c9559e6-7737-4888-8934-fea07df4a274' DO NOT EDIT THIS LINE.
public instance service AESequenceDC::ExtraJobInvariantDefn.restoreInvariantOfThisDefinition ( restoredInvariant : in persistedInvariantStructure ) is
theAEOccurrenceDefn : instance of AEOccurrenceInSequenceDefinition;
theEventDefn : instance of SequencedAuditEventDefinition;
theJobDefn : instance of JobDefinition;
theRestoredPersistentInvariant : instance of PersistedInvariant;
existingInvariant : instance of PersistedInvariant;
theSystemSpec : instance of SystemSpecification;

logMessage : string;

begin
      theAEOccurrenceDefn := this -> R20;
      theEventDefn := theAEOccurrenceDefn -> R12 -> R1.SequencedAuditEventDefinition;
      theJobDefn := theAEOccurrenceDefn -> R12 -> R1.AESequenceDefinition -> R7;
      if restoredInvariant.sourceJobDefinitionType = theJobDefn.jobName and
         restoredInvariant.sourceAuditEventType = theEventDefn.AEType and
         restoredInvariant.sourceAuditEventOccurrenceId = theAEOccurrenceDefn.occurrenceNumberInSequence then
         // The restored invariant checks out against the source event definition
         
         existingInvariant := find_one PersistedInvariant (extraJobInvName = restoredInvariant.invariantName and
         	                                               invariantValue = restoredInvariant.invariantValue);
         if existingInvariant = null then                                              

           if restoredInvariant.validFrom > timestamp'now then
             // The Persistent Invariant will be valid in the future
             theRestoredPersistentInvariant := create unique PersistedInvariant (invariantName => restoredInvariant.invariantName,
  	                                                                           invariantValue => restoredInvariant.invariantValue,
  	                                                                           validFrom => restoredInvariant.validFrom, 
  	                                                                           validUntil => restoredInvariant.validTo,
  	                                                                           inForce => false, 
  	                                                                           Current_State => Pending );
  	         schedule theRestoredPersistentInvariant.invariantTimer generate PersistedInvariant.invariantComesIntoForce() to theRestoredPersistentInvariant at theRestoredPersistentInvariant.validFrom;

  	       elsif restoredInvariant.validFrom < timestamp'now and 
  	             restoredInvariant.validTo > timestamp'now then
             // The Persistent Invariant is valid now
             theRestoredPersistentInvariant := create unique PersistedInvariant (invariantName => restoredInvariant.invariantName,
  	                                                                           invariantValue => restoredInvariant.invariantValue,
  	                                                                           validFrom => restoredInvariant.validFrom, 
  	                                                                           validUntil => restoredInvariant.validTo,
  	                                                                           inForce => true, 
  	                                                                           Current_State => InForce );
  	         schedule theRestoredPersistentInvariant.invariantTimer generate PersistedInvariant.invariantExpires() to theRestoredPersistentInvariant at theRestoredPersistentInvariant.validUntil;
  	                                                          
  	       elsif restoredInvariant.validTo < timestamp'now then
             // The Persistent Invariant is out of date
             theRestoredPersistentInvariant := create unique PersistedInvariant (invariantName => restoredInvariant.invariantName,
  	                                                                           invariantValue => restoredInvariant.invariantValue,
  	                                                                           validFrom => restoredInvariant.validFrom, 
  	                                                                           validUntil => restoredInvariant.validTo,
  	                                                                           inForce => false, 
  	                                                                           Current_State => Deprecated );
  	                                                          
  	         theSystemSpec := find_only SystemSpecification();                                                    
  	         schedule theRestoredPersistentInvariant.invariantTimer generate PersistedInvariant.timeToDeleteInvariant() to theRestoredPersistentInvariant delay theSystemSpec.sourceExtraJobInvariantDeletionPeriod;
  	              
  	       else
  	              
             logMessage := "svdc_restore_eji_state : Something went wrong restoring the Extra-Job Invariant's state " & restoredInvariant.invariantName;
             Logger::log(Logger::Warning, "pv.sv.extrajobinvariantdefn.restoreinvariantofthisdefinition", logMessage);
  	                                                          
  	       end if; 
  	       
  	     else
  	     
             if (Logger::enabled(Logger::Debug, "pv.sv.extrajobinvariantdefn.restoreInvariantOfThisDefinition")) then
               logMessage := "The restored Extra-Job Invariant is already present in the cache " & restoredInvariant.invariantName;
               Logger::log(Logger::Debug, "pv.sv.extrajobinvariantdefn.restoreinvariantofthisdefinition", logMessage);
             end if;
  	     
  	     end if;  

  	     if theRestoredPersistentInvariant /= null then
  	       link theRestoredPersistentInvariant R24 this;                                          
  	                     
                    
         else
                  
           logMessage := "svdc_restore_eji_not_restored : The Extra-Job Invariant has not been restored successfully " & restoredInvariant.invariantName;
           Logger::log(Logger::Warning, "pv.sv.extrajobinvariantdefn.restoreinvariantofthisdefinition", logMessage);
  	                                                          
         end if;  
                
       else
                
         logMessage := "svdc_restore_eji_no_match : The Extra-Job Invariant to be restored does not match any known definition " & restoredInvariant.invariantName;
         Logger::log(Logger::Warning, "pv.sv.extrajobinvariantdefn.restoreinvariantofthisdefinition", logMessage);

       end if;     
 
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

