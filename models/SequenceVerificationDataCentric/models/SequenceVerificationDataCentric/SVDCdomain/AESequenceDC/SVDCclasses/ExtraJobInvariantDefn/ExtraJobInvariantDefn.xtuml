// BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

within SequenceVerificationDataCentric::SVDCdomain::AESequenceDC::SVDCclasses is

  @key_letters("EJID");
  @class_num(17);
  class ExtraJobInvariantDefn is

    extraJobInvName: string;

    @ref_mode("referred_to");
    AESequenceId: referential (R20.AEOccurrenceInSequenceDefinition.AESequenceId) integer;

    @ref_mode("referred_to");
    AEDefinitionId: referential (R20.AEOccurrenceInSequenceDefinition.AEDefinitionId) integer;

    @ref_mode("referred_to");
    occurrenceNumberInSequence: referential (R20.AEOccurrenceInSequenceDefinition.occurrenceNumberInSequence) integer;

    lifetime: duration;

    preferred identifier is (extraJobInvName);

    @operation_num(1);
    class operation createSourceExtraJobInvariantDefn(jobDefnName: in string, invariantName: in string, invariantEventDefn: in eventStructure, lifetime: in duration) is
      @noparse
      newInvariant : instance of ExtraJobInvariantDefn;
      theJobDefn : instance of JobDefinition;
      theJobsEvents : set of instance of AuditEventDefinition;
      theEventDefn : instance of AuditEventDefinition;
      theSequenceDefn: instance of AESequenceDefinition;
      theEventInSeqDefn : instance of AEInSequenceDefinition;
      theEventOccurrencesInSeqDefn : set of instance of AEOccurrenceInSequenceDefinition;
      theEventOccInSeqDefn : instance of AEOccurrenceInSequenceDefinition;
      logMessage : string;
      
      begin
        theJobDefn := find_one JobDefinition (jobName = jobDefnName);
        if theJobDefn /= null then
          theJobsEvents := theJobDefn -> R7 -> R1.AuditEventDefinition;
        
          theEventDefn := find_one theJobsEvents (AEType = invariantEventDefn.eventTypeName);
          if theEventDefn /= null then
            newInvariant := create ExtraJobInvariantDefn (extraJobInvName => invariantName, lifetime => lifetime);
            theSequenceDefn := theEventDefn -> R1.AESequenceDefinition;
            theEventInSeqDefn :=  theEventDefn with theSequenceDefn -> R1.AEInSequenceDefinition;
            theEventOccurrencesInSeqDefn := theEventInSeqDefn -> R12;
            theEventOccInSeqDefn := find_one theEventOccurrencesInSeqDefn (occurrenceNumberInSequence = invariantEventDefn.occurrenceId);
            link newInvariant R20 theEventOccInSeqDefn;
          else
            logMessage := "Invalid Event Definition provided : " & invariantEventDefn.eventTypeName & "for Extra Job Invariant Name = " & invariantName;
      	  Logger::log(Logger::Error, "AESequenceDC", logMessage);
      	end if;              
        else
          logMessage := "Invalid Job Definition provided : " & jobDefnName & "for Extra Job Invariant Name = " & invariantName;
      	Logger::log(Logger::Error, "AESequenceDC", logMessage);            
        end if;
      
      end service;
      @endnoparse
    end operation;

    @operation_num(1);
    class operation linkUserExtraJobInvariantDefn(jobDefnName: in string, invariantName: in string, invariantEventDefn: in eventStructure) is
      @noparse
      theInvariantDefn : instance of ExtraJobInvariantDefn;
      theJobDefn : instance of JobDefinition;
      theJobsEvents : set of instance of AuditEventDefinition;
      theEventDefn : instance of AuditEventDefinition;
      theSequenceDefn: instance of AESequenceDefinition;
      theEventInSeqDefn : instance of AEInSequenceDefinition;
      theEventOccurrencesInSeqDefn : set of instance of AEOccurrenceInSequenceDefinition;
      theEventOccInSeqDefn : instance of AEOccurrenceInSequenceDefinition;
      logMessage : string;
      
      begin
        theJobDefn := find_one JobDefinition (jobName = jobDefnName);
        theJobsEvents := theJobDefn -> R7 -> R1.AuditEventDefinition;
        
        theEventDefn := find_one theJobsEvents (AEType = invariantEventDefn.eventTypeName);
        if theEventDefn /= null then
          theInvariantDefn := find_one ExtraJobInvariantDefn (extraJobInvName = invariantName);
          if theInvariantDefn /= null then
            theSequenceDefn := theEventDefn -> R1.AESequenceDefinition;
            theEventInSeqDefn :=  theEventDefn with theSequenceDefn -> R1.AEInSequenceDefinition;
            theEventOccurrencesInSeqDefn := theEventInSeqDefn -> R12;
            theEventOccInSeqDefn := find_one theEventOccurrencesInSeqDefn (occurrenceNumberInSequence = invariantEventDefn.occurrenceId);
            link theInvariantDefn R21 theEventOccInSeqDefn;
          else
            logMessage := "Invalid Event Definition provided : " & invariantEventDefn.eventTypeName & "for Extra Job Invariant Name = " & invariantName;
      	  Logger::log(Logger::Error, "AESequenceDC", logMessage);
      	end if;              
        else
          logMessage := "Invalid Job Definition provided : " & jobDefnName & "for Extra Job Invariant Name = " & invariantName;
      	Logger::log(Logger::Error, "AESequenceDC", logMessage);            
        end if;  
      
      end service;
      @endnoparse
    end operation;

    @operation_num(2);
    operation restoreInvariantOfThisDefinition(restoredInvariant: in persistedInvariantStructure) is
      @noparse
      theAEOccurrenceDefn : instance of AEOccurrenceInSequenceDefinition;
      theEventDefn : instance of AuditEventDefinition;
      theJobDefn : instance of JobDefinition;
      theRestoredPersistentInvariant : instance of PersistedInvariant;
      existingInvariant : instance of PersistedInvariant;
      theSystemSpec : instance of SystemSpecification;
      
      logMessage : string;
      
      begin
            theAEOccurrenceDefn := this -> R20;
            theEventDefn := theAEOccurrenceDefn -> R12 -> R1.AuditEventDefinition;
            theJobDefn := theAEOccurrenceDefn -> R12 -> R1.AESequenceDefinition -> R7;
            if restoredInvariant.sourceJobDefinitionType = theJobDefn.jobName and
               restoredInvariant.sourceAuditEventType = theEventDefn.AEType and
               restoredInvariant.sourceAuditEventOccurrenceId = theAEOccurrenceDefn.occurrenceNumberInSequence then
               // The restored invariant checks out against the source event definition
               
               existingInvariant := find_one PersistedInvariant (extraJobInvName = restoredInvariant.extraJobInvariantName and
               	                                               invariantValue = restoredInvariant.InvariantValue);
               if existingInvariant = null then                                              
      
                 if restoredInvariant.validFrom > timestamp'now then
                   // The Persistent Invariant will be valid in the future
                   theRestoredPersistentInvariant := create unique PersistedInvariant (invariantName => restoredInvariant.extraJobInvariantName,
        	                                                                           invariantValue => restoredInvariant.InvariantValue,
        	                                                                           validFrom => restoredInvariant.validFrom, 
        	                                                                           validUntil => restoredInvariant.validTo,
        	                                                                           inForce => false, 
        	                                                                           Current_State => Pending );
        	         schedule theRestoredPersistentInvariant.invariantTimer generate PersistedInvariant.invariantComesIntoForce() to theRestoredPersistentInvariant at theRestoredPersistentInvariant.validFrom;
      
        	       elsif restoredInvariant.validFrom < timestamp'now and 
        	             restoredInvariant.validTo > timestamp'now then
                   // The Persistent Invariant is valid now
                   theRestoredPersistentInvariant := create unique PersistedInvariant (invariantName => restoredInvariant.extraJobInvariantName,
        	                                                                           invariantValue => restoredInvariant.InvariantValue,
        	                                                                           validFrom => restoredInvariant.validFrom, 
        	                                                                           validUntil => restoredInvariant.validTo,
        	                                                                           inForce => true, 
        	                                                                           Current_State => InForce );
        	         schedule theRestoredPersistentInvariant.invariantTimer generate PersistedInvariant.invariantExpires() to theRestoredPersistentInvariant at theRestoredPersistentInvariant.validUntil;
        	                                                          
        	       elsif restoredInvariant.validTo < timestamp'now then
                   // The Persistent Invariant is out of date
                   theRestoredPersistentInvariant := create unique PersistedInvariant (invariantName => restoredInvariant.extraJobInvariantName,
        	                                                                           invariantValue => restoredInvariant.InvariantValue,
        	                                                                           validFrom => restoredInvariant.validFrom, 
        	                                                                           validUntil => restoredInvariant.validTo,
        	                                                                           inForce => false, 
        	                                                                           Current_State => Deprecated );
        	                                                          
        	         theSystemSpec := find_only SystemSpecification();                                                    
        	         schedule theRestoredPersistentInvariant.invariantTimer generate PersistedInvariant.timeToDeleteInvariant() to theRestoredPersistentInvariant delay theSystemSpec.sourceExtraJobInvariantDeletionPeriod;
        	              
        	       else
        	              
                   logMessage := "Something went wrong restoring the Extra-Job Invariant's state " & restoredInvariant.extraJobInvariantName;
                   Logger::log(Logger::Information, "AESequenceDC", logMessage);
        	                                                          
        	       end if; 
        	       
        	     else
        	     
                   logMessage := "The restored Extra-Job Invariant is already present in the cache " & restoredInvariant.extraJobInvariantName;
                   Logger::log(Logger::Information, "AESequenceDC", logMessage);
        	     
        	     end if;  
      
        	     if theRestoredPersistentInvariant /= null then
        	       link theRestoredPersistentInvariant R24 this;                                          
        	                     
                          
               else
                        
                 logMessage := "The Extra-Job Invariant has not been restored successfully " & restoredInvariant.extraJobInvariantName;
                 Logger::log(Logger::Information, "AESequenceDC", logMessage);
        	                                                          
               end if;  
                      
             else
                      
               logMessage := "The Extra-Job Invariant to be restored does not match any known definition " & restoredInvariant.extraJobInvariantName;
               Logger::log(Logger::Information, "AESequenceDC", logMessage);
        	                                                                           
             end if;     
       
      end service;
      @endnoparse
    end operation;

  end class;

end;
