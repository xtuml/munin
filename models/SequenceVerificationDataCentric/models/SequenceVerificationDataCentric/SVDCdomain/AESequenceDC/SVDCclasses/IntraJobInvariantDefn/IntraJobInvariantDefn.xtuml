// BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

within SequenceVerificationDataCentric::SVDCdomain::AESequenceDC::SVDCclasses is

  @key_letters("IJID");
  @class_num(16);
  class IntraJobInvariantDefn is

    intraJobInvName: string;

    @ref_mode("referred_to");
    jobName: referential (R22.JobDefinition.jobName) string;

    preferred identifier is (intraJobInvName, jobName);

    @operation_num(1);
    class operation createIntraJobInvariantDefn(jobName: in string, invariantName: in string, invariantEventDefns: in sequence of eventStructure) is
      @noparse
      newInvariant : instance of IntraJobInvariantDefn;
      theJobDefn : instance of JobDefinition;
      theEventDefn : instance of AuditEventDefinition;
      theSequenceDefn: instance of AESequenceDefinition;
      theEventInSeqDefn : instance of AEInSequenceDefinition;
      theEventOccurrencesInSeqDefn : set of instance of AEOccurrenceInSequenceDefinition;
      theEventOccInSeqDefn : instance of AEOccurrenceInSequenceDefinition;
      logMessage: string;
      
      begin
        theJobDefn := find_one JobDefinition (jobName = jobName);
        if theJobDefn /= null then
          newInvariant := create IntraJobInvariantDefn (jobName => theJobDefn.jobName, intraJobInvName => invariantName);
          link newInvariant R22 theJobDefn;
          
          for eachInvariantEventDefn in invariantEventDefns'elements loop
            theEventDefn := find_one AuditEventDefinition (AEType = eachInvariantEventDefn.eventTypeName);
            if theEventDefn /= null then
              theSequenceDefn := theEventDefn -> R1.AESequenceDefinition;
              theEventInSeqDefn :=  theEventDefn with theSequenceDefn -> R1.AEInSequenceDefinition;
              theEventOccurrencesInSeqDefn := theEventInSeqDefn -> R12;
              theEventOccInSeqDefn := find_one theEventOccurrencesInSeqDefn (occurrenceNumberInSequence = eachInvariantEventDefn.occurrenceId);
              link newInvariant R19 theEventOccInSeqDefn;
            end if;
          end loop;
        else
          // Digital Twin Error dues to failed configurations
          logMessage := "Invalid Job Definition for this intra-job invariant definition = " & theJobDefn.jobName;
          Logger::log(Logger::Error, "AESequenceDC", logMessage);
                
        end if;
        
      end service;
      @endnoparse
    end operation;

  end class;

end;
