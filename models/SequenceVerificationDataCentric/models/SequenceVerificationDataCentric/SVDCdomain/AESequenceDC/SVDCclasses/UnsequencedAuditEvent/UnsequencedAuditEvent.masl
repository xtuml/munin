//! ACTIVITY BEGIN. 'f378ab4f-745f-4cd3-bf43-8096f6c77d8d' DO NOT EDIT THIS LINE.
public service AESequenceDC::UnsequencedAuditEvent.AddEventForNewUnhappyJob ( jobId : in string,
                                                                             jobName : in string,
                                                                             eventId : in string,
                                                                             prevAEIds : in sequence of string,
                                                                             aeType : in string,
                                                                             aeData : in sequence of auditEventDataStructure ) is
newJob : instance of Job;
oldEvent : instance of AuditEvent;
newUnhappyJob : instance of UnhappyJob;
newUnhappyEvent : instance of UnsequencedAuditEvent;
newEvent : instance of AuditEvent;
theJobDefinition : instance of JobDefinition;
newEventType : instance of UnsequencedAuditEventDefinition;
logMessage : string;
eventContent : string;

begin

  oldEvent := find_one AuditEvent (AEId = eventId);
  // Check to see if we've seen this event instance before
  if (oldEvent = null) then
    // We have received an unhappy path event as the first event in the Job. So we need to create a new job 
    // with its corresponding UnhappyJob subtype and this event is an unsequenced event for a Job
    // Note: SequencingFailed is marked true for an UnhappyJob

    if (Logger::enabled(Logger::Debug, "pv.sv.unsequencedauditevent.addeventfornewunhappyjob")) then
      logMessage := "AESequenceDC::UnsequencedAuditEvent.AddEventForNewUnhappyJob : First event for Job is an unhappy event - job id = " & jobId & " with Job Name = " & jobName & ", Initial audit event: " & eventId & " of type " & aeType;
      Logger::log(Logger::Debug, "pv.sv.unsequencedauditevent.addeventfornewunhappyjob", logMessage);
    end if;
    
    newJob := create Job (jobID => jobId, sequencingFailed => true, jobCompleted => false );
    newUnhappyJob := create UnhappyJob (jobID => jobId, Current_State => Created );
    link newUnhappyJob R45 newJob;

      theJobDefinition := find_one JobDefinition (jobName = jobName);
      if theJobDefinition /= null then
        link newJob R8 theJobDefinition;

        // Generate firstUnhappyEvent event polymorphically to UnhappyJob (this needs to leave it in a different JobInProgress state for further events which may be happy or unhappy)
        generate Job.unhappyJobCreated (eventId, prevAEIds, aeType, aeData) to newJob;

        if (Logger::enabled(Logger::Debug, "pv.sv.unsequencedauditevent.addeventfornewunhappyjob")) then
          logMessage := "svdc_new_unhappy_job_started : JobId = " & newJob.jobID & " with Job Name = " & newJob.jobName & " : EventId = " & eventId & " : EventType = " & aeType;
          Logger::log(Logger::Debug, "pv.sv.unsequencedauditevent.addeventfornewunhappyjob", logMessage);
        end if;

      else
        newJob.failJob("An unrecognised job definition has been received - Job Id = " & newJob.jobID & " with Job Name = " & newJob.jobName & " Event Type = " & aeType);      
        logMessage := "AESequenceDC::UnsequencedAuditEvent.AddEventForNewUnhappyJob : No Job Definition found for - job Name = " & jobName & ", Initial audit event: " & eventId & " of type " & aeType;
        Logger::log(Logger::Warning, "pv.sv.unsequencedauditevent.addeventfornewunhappyjob", logMessage);
      end if;  
    
  else
      // Log error: The audit event id received has been seen before
      // TODO:  svdc_job_failed should only be in the JobFailed state of happy and unhappy job.
      logMessage := "svdc_job_failed : JobId = " & jobId & " with Job Name = " & jobName & " : FailureReason = The audit event has been seen before"  & " : EventId = " & eventId & " : EventType = " & aeType;
      Logger::log(Logger::Warning, "pv.sv.unsequencedauditevent.addeventfornewunhappyjob", logMessage);

   
  end if;  

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

