//! ACTIVITY BEGIN. 'f378ab4f-745f-4cd3-bf43-8096f6c77d8d' DO NOT EDIT THIS LINE.
public instance service AESequenceDC::UnsequencedAuditEvent.AddEventForNewUnhappyJob ( jobId : in string,
                                                                                      jobName : in string,
                                                                                      eventId : in string,
                                                                                      prevAEIds : in sequence of string,
                                                                                      aeType : in string,
                                                                                      aeData : in sequence of auditEventDataStructure ) is
newJob : instance of Job;
newUnhappyJob : instance of UnhappyJob;
newUnhappyEvent : instance of UnsequencedAuditEvent;
newEvent : instance of AuditEvent;
theJobDefinition : instance of JobDefinition;
newEventType : instance of UnsequencedAuditEventDefinition;
logMessage : string;
eventContent : string;

begin

    //We have received an unhappy path event as the first event in the Job. So we need to create a new job 
    // with its corresponding UnhappyJob subtype and this event is an unsequenced event for a Job
    // Note: SequencingFailed is marked true for an UnhappyJob
    
    newJob := create Job (jobID => jobId, sequencingFailed => true, jobCompleted => false );
    newUnhappyJob := create UnhappyJob (jobID => jobId, Current_State => Created );
    link newUnhappyJob R45 newJob;
    newUnhappyEvent := create UnsequencedAuditEvent (unsequencedAuditEventId => eventId);
    link newUnhappyEvent R3 newJob;
    newEvent := create AuditEvent (AEId => eventId);
    link newUnhappyEvent R46 newEvent;
    
    newEventType := find_only UnsequencedAuditEventDefinition (UnsequencedAEType = aeType);
    if newEventType /= null then
      link newUnhappyEvent R41 newEventType;

      theJobDefinition := find_one JobDefinition (jobName = jobName);
      if theJobDefinition /= null then
        link newJob R8 theJobDefinition;

        // Generate firstUnhappyEvent event to UnhappyJob (this needs to leave it in a different JobInProgress state for further events which may be happy or unhappy)
        generate UnhappyJob.unhappyJobCreated (eventId, prevAEIds, aeType, aeData) to this;

	    eventContent := "JobId = " & newJob.jobID & " : EventId = " & eventId & " : EventType = " & newEventType.UnsequencedAEType;
	    Reporting~>reportEvent(Logger::Information, "svdc_new_unhappy_job_started", eventContent);

      else
        newJob.failJob("An unrecognised job definition has been received - Job Id = " & newJob.jobID & " Event Type = " & newEventType.UnsequencedAEType);      
        logMessage := "AESequenceDC::UnsequencedAuditEvent.AddEventForNewUnhappyJob : No Job Definition found for - job Name = " & jobName & ", Initial audit event: " & eventId & " of type " & newEventType.UnsequencedAEType;
	    Logger::log(Logger::Error, "AESequenceDC", logMessage);
      end if;  
    

    else
    
      newJob.failJob("An unrecognised event type has been received - Job Id = " & newJob.jobID & " Event Type = " & newEventType.UnsequencedAEType);      
      logMessage := "AESequenceDC::UnsequencedAuditEvent.AddEventForNewUnhappyJob : No Unhappy Audit Event Type found with name = " & aeType & " for - job Name = " & jobName & ", Initial audit event: " & eventId;
	  Logger::log(Logger::Error, "AESequenceDC", logMessage);
 
    end if;

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

