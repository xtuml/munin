// BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

within SequenceVerificationDataCentric::SVDCdomain::AESequenceDC::SVDCclasses is

  //! An Audit Event received from the monitored system. It contains sufficient information:
  //! to associate it with a single Job,
  //! to link it to a single Audit Event Definition
  //! and to identify its previous audit events (if any)
  @key_letters("AE");
  @class_num(5);
  class AuditEvent is

    AuditEventId: string;

    @ref_mode("referred_to");
    jobID: referential (R3.Job.jobID) string;

    @ref_mode("referred_to");
    sequenceId: referential (R11.Sequence.sequenceId) integer;

    //! Set true seen as a previous event in a sequence. Used to calculate branch extent.
    seenAsPreviousEvent: boolean;

    @ref_mode("referred_to");
    AESequenceId: referential (R13.AEOccurrenceInSequenceDefinition.AESequenceId) integer;

    @ref_mode("referred_to");
    AEDefinitionId: referential (R13.AEOccurrenceInSequenceDefinition.AEDefinitionId, R2.AuditEventDefinition.AEDefinitionId) integer;

    @ref_mode("referred_to");
    occurrenceNumberInSequence: referential (R13.AEOccurrenceInSequenceDefinition.occurrenceNumberInSequence) integer;

    preferred identifier is (AuditEventId);

    @dialect("masl");
    @operation_num(1);
    class operation AddEventForNewJob(jobId: in string, eventId: in string, prevAEIds: in sequence of string, aeType: in string, aeData: in sequence of auditEventDataStructure);

    @dialect("masl");
    @operation_num(2);
    operation AddEventTBD();

    @dialect("masl");
    @operation_num(3);
    operation TestPreviousEventIsValid(prevEventInstance: in instance of AuditEvent, previousEventIsValid: out boolean);

    @dialect("masl");
    @operation_num(4);
    operation ProcessAuditEventData(aeData: in sequence of auditEventDataStructure);

  end class;

end;
