//! ACTIVITY BEGIN. '52eb9bfd-2e1d-44ec-b813-aa9a07bd6c5e' DO NOT EDIT THIS LINE.
private service AESequenceDC::InitBranchCountDefinitionEnhanced () is
// Initialisation goes here.
previousEventTypes : sequence of eventStructure;
empty : sequence of eventStructure;

begin
  //
  // Job BranchCountJob, Sequence BranchCountSequence
  // 
  eventDefinition ("BranchCountJob","BranchCountSequence","BCFA",1,previousEventTypes,true,false,false,true,false);
  previousEventTypes := ("BCFA",1,"","");
  eventDefinition ("BranchCountJob","BranchCountSequence","BCFB",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("BCFB",1,"","");
  eventDefinition ("BranchCountJob","BranchCountSequence","BCFC",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("BCFC",1,"","");
  eventDefinition ("BranchCountJob","BranchCountSequence","BCFD",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("BCFD",1,"","");
  eventDefinition ("BranchCountJob","BranchCountSequence","BCFE",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("BCFE",1,"","");
  eventDefinition ("BranchCountJob","BranchCountSequence","BCFF",1,previousEventTypes,false,true,false,true,false);

  createDynamicControlDefinition("BranchCountJob", "Branch_Counter_1", dynamicControlTypeEnum.BRANCHCOUNT, "BCFA",1,"BCFB",1);
  createDynamicControlDefinition("BranchCountJob", "Merge_Counter_1", dynamicControlTypeEnum.MERGECOUNT, "BCFA",1,"BCFD",1);
  
//
  previousEventTypes := empty;
  eventDefinition ("BranchSameSourceAndUserJob","BranchSameSourceAndUserSequence","SSUFA",1,previousEventTypes,true,false,false,true,false);
  previousEventTypes := ("SSUFA",1,"","");
  eventDefinition ("BranchSameSourceAndUserJob","BranchSameSourceAndUserSequence","SSUFB",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("SSUFB",1,"","");
  eventDefinition ("BranchSameSourceAndUserJob","BranchSameSourceAndUserSequence","SSUFC",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("SSUFC",1,"","");
  eventDefinition ("BranchSameSourceAndUserJob","BranchSameSourceAndUserSequence","SSUFD",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("SSUFD",1,"","");
  eventDefinition ("BranchSameSourceAndUserJob","BranchSameSourceAndUserSequence","SSUFE",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("SSUFE",1,"","");
  eventDefinition ("BranchSameSourceAndUserJob","BranchSameSourceAndUserSequence","SSUFF",1,previousEventTypes,false,true,false,true,false);

  createDynamicControlDefinition("BranchSameSourceAndUserJob", "Branch_SameSourceAndUser_1", dynamicControlTypeEnum.BRANCHCOUNT, "SSUFB",1,"SSUFB",1);
//
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '7c63c84a-8adc-4c58-aa13-9939c1c7c745' DO NOT EDIT THIS LINE.
private service AESequenceDC::InitSimpleJobWithUnhappyEvents () is
// Initialisation goes here.
previousEventTypes : sequence of eventStructure;
empty : sequence of eventStructure;

begin
  //
  // A simple job that includes an unhappy event definition
  // 
  eventDefinition ("IncludingUnhappyEventsJob","SimpleSequence","SUHJ-A",1,previousEventTypes,true,false,false,true,false);
  previousEventTypes := ("SUHJ-A",1,"","");
  eventDefinition ("IncludingUnhappyEventsJob","SimpleSequence","SUHJ-B",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("SUHJ-B",1,"","");
  eventDefinition ("IncludingUnhappyEventsJob","SimpleSequence","SUHJ-C",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("SUHJ-C",1,"","");
  eventDefinition ("IncludingUnhappyEventsJob","SimpleSequence","SUHJ-D",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("SUHJ-D",1,"","");
  eventDefinition ("IncludingUnhappyEventsJob","SimpleSequence","SUHJ-E",1,previousEventTypes,false,true,false,true,false);
  //
  // and now the unhappy event definition
  //
  previousEventTypes := empty;
  eventDefinition ("IncludingUnhappyEventsJob","SimpleSequence","SUHJ-Error",1,previousEventTypes,false,false,false,false,false);
  //
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'ac66dcaf-1b96-43f9-b68c-9a16b271ce04' DO NOT EDIT THIS LINE.
private service AESequenceDC::InitSimpleJobWithCriticalAndUnhappyEvents () is
// Initialisation goes here.
previousEventTypes : sequence of eventStructure;
empty : sequence of eventStructure;

begin
  //
  // A simple job that includes an unhappy event definition
  // 
  eventDefinition ("UnhappyCriticalEventsJob","SimpleCriticalSequence","UCEJ-A",1,previousEventTypes,true,false,false,true,false);
  previousEventTypes := ("UCEJ-A",1,"","");
  eventDefinition ("UnhappyCriticalEventsJob","SimpleCriticalSequence","UCEJ-B",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("UCEJ-B",1,"","");
  eventDefinition ("UnhappyCriticalEventsJob","SimpleCriticalSequence","UCEJ-C",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("UCEJ-C",1,"","");
  eventDefinition ("UnhappyCriticalEventsJob","SimpleCriticalSequence","UCEJ-D",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("UCEJ-D",1,"","");
  eventDefinition ("UnhappyCriticalEventsJob","SimpleCriticalSequence","UCEJ-E",1,previousEventTypes,false,true,false,true,true);
  //
  // and now the unhappy event definition
  //
  //
  previousEventTypes := empty;
  eventDefinition ("UnhappyCriticalEventsJob","SimpleSequence","UCEJ-Error",1,previousEventTypes,false,false,false,false,false);
  //
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'dce9da0f-d4e0-4728-a818-f1d3e53faefe' DO NOT EDIT THIS LINE.
private service AESequenceDC::InitJobWithCriticalAndUnhappyEvents1 () is
// Initialisation goes here.
previousEventTypes : sequence of eventStructure;
empty : sequence of eventStructure;

begin
  //
  // A forking job that includes an unhappy event definition
  // 
  eventDefinition ("UnhappyCriticalJob1","CriticalSequence1","UCJ-A",1,previousEventTypes,true,false,false,true,false);
  previousEventTypes := ("UCJ-A",1,"","");
  eventDefinition ("UnhappyCriticalJob1","CriticalSequence1","UCJ-B",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("UCJ-B",1,"CriticalJobANDFork","AND");
  eventDefinition ("UnhappyCriticalJob1","CriticalSequence1","UCJ-C",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("UCJ-C",1,"","");
  eventDefinition ("UnhappyCriticalJob1","CriticalSequence1","UCJ-D",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("UCJ-D",1,"","");
  eventDefinition ("UnhappyCriticalJob1","CriticalSequence1","UCJ-E",1,previousEventTypes,false,false,false,true,true);
  previousEventTypes := ("UCJ-B",1,"CriticalJobANDFork","AND");
  eventDefinition ("UnhappyCriticalJob1","CriticalSequence1","UCJ-F",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("UCJ-F",1,"","");
  eventDefinition ("UnhappyCriticalJob1","CriticalSequence1","UCJ-G",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("UCJ-G",1,"","");
  eventDefinition ("UnhappyCriticalJob1","CriticalSequence1","UCJ-H",1,previousEventTypes,false,false,false,true,true);
  previousEventTypes := ("UCJ-E",1,"","") & ("UCJ-H",1,"","");
  eventDefinition ("UnhappyCriticalJob1","CriticalSequence1","UCJ-I",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("UCJ-I",1,"","");
  eventDefinition ("UnhappyCriticalJob1","CriticalSequence1","UCJ-J",1,previousEventTypes,false,true,false,true,false);
  //
  //dynamicControlDefinition("UnhappyCriticalJob1", "TypeFork_1", dynamicControlTypeEnum.BRANCHCOUNT, "CSJB",1,"CSJB",1);
  //dynamicControlDefinition("UnhappyCriticalJob1", "TypeMerge1", dynamicControlTypeEnum.MERGECOUNT, "CSJB",1,"CSJI",1);
  
  // and now the unhappy event definitions
  //
  //
  previousEventTypes := empty;
  eventDefinition ("UnhappyCriticalJob1","CriticalSequence1","UCJ-Error1",1,previousEventTypes,false,false,false,false,false);
  previousEventTypes := empty;
  eventDefinition ("UnhappyCriticalJob1","CriticalSequence1","UCJ-Error2",1,previousEventTypes,false,false,false,false,false);
  //
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '4b94f810-9a82-41d0-a59d-20bbf33eb308' DO NOT EDIT THIS LINE.
private service AESequenceDC::InitJobWithRepeatedEventNames () is
// Initialisation goes here.
previousEventTypes : sequence of eventStructure;
empty : sequence of eventStructure;

begin
  //
  // A forking job that includes an unhappy event definition
  // 
  eventDefinition ("RepeatedEventNameJob1","RENSequence1","RENJ-A",1,previousEventTypes,true,false,false,true,false);
  previousEventTypes := ("RENJ-A",1,"","");
  eventDefinition ("RepeatedEventNameJob1","RENSequence1","RENJ-B",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("RENJ-B",1,"CriticalJobANDFork","AND");
  eventDefinition ("RepeatedEventNameJob1","RENSequence1","RENJ-C",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("RENJ-C",1,"","");
  eventDefinition ("RepeatedEventNameJob1","RENSequence1","RENJ-D",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("RENJ-D",1,"","");
  eventDefinition ("RepeatedEventNameJob1","RENSequence1","RENJ-E",1,previousEventTypes,false,false,false,true,true);
  previousEventTypes := ("RENJ-B",1,"CriticalJobANDFork","AND");
  eventDefinition ("RepeatedEventNameJob1","RENSequence1","RENJ-F",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("RENJ-F",1,"","");
  eventDefinition ("RepeatedEventNameJob1","RENSequence1","RENJ-G",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("RENJ-G",1,"","");
  eventDefinition ("RepeatedEventNameJob1","RENSequence1","RENJ-H",1,previousEventTypes,false,false,false,true,true);
  previousEventTypes := ("RENJ-E",1,"","") & ("RENJ-H",1,"","");
  eventDefinition ("RepeatedEventNameJob1","RENSequence1","RENJ-I",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("RENJ-I",1,"","");
  eventDefinition ("RepeatedEventNameJob1","RENSequence1","RENJ-J",1,previousEventTypes,false,true,false,true,false);
  //
  //dynamicControlDefinition("RepeatedEventNameJob1", "TypeFork_1", dynamicControlTypeEnum.BRANCHCOUNT, "CSJB",1,"CSJB",1);
  //dynamicControlDefinition("RepeatedEventNameJob1", "TypeMerge1", dynamicControlTypeEnum.MERGECOUNT, "CSJB",1,"CSJI",1);
  
  // and now the unhappy event definitions
  //
  //
  previousEventTypes := empty;
  eventDefinition ("RepeatedEventNameJob1","RENSequence1","RENJ-Error1",1,previousEventTypes,false,false,false,false,false);
  previousEventTypes := empty;
  eventDefinition ("RepeatedEventNameJob1","RENSequence1","RENJ-Error2",1,previousEventTypes,false,false,false,false,false);
  //
 //
  // Here's a second job definition that uses the same event names and RENSequence names
  // 
  eventDefinition ("RepeatedEventNameJob2","RENSequence2","RENJ-A",1,previousEventTypes,true,false,false,true,false);
  previousEventTypes := ("RENJ-A",1,"","");
  eventDefinition ("RepeatedEventNameJob2","RENSequence2","RENJ-B",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("RENJ-B",1,"CriticalJobANDFork","AND");
  eventDefinition ("RepeatedEventNameJob2","RENSequence2","RENJ-C",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("RENJ-C",1,"","");
  eventDefinition ("RepeatedEventNameJob2","RENSequence2","RENJ-D",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("RENJ-D",1,"","");
  eventDefinition ("RepeatedEventNameJob2","RENSequence2","RENJ-E",1,previousEventTypes,false,false,false,true,true);
  previousEventTypes := ("RENJ-B",1,"CriticalJobANDFork","AND");
  eventDefinition ("RepeatedEventNameJob2","RENSequence2","RENJ-F",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("RENJ-F",1,"","");
  eventDefinition ("RepeatedEventNameJob2","RENSequence2","RENJ-G",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("RENJ-G",1,"","");
  eventDefinition ("RepeatedEventNameJob2","RENSequence2","RENJ-H",1,previousEventTypes,false,false,false,true,true);
  previousEventTypes := ("RENJ-E",1,"","") & ("RENJ-H",1,"","");
  eventDefinition ("RepeatedEventNameJob2","RENSequence2","RENJ-I",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("RENJ-I",1,"","");
  eventDefinition ("RepeatedEventNameJob2","RENSequence2","RENJ-J",1,previousEventTypes,false,true,false,true,false);
  // 
  // and now the unhappy event definitions
  //
  //
  previousEventTypes := empty;
  eventDefinition ("RepeatedEventNameJob2","RENSequence2","RENJ-Error1",1,previousEventTypes,false,false,false,false,false);
  previousEventTypes := empty;
  eventDefinition ("RepeatedEventNameJob2","RENSequence2","RENJ-Error2",1,previousEventTypes,false,false,false,false,false);
end service;
//
//
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '74494d58-defa-43e4-b7d8-045556178064' DO NOT EDIT THIS LINE.
private service AESequenceDC::InitComplexSequenceWithRepeatedNamesDefinition () is
// Initialisation goes here.
previousEventTypes : sequence of eventStructure;
empty : sequence of eventStructure;
invariantEventTypeUses : sequence of intraJobInvDataStructure;
userEventOccurrences : sequence of userEventDataStructure;

begin
  // This scenario sets up the definitions for two Job types - 'ComplexJobRepeat1' and 'GenerateAuthorisationTokenJob'
  //
  // Job: ComplexJobRepeat1, Sequence: ComplexSequenceRepeat 
  //
  // Event definitions for section 1 of sequence...
  previousEventTypes := empty;
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-A",1,previousEventTypes,true,false,false,true,false);  
  previousEventTypes := ("CS1-A",1,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-B",1,previousEventTypes,false,false,false,true,false); 
  previousEventTypes := ("CS1-B",1,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-C",1,previousEventTypes,false,false,false,true,false);
  // Event definitions for section 2 of sequence...
  // Start of first loop in section 2.
  previousEventTypes := ("CS1-C",1,"MultiWayANDForkR","AND") & ("CS1-F",1,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-D",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-D",1,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-E",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-E",1,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-F",1,previousEventTypes,false,false,false,true,false);
  // End of first loop of events in section 2.
  previousEventTypes := ("CS1-F",1,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-G",1,previousEventTypes,false,false,false,true,false);
  // Start of second loop in section 2 of sequence - this loop includes an XOR break-out alternative at event CS1-E
  previousEventTypes := ("CS1-G",1,"","") & ("CS1-F",2,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-D",2,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-D",2,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-E",2,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-E",2,"LoopBreakoutAtCS1-E2R","XOR");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-F",2,previousEventTypes,false,false,false,true,false);
  // End of second loop in section2 of sequence
  //
  // ...and now the remaining event definitions for section 2 of sequence.
  previousEventTypes := ("CS1-E",2,"LoopBreakoutAtCS1-E2R","XOR");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-T",1,previousEventTypes,false,false,true,true,false);
  previousEventTypes := ("CS1-F",2,"","") & ("CS1-T",1,"","") & ("CS1-M",1,"ErrorAtCS1-M1R","XOR");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-H",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-H",1,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-J",1,previousEventTypes,false,true,false,true,false);
  //
  // Event definitions for section 3 of sequence...
  previousEventTypes := ("CS1-C",1,"MultiWayANDForkR","AND");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-K",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-K",1,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-L",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-L",1,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-M",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-M",1,"ErrorAtCS1-M1R","XOR");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-N",1,previousEventTypes,false,true,false,true,false);
  //
  // Event definitions for section 4 of sequence...
  previousEventTypes := ("CS1-C",1,"MultiWayANDForkR","AND");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-P",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-P",1,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-Q",1,previousEventTypes,false,true,false,true,false);
  //
  // Event definitions for section 5 of sequence...
  previousEventTypes := ("CS1-C",1,"MultiWayANDForkR","AND");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-C",2,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-C",2,"","") & ("CS1-E",3,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-D",3,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-D",3,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-E",3,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-E",3,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-F",3,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-F",3,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-D",4,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-D",4,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-G",2,previousEventTypes,false,true,false,true,false);
  //
  // Event definitions for section 6 of sequence...
  previousEventTypes := ("CS1-C",1,"MultiWayANDForkR","AND") & ("CS1-S",1,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-S",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-S",1,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-D",5,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("CS1-D",5,"","");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-E",4,previousEventTypes,false,true,false,true,false);
  //
  // Event definitions for section 7 of sequence...
  previousEventTypes := ("CS1-C",1,"ErrorAtCS1-C1R","XOR");
  eventDefinition ("ComplexJobRepeat1","ComplexSequenceRepeat","CS1-R",1,previousEventTypes,false,true,false,true,false);
  //
  // Now, set up the dynamic control definitions for 'ComplexJobRepeat1'...
  createDynamicControlDefinition("ComplexJobRepeat1", "LC1", dynamicControlTypeEnum.LOOPCOUNT, "CS1-B",1,"CS1-E",1);
  createDynamicControlDefinition("ComplexJobRepeat1", "LC2", dynamicControlTypeEnum.LOOPCOUNT, "CS1-B",1,"CS1-D",2);
  createDynamicControlDefinition("ComplexJobRepeat1", "LC3", dynamicControlTypeEnum.LOOPCOUNT, "CS1-A",1,"CS1-S",1);
  //createDynamicControlDefinition("ComplexJobRepeat1", "LC4", dynamicControlTypeEnum.LOOPCOUNT, "CS1-B",1,"CS1-F",1);
  createDynamicControlDefinition("ComplexJobRepeat1", "BC1", dynamicControlTypeEnum.BRANCHCOUNT, "CS1-F",3,"CS1-F",3);
  createDynamicControlDefinition("ComplexJobRepeat1", "BC2", dynamicControlTypeEnum.BRANCHCOUNT, "CS1-A",1,"CS1-K",1);
  //
  // And then set up the Invariant definitions for 'ComplexJobRepeat1'...
  // Define an intra-job invariant for the 'ComplexJobRepeat1' that is used at B,1 and H,1
  invariantEventTypeUses := ("CS1-B",1,"") & ("CS1-H",1,"");
  intraJobInvariantDefinition("ComplexJobRepeat1","InvariantRA",invariantEventTypeUses);
  
  // Now define the event definitions for 'GenerateAuthorisationTokenJob'...
  previousEventTypes := empty;
  eventDefinition ("GenerateAuthorisationTokenJob2","GenerateAuthorisationToken2","TOK-A",1,previousEventTypes,true,false,false,true,false);  
  previousEventTypes := ("TOK-A",1,"","");
  eventDefinition ("GenerateAuthorisationTokenJob2","GenerateAuthorisationToken2","TOK-B",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("TOK-B",1,"","");
  eventDefinition ("GenerateAuthorisationTokenJob2","GenerateAuthorisationToken2","TOK-C",1,previousEventTypes,false,false,false,true,false);
  previousEventTypes := ("TOK-C",1,"","");
  eventDefinition ("GenerateAuthorisationTokenJob2","GenerateAuthorisationToken2","TOK-D",1,previousEventTypes,false,true,false,true,false);
  
  //Define the source of the ExtraJobInvariant 'AUTH_TOKEN_A' in the 'GenerateAuthorisationTokenJob' that is used by
  // event occurrences CS1-E,1 & CS1-L,1 & CS1-F,3 in the 'ComplexJobRepeat1'.
  userEventOccurrences := ("ComplexJobRepeat1","CS1-E",1,"") & ("ComplexJobRepeat1","CS1-L",1,"") & ("ComplexJobRepeat1","CS1-D",4,"");
  extraJobInvariantDefinition("AUTH_TOKEN_C", "GenerateAuthorisationTokenJob2", "TOK-D",1,userEventOccurrences);
  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

