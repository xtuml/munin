//! ACTIVITY BEGIN. 'bd15c0f3-5f0f-4aa7-af17-cc725b91c1ef' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test25NormalLoopWithBreakPath () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Jobs with 1 sequences based on a looped path definition - 4 full iterations of the loop
  // followed by an error which cause the loop to be exited.
  // This test does not reveal any erroneous behaviour of the twin
  //
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "Counter_L1", "10");
  acceptOrderedEvent ("1620920000","Test-0001","LA","Job_LoopBreak_1","LoopWithBreakJob","","Ev301",theAuditEventData);
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev301","Ev302",theAuditEventData);
  acceptOrderedEvent ("1620920002","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev302","Ev303",theAuditEventData);
  acceptOrderedEvent ("1620920003","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev303","Ev304",theAuditEventData);
  acceptOrderedEvent ("1620920004","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev304","Ev305",theAuditEventData);
  acceptOrderedEvent ("1620920005","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev305","Ev306",theAuditEventData);
  acceptOrderedEvent ("1620920006","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev306","Ev307",theAuditEventData);
  acceptOrderedEvent ("1620920007","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev307","Ev308",theAuditEventData);
  acceptOrderedEvent ("1620920008","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev308","Ev309",theAuditEventData);
  acceptOrderedEvent ("1620920009","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev309","Ev310",theAuditEventData);
  acceptOrderedEvent ("1620920010","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev310","Ev311",theAuditEventData);
  acceptOrderedEvent ("1620920011","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev311","Ev312",theAuditEventData);
  acceptOrderedEvent ("1620920012","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev312","Ev313",theAuditEventData);
  acceptOrderedEvent ("1620920013","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev313","Ev314",theAuditEventData);
  acceptOrderedEvent ("1620920014","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev314","Ev315",theAuditEventData);
  acceptOrderedEvent ("1620920015","Test-0001","LCError","Job_LoopBreak_1","LoopWithBreakJob","Ev315","Ev316",theAuditEventData);
  acceptOrderedEvent ("1620920016","Test-0001","LE","Job_LoopBreak_1","LoopWithBreakJob","Ev316","Ev317",theAuditEventData);

  //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 17, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2b1e9030-e7d0-4035-a6dc-55e9f163e6d6' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test27NormalInstanceForkWithBranchCount () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Job with 1 sequences based on a fork and merge path definition - there are 10 branches
  // This test does not reveal any erroneous behaviour of the twin
  //
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "Branch_Counter_1", "10") & (aeDataKindEnum.MERGECOUNT, "Merge_Counter_1", "10");
  acceptOrderedEvent ("1620920000","Test-0001","BCFA","Branch_Count_Job","BranchCountJob",previousEvents,"Ev301",theAuditEventData);
  theAuditEventData :=  emptyAuditEventData;
  previousEvents := ("Ev301");
  acceptOrderedEvent ("1620920001","Test-0001","BCFB","Branch_Count_Job","BranchCountJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev312",theAuditEventData);
  previousEvents := empty & "Ev303" & "Ev304" & "Ev305" & "Ev306" & "Ev307" & "Ev308" & "Ev309" & "Ev310" & "Ev311" & "Ev312";
  acceptOrderedEvent ("1620920003","Test-0001","BCFD","Branch_Count_Job","BranchCountJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := ("Ev313");
  acceptOrderedEvent ("1620920004","Test-0001","BCFE","Branch_Count_Job","BranchCountJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := ("Ev314");
  acceptOrderedEvent ("1620920005","Test-0001","BCFF","Branch_Count_Job","BranchCountJob",previousEvents,"Ev315",theAuditEventData);
 //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 15, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'fbcf1aed-8b9c-41f5-964b-59be6ae1710e' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test26NormalLoopWithLoopCount () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
theDynamicControlDefn : instance of DynamicControlDefinition;
sourceOccurrence: instance of AEOccurrenceInSequenceDefinition;
userOccurrence: instance of AEOccurrenceInSequenceDefinition;
theJobDefn : instance of JobDefinition;
theDynamicControl : instance of DynamicControl;
theDynamicControls : set of instance of DynamicControl;

begin
  // initial Test of Definitions
  theDynamicControlDefn := find_one DynamicControlDefinition (dynamicControlName = "Counter_1");
  sourceOccurrence := theDynamicControlDefn -> R30;
  userOccurrence := theDynamicControlDefn -> R31;
  theJobDefn := theDynamicControlDefn -> R32;
  
  Assertions::assertTrue(theDynamicControlDefn.dynamicControlName = "Counter_1", "Loop Counter not created as expected: " & theDynamicControlDefn.dynamicControlName);
  Assertions::assertTrue((theDynamicControlDefn -> R30 -> R12 -> R1.SequencedAuditEventDefinition).AEType = "LCLA", "Source Event for Dynamic Control is incorrect: " & (theDynamicControlDefn -> R30 -> R12 -> R1.SequencedAuditEventDefinition).AEType);
//  Assertions::assertTrue((theDynamicControlDefn -> R31 -> R12 -> R1.AuditEventDefinition).AEType = "LCLB", "User Event for Dynamic Control is incorrect: " & (theDynamicControlDefn -> R31 -> R12 -> R1.AuditEventDefinition).AEType);
  Assertions::assertTrue(theJobDefn.jobName = "LoopCountJob", "Job not created as expected: " & theJobDefn.jobName);
  
  
  // This test covers 1 Jobs with 1 sequences based on a looped path definition - 4 full iterations of the loop
  // followed by an error which cause the loop to be exited.
  // This test does not reveal any erroneous behaviour of the twin
  //
  
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "Counter_1", "5");
  acceptOrderedEvent ("1620920000","Test-0001","LCLA","Job_LoopCount_1","LoopCountJob","","Ev301",theAuditEventData);
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","Test-0001","LCLB","Job_LoopCount_1","LoopCountJob","Ev301","Ev302",theAuditEventData);
  acceptOrderedEvent ("1620920002","Test-0001","LCLC","Job_LoopCount_1","LoopCountJob","Ev302","Ev303",theAuditEventData);
  acceptOrderedEvent ("1620920003","Test-0001","LCLD","Job_LoopCount_1","LoopCountJob","Ev303","Ev304",theAuditEventData);
  acceptOrderedEvent ("1620920004","Test-0001","LCLB","Job_LoopCount_1","LoopCountJob","Ev304","Ev305",theAuditEventData);
  acceptOrderedEvent ("1620920005","Test-0001","LCLC","Job_LoopCount_1","LoopCountJob","Ev305","Ev306",theAuditEventData);
  acceptOrderedEvent ("1620920006","Test-0001","LCLD","Job_LoopCount_1","LoopCountJob","Ev306","Ev307",theAuditEventData);
  acceptOrderedEvent ("1620920007","Test-0001","LCLB","Job_LoopCount_1","LoopCountJob","Ev307","Ev308",theAuditEventData);
  acceptOrderedEvent ("1620920008","Test-0001","LCLC","Job_LoopCount_1","LoopCountJob","Ev308","Ev309",theAuditEventData);
  acceptOrderedEvent ("1620920009","Test-0001","LCLD","Job_LoopCount_1","LoopCountJob","Ev309","Ev310",theAuditEventData);
  acceptOrderedEvent ("1620920010","Test-0001","LCLB","Job_LoopCount_1","LoopCountJob","Ev310","Ev311",theAuditEventData);
  acceptOrderedEvent ("1620920011","Test-0001","LCLC","Job_LoopCount_1","LoopCountJob","Ev311","Ev312",theAuditEventData);
  acceptOrderedEvent ("1620920012","Test-0001","LCLD","Job_LoopCount_1","LoopCountJob","Ev312","Ev313",theAuditEventData);
  acceptOrderedEvent ("1620920013","Test-0001","LCLB","Job_LoopCount_1","LoopCountJob","Ev313","Ev314",theAuditEventData);
  acceptOrderedEvent ("1620920014","Test-0001","LCLC","Job_LoopCount_1","LoopCountJob","Ev314","Ev315",theAuditEventData);
  acceptOrderedEvent ("1620920015","Test-0001","LCLD","Job_LoopCount_1","LoopCountJob","Ev315","Ev316",theAuditEventData);
  acceptOrderedEvent ("1620920016","Test-0001","LCLE","Job_LoopCount_1","LoopCountJob","Ev316","Ev317",theAuditEventData);

  //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  //
  Assertions::assertTrue(theDynamicControls'length = 1, "Wrong number of Dynamic Controls created: " & (theDynamicControls'length)'image);
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 17, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '1ed1b00e-02c0-4154-8650-64160226cdf6' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test61InvalidInstanceForkWithBranchCount () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
previousEvents : sequence of string;
empty : sequence of string;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Job with 1 sequences based on a fork and merge path definition - there are 10 branches
  // This test does reveals any erroneous behaviour of the twin since the Branch Count is specified as 12 
  // but only 10 branches are subsequently seen
  //
  theAuditEventData := (aeDataKindEnum.BRANCHCOUNT, "Branch_Counter_1", "12");
  acceptOrderedEvent ("1620920000","Test-0001","BCFA","Branch_Count_Job","BranchCountJob",previousEvents,"Ev301",theAuditEventData);
  theAuditEventData :=  emptyAuditEventData;
  previousEvents := ("Ev301");
  acceptOrderedEvent ("1620920001","Test-0001","BCFB","Branch_Count_Job","BranchCountJob",previousEvents,"Ev302",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev303",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev304",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev305",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev306",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev307",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev308",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev309",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev310",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev311",theAuditEventData);
  previousEvents := ("Ev302");
  acceptOrderedEvent ("1620920002","Test-0001","BCFC","Branch_Count_Job","BranchCountJob",previousEvents,"Ev312",theAuditEventData);
  previousEvents := empty & "Ev303" & "Ev304" & "Ev305" & "Ev306" & "Ev307" & "Ev308" & "Ev309" & "Ev310" & "Ev311" & "Ev312";
  acceptOrderedEvent ("1620920003","Test-0001","BCFD","Branch_Count_Job","BranchCountJob",previousEvents,"Ev313",theAuditEventData);
  previousEvents := ("Ev313");
  acceptOrderedEvent ("1620920004","Test-0001","BCFE","Branch_Count_Job","BranchCountJob",previousEvents,"Ev314",theAuditEventData);
  previousEvents := ("Ev314");
  acceptOrderedEvent ("1620920005","Test-0001","BCFF","Branch_Count_Job","BranchCountJob",previousEvents,"Ev315",theAuditEventData);
 //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted = false, "Job completed even though the branch count was wrong: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '6e235429-cec2-48cd-b857-ffaed9ff9f00' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test62InvalidLoopWithLoopCount () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;
theDynamicControlDefn : instance of DynamicControlDefinition;
sourceOccurrence: instance of AEOccurrenceInSequenceDefinition;
userOccurrence: instance of AEOccurrenceInSequenceDefinition;
theJobDefn : instance of JobDefinition;
theDynamicControl : instance of DynamicControl;
theDynamicControls : set of instance of DynamicControl;

begin
  // initial Test of Definitions
  theDynamicControlDefn := find_one DynamicControlDefinition (dynamicControlName = "Counter_1");
  sourceOccurrence := theDynamicControlDefn -> R30;
  userOccurrence := theDynamicControlDefn -> R31;
  theJobDefn := theDynamicControlDefn -> R32;
  
  Assertions::assertTrue(theDynamicControlDefn.dynamicControlName = "Counter_1", "Loop Counter not created as expected: " & theDynamicControlDefn.dynamicControlName);
  Assertions::assertTrue((theDynamicControlDefn -> R30 -> R12 -> R1.SequencedAuditEventDefinition).AEType = "LCLA", "Source Event for Dynamic Control is incorrect: " & (theDynamicControlDefn -> R30 -> R12 -> R1.SequencedAuditEventDefinition).AEType);
//  Assertions::assertTrue((theDynamicControlDefn -> R31 -> R12 -> R1.AuditEventDefinition).AEType = "LCLB", "User Event for Dynamic Control is incorrect: " & (theDynamicControlDefn -> R31 -> R12 -> R1.AuditEventDefinition).AEType);
  Assertions::assertTrue(theJobDefn.jobName = "LoopCountJob", "Job not created as expected: " & theJobDefn.jobName);
  
  
  // This test covers 1 Jobs with 1 sequences based on a looped path definition - 4 full iterations of the loop
  // followed by an error which cause the loop to be exited.
  // This test does not reveal any erroneous behaviour of the twin
  //
  
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "Counter_1", "4");
  acceptOrderedEvent ("1620920000","Test-0001","LCLA","Job_LoopCount_1","LoopCountJob","","Ev301",theAuditEventData);
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","Test-0001","LCLB","Job_LoopCount_1","LoopCountJob","Ev301","Ev302",theAuditEventData);
  acceptOrderedEvent ("1620920002","Test-0001","LCLC","Job_LoopCount_1","LoopCountJob","Ev302","Ev303",theAuditEventData);
  acceptOrderedEvent ("1620920003","Test-0001","LCLD","Job_LoopCount_1","LoopCountJob","Ev303","Ev304",theAuditEventData);
  acceptOrderedEvent ("1620920004","Test-0001","LCLB","Job_LoopCount_1","LoopCountJob","Ev304","Ev305",theAuditEventData);
  acceptOrderedEvent ("1620920005","Test-0001","LCLC","Job_LoopCount_1","LoopCountJob","Ev305","Ev306",theAuditEventData);
  acceptOrderedEvent ("1620920006","Test-0001","LCLD","Job_LoopCount_1","LoopCountJob","Ev306","Ev307",theAuditEventData);
  acceptOrderedEvent ("1620920007","Test-0001","LCLB","Job_LoopCount_1","LoopCountJob","Ev307","Ev308",theAuditEventData);
  acceptOrderedEvent ("1620920008","Test-0001","LCLC","Job_LoopCount_1","LoopCountJob","Ev308","Ev309",theAuditEventData);
  acceptOrderedEvent ("1620920009","Test-0001","LCLD","Job_LoopCount_1","LoopCountJob","Ev309","Ev310",theAuditEventData);
  acceptOrderedEvent ("1620920010","Test-0001","LCLB","Job_LoopCount_1","LoopCountJob","Ev310","Ev311",theAuditEventData);
  acceptOrderedEvent ("1620920011","Test-0001","LCLC","Job_LoopCount_1","LoopCountJob","Ev311","Ev312",theAuditEventData);
  acceptOrderedEvent ("1620920012","Test-0001","LCLD","Job_LoopCount_1","LoopCountJob","Ev312","Ev313",theAuditEventData);
  acceptOrderedEvent ("1620920013","Test-0001","LCLB","Job_LoopCount_1","LoopCountJob","Ev313","Ev314",theAuditEventData);
  acceptOrderedEvent ("1620920014","Test-0001","LCLC","Job_LoopCount_1","LoopCountJob","Ev314","Ev315",theAuditEventData);
  acceptOrderedEvent ("1620920015","Test-0001","LCLD","Job_LoopCount_1","LoopCountJob","Ev315","Ev316",theAuditEventData);
  acceptOrderedEvent ("1620920016","Test-0001","LCLE","Job_LoopCount_1","LoopCountJob","Ev316","Ev317",theAuditEventData);

  //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  theDynamicControls := theJobs -> R35;
  //
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted = false, "Job completed even though loop count was invalid: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '6a1034b1-c32c-41d2-9b71-1febbc06a948' DO NOT EDIT THIS LINE.
private service AESequenceDC::Test28NormalLoopWithBreakNotTaken () is
theJob : instance of Job;
theJobs : set of instance of Job;
theSequences : set of instance of Sequence;
theAuditEvents : set of instance of SequencedAuditEvent;
theAuditEventData : sequence of auditEventDataStructure;
emptyAuditEventData : sequence of auditEventDataStructure;

begin
  // This test covers 1 Jobs with 1 sequences based on a looped path definition - 4 full iterations of the loop
  // followed by an error which cause the loop to be exited.
  // This test does not reveal any erroneous behaviour of the twin
  //
  theAuditEventData := (aeDataKindEnum.LOOPCOUNT, "Counter_L1", "10");
  acceptOrderedEvent ("1620920000","Test-0001","LA","Job_LoopBreak_1","LoopWithBreakJob","","Ev301",theAuditEventData);
  theAuditEventData := emptyAuditEventData;
  acceptOrderedEvent ("1620920001","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev301","Ev302",theAuditEventData);
  acceptOrderedEvent ("1620920002","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev302","Ev303",theAuditEventData);
  acceptOrderedEvent ("1620920003","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev303","Ev304",theAuditEventData);
  acceptOrderedEvent ("1620920004","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev304","Ev305",theAuditEventData);
  acceptOrderedEvent ("1620920005","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev305","Ev306",theAuditEventData);
  acceptOrderedEvent ("1620920006","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev306","Ev307",theAuditEventData);
  acceptOrderedEvent ("1620920007","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev307","Ev308",theAuditEventData);
  acceptOrderedEvent ("1620920008","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev308","Ev309",theAuditEventData);
  acceptOrderedEvent ("1620920009","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev309","Ev310",theAuditEventData);
  acceptOrderedEvent ("1620920010","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev310","Ev311",theAuditEventData);
  acceptOrderedEvent ("1620920011","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev311","Ev312",theAuditEventData);
  acceptOrderedEvent ("1620920012","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev312","Ev313",theAuditEventData);
  acceptOrderedEvent ("1620920013","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev313","Ev314",theAuditEventData);
  acceptOrderedEvent ("1620920014","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev314","Ev315",theAuditEventData);
  acceptOrderedEvent ("1620920015","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev315","Ev316",theAuditEventData);
  acceptOrderedEvent ("1620920016","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev316","Ev317",theAuditEventData);
  acceptOrderedEvent ("1620920017","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev317","Ev318",theAuditEventData);
  acceptOrderedEvent ("1620920018","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev318","Ev319",theAuditEventData);
  acceptOrderedEvent ("1620920019","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev319","Ev320",theAuditEventData);
  acceptOrderedEvent ("1620920020","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev320","Ev321",theAuditEventData);
  acceptOrderedEvent ("1620920021","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev321","Ev322",theAuditEventData);
  acceptOrderedEvent ("1620920022","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev322","Ev323",theAuditEventData);
  acceptOrderedEvent ("1620920023","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev323","Ev324",theAuditEventData);
  acceptOrderedEvent ("1620920024","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev324","Ev325",theAuditEventData);
  acceptOrderedEvent ("1620920025","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev325","Ev326",theAuditEventData);
  acceptOrderedEvent ("1620920026","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev326","Ev327",theAuditEventData);
  acceptOrderedEvent ("1620920027","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev327","Ev328",theAuditEventData);
  acceptOrderedEvent ("1620920028","Test-0001","LB","Job_LoopBreak_1","LoopWithBreakJob","Ev328","Ev329",theAuditEventData);
  acceptOrderedEvent ("1620920029","Test-0001","LC","Job_LoopBreak_1","LoopWithBreakJob","Ev329","Ev330",theAuditEventData);
  acceptOrderedEvent ("1620920030","Test-0001","LD","Job_LoopBreak_1","LoopWithBreakJob","Ev330","Ev331",theAuditEventData);
  acceptOrderedEvent ("1620920031","Test-0001","LE","Job_LoopBreak_1","LoopWithBreakJob","Ev331","Ev332",theAuditEventData);

  //
  Test::service_event_queue();
  if (Test::get_scheduled_timers ())'length /= 0 then
    Test::fire_scheduled_timers();
  end if; 
  theJobs := find Job ();
  theSequences := theJobs -> R10;
  theAuditEvents := theSequences -> R11;
  //
  Assertions::assertTrue(theJobs'length = 1, "Wrong number of jobs created: " & (theJobs'length)'image);
  Assertions::assertTrue(theSequences'length = 1, "Wrong number of sequences created: " & (theSequences'length)'image);
  Assertions::assertTrue(theAuditEvents'length = 32, "Wrong number of audit events created: " & (theAuditEvents'length)'image);
  for theJob in theJobs loop
    Assertions::assertTrue(theJob.jobCompleted, "Job is incomplete: " & theJob.jobID);
    Assertions::assertTrue(theJob.sequencingFailed = false, "Sequencing has failed: " & theJob.jobID);
  end loop;  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

