//! ACTIVITY BEGIN. '6b70143c-4453-444b-ba90-30c845454012' DO NOT EDIT THIS LINE.
private service SequenceProcessor::registerCommandLineArgs () is
logMessage : string;

begin
	
	logMessage := "SequenceProcessor::registerCommandLineArgs";
	Logger::log(Logger::Information, "SequenceProcessor", logMessage);
	
	// The domain needs to be started with the command line argument -source
	// that specifies where to find the files to be processed and -output that
	// specifies where to put the output files
	CommandLine::register_value("-source", "The directory for the PLUS files", CommandLine::Required, "source", CommandLine::Required, CommandLine::Single);
	CommandLine::register_value("-output", "The directory for the generated JSON files", CommandLine::Required, "output", CommandLine::Required, CommandLine::Single);

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '362d51b6-303b-45c9-ac72-0c3f301389e2' DO NOT EDIT THIS LINE.
private service SequenceProcessor::populateDomain () is
logMessage : string;
processorSpec : instance of ProcessorSpec;
dataDirectory : string;
eventControlType : instance of EventControlType;

begin
	
	logMessage := "SequenceProcessor::populateDomain";
	Logger::log(Logger::Information, "SequenceProcessor", logMessage);
	
	// create the processor spec
    dataDirectory := CommandLine::get_option_value("-source");
	processorSpec := create unique ProcessorSpec(dataDirectory => dataDirectory, Current_State => Created);
	// create the output directory
	processorSpec.outputDirectory := CommandLine::get_option_value("-output");
	Filesystem::create_directory(Filesystem::filename(processorSpec.outputDirectory));
	generate ProcessorSpec.locateFiles() to processorSpec;
	eventControlType := create EventControlType(controlType => "alt");
	eventControlType := create EventControlType(controlType => "else");
	eventControlType := create EventControlType(controlType => "endalt");
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

