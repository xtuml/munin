//! ACTIVITY BEGIN. '884547c9-1bde-458d-b175-2a7a16372d44' DO NOT EDIT THIS LINE.
public service SequenceProcessor::fileVerified ( jobId : in integer,
                                                fileValid : in boolean,
                                                failureReason : in string ) is
logMessage : string;
sequenceFile : instance of SequenceFile;
begin
	
	logMessage := "SequenceProcessor::fileVerified";
	Logger::log(Logger::Information, "SequenceProcessor", logMessage);
	
	sequenceFile := find_one SequenceFile(jobId = jobId);
	if sequenceFile /= null then
		if fileValid = true then
			generate SequenceFile.parseComplete() to sequenceFile;
		else
			generate SequenceFile.invalidFileIndentified(failureReason) to sequenceFile;
		end if;
	else
		// failed as invalid job id supplied
		logMessage := "SequenceProcessor::eventData - failed, failureReason = " & failureReason;
		Logger::log(Logger::Information, "SequenceProcessor", logMessage);
		raise PlusProcessorEnd;
	end if;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '594002ed-8e1e-4233-acd9-116748534405' DO NOT EDIT THIS LINE.
public service SequenceProcessor::jobAndApps ( jobId : in integer,
                                              jobName : in string,
                                              applications : in sequence of string ) is
logMessage : string;
sequenceFile : instance of SequenceFile;
application : instance of SourceApplication;
begin
	
	logMessage := "SequenceProcessor::jobAndApps";
	Logger::log(Logger::Information, "SequenceProcessor", logMessage);
	sequenceFile := find_one SequenceFile(jobId = jobId);
	if sequenceFile /= null then
		sequenceFile.jobName := jobName;
		for applicationName in applications loop
			application := find_one SourceApplication(applicationName = applicationName and jobId = jobId);
			if application = null then
				application := create SourceApplication(applicationName => applicationName, jobId => jobId);
				link sequenceFile R1 application;
			end if;
		end loop;
		generate SequenceFile.addEvent() to sequenceFile;
	else
		logMessage := "SequenceProcessor::jobAndApps - failed to find job, jobId = " & jobId'image;
		Logger::log(Logger::Information, "SequenceProcessor", logMessage);
		raise PlusProcessorEnd;
	end if;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'b164136b-d001-4d30-b017-7483048f7f2e' DO NOT EDIT THIS LINE.
public service SequenceProcessor::eventData ( statementType : in string,
                                             sequenceName : in string,
                                             applicationName : in string,
                                             controlType : in string,
                                             eventName : in string,
                                             isStartEvent : in boolean,
                                             isEndEvent : in boolean,
                                             occurrenceId : in integer,
                                             jobId : in integer,
                                             allStatementsProcessed : in boolean ) is
logMessage : string;
sequenceFile : instance of SequenceFile;
sourceApplication : instance of SourceApplication;
eventControlType : instance of EventControlType;
currentEvent : instance of Event;
eventControl : instance of EventControl;
nestedControl : instance of EventControl;
newEvent : instance of Event;
sequencedEventItem : instance of SequencedEventItem;
valid : boolean := true;
failureReason : string;
jobSequence : instance of Sequence;

begin
	
	logMessage := "SequenceProcessor::eventData";
	Logger::log(Logger::Information, "SequenceProcessor", logMessage);
	
	sequenceFile := find_one SequenceFile(jobId = jobId);
	if sequenceFile /= null then
		if statementType = "CONTROL" then
			eventControlType := find_one EventControlType(controlType = controlType);
			if eventControlType /= null then
				eventControl := create unique EventControl(); 
				currentEvent := sequenceFile -> R7.Event;
				link eventControl R5 eventControlType;
				if eventControl.controlType = "alt" then
					link eventControl R8 currentEvent;
					// check if there is already a current event control
					if sequenceFile -> R9.EventControl /= null then
						// we are staring a nested control so link back to the current control
						link eventControl R10.hasPrevious.EventControl (sequenceFile -> R9.EventControl);
						unlink sequenceFile R9;
					end if;
					link sequenceFile R9 eventControl;
				elsif eventControl.controlType = "else" then
					link eventControl R8 (sequenceFile -> R9.EventControl -> R8.Event);
					link eventControl R10.hasPrevious.EventControl (sequenceFile -> R9.EventControl);
					unlink sequenceFile R9;
					link sequenceFile R9 eventControl;
				elsif eventControl.controlType = "endalt" then
					nestedControl := sequenceFile -> R9.EventControl -> R10.hasPrevious.EventControl;
					unlink sequenceFile R9;
					if nestedControl /= null then
						if nestedControl.controlType = "else" then
							nestedControl := nestedControl -> R10.hasPrevious.EventControl;
						end if;
						// this is the end of the alternative so check if we are embedded and if so link in the outer control
						if nestedControl -> R10.hasPrevious.EventControl /= null then
							link sequenceFile R9 nestedControl;
						end if;
					end if;
				end if;
			else
				// failed to find control type;
				valid := false;
				failureReason := "Undefined control type, controlType = " & controlType;
			end if;
		elsif statementType = "SEQUENCE" then
			sequenceFile.currentSequenceName := sequenceName;
			jobSequence := find_one Sequence(sequenceName = sequenceName and jobId = jobId);
			if jobSequence = null then
				jobSequence := create Sequence(sequenceName => sequenceName, jobId => jobId);
				link jobSequence R12 sequenceFile;
			end if;
		elsif statementType = "EVENT" then
			sourceApplication := find_one SourceApplication(applicationName = applicationName);
			if sourceApplication /= null then
				newEvent := create unique Event(eventName => eventName, sequenceName => sequenceFile.currentSequenceName, 
					                            occurrenceId => occurrenceId, isStartEvent => isStartEvent, isEndEvent => isEndEvent);
				link sequenceFile R11 newEvent;
				link newEvent R2 sourceApplication;
				currentEvent := sequenceFile -> R7.Event;
				if currentEvent /= null then
					if currentEvent.isEndEvent = false then
						sequencedEventItem := create SequencedEventItem(previous_eventId => currentEvent.eventId, eventId => newEvent.eventId);
						link newEvent R6.follows currentEvent using sequencedEventItem;
					end if;
					unlink currentEvent R7;
				end if;
				link newEvent R7 sequenceFile;
				eventControl := sequenceFile -> R9.EventControl;
				if eventControl /= null then 
					if eventControl.controlType = "alt" then
						link newEvent R4 eventControl;
					elsif eventControl.controlType = "else" then
						currentEvent := eventControl -> R8.Event;
						// if this control does not have any constrained events then we need to link in the previous event before the control
						if (eventControl -> R4.Event)'length = 0 then
							sequencedEventItem := create SequencedEventItem(previous_eventId => currentEvent.eventId, eventId => newEvent.eventId);
							link newEvent R6.follows currentEvent using sequencedEventItem;						
						end if;
						link newEvent R4 eventControl;
					end if;
				end if;
			else
				// failed to find source application
				valid := false;
				failureReason := "Unknown application, application = " & applicationName;
			end if;
		end if;
	else
		// failed as invalid job id supplied
		valid := false;
		failureReason := "Unknown job, jobId = " & jobId'image;
	end if;
	
	if valid = true then
		if allStatementsProcessed = false then
			generate SequenceFile.addEvent() to sequenceFile;
		else
			// verify that each sequence has a start and an end defined
			for jobSequence in sequenceFile -> R12.Sequence loop
				if find_one Event(sequenceName = jobSequence.sequenceName and isStartEvent = true) = null then
					valid := false;
					failureReason := "Failed to find start event for sequence " & jobSequence.sequenceName;
					exit;
				end if;
				if find_one Event(sequenceName = jobSequence.sequenceName and isEndEvent = true) = null then
					valid := false;
					failureReason := "Failed to find end event for sequence " & jobSequence.sequenceName;
					exit;
				end if;
			end loop;
			if valid = true then
				generate SequenceFile.allEventsAdded() to sequenceFile;
			else
				logMessage := "SequenceProcessor::eventData - failed, failureReason = Missing" & failureReason;
				Logger::log(Logger::Information, "SequenceProcessor", logMessage);
				raise PlusProcessorEnd;			
			end if;
		end if;
	else
		logMessage := "SequenceProcessor::eventData - failed, failureReason = " & failureReason;
		Logger::log(Logger::Information, "SequenceProcessor", logMessage);
		raise PlusProcessorEnd;
	end if;
	
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

