//! ACTIVITY BEGIN. 'e7d4fa65-d657-4f04-bb02-f970353f2293' '28f83715-dae3-41dd-8741-7f6d8b345c1e' DO NOT EDIT THIS LINE.
state SequenceProcessor::SequenceFile.Created () is
begin
  null;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'e7d4fa65-d657-4f04-bb02-f970353f2293' '2570ce19-5223-4e53-9c97-1cd629435a1a' DO NOT EDIT THIS LINE.
state SequenceProcessor::SequenceFile.ParsedFile () is
logMessage : string;

begin
	
	logMessage := "SequenceProcessor::SequenceFile.ParsedFile";
	Logger::log(Logger::Information, "SequenceProcessor", logMessage);
	
	StatementParser~>getJobAndApps(this.jobId);
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'e7d4fa65-d657-4f04-bb02-f970353f2293' 'a134346d-d9ed-4543-8977-b75533ff249b' DO NOT EDIT THIS LINE.
state SequenceProcessor::SequenceFile.FileProcessingFailed ( failureReason : in string ) is
logMessage : string; 

begin

	logMessage := "SequenceProcessor::eventData - failed, failureReason = " & failureReason;
	Logger::log(Logger::Information, "SequenceProcessor", logMessage);
	raise PlusProcessorEnd;

end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'e7d4fa65-d657-4f04-bb02-f970353f2293' '957e209c-18a2-4060-9e75-c393d658c4fb' DO NOT EDIT THIS LINE.
state SequenceProcessor::SequenceFile.EventAddedToSpec () is
logMessage : string;

begin
	
	logMessage := "SequenceProcessor::SequenceFile.ParsedFile";
	Logger::log(Logger::Information, "SequenceProcessor", logMessage);
	
	StatementParser~>getNextStatement(this.jobId);
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'e7d4fa65-d657-4f04-bb02-f970353f2293' 'a7ee88b0-db2d-4b13-8d12-3d879ac41bd1' DO NOT EDIT THIS LINE.
state SequenceProcessor::SequenceFile.ParsingFile () is
logMessage : string;
plusStatement : string;

begin
	
	logMessage := "SequenceProcessor::SequenceFile.ParsingFile";
	Logger::log(Logger::Information, "SequenceProcessor", logMessage);
	
	plusStatement :=  Filesystem::read_file(Filesystem::filename(this.fileName));
	StatementParser~>validateStatements(this.jobId, plusStatement);
	
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'e7d4fa65-d657-4f04-bb02-f970353f2293' '1ee89ad0-7c3d-489e-9c6c-ed076379f316' DO NOT EDIT THIS LINE.
state SequenceProcessor::SequenceFile.JobAvailable () is
logMessage : string;
sourceApplication : instance of SourceApplication;
jobDefElement : JSON::JSONElement;
jobDefObjectJSON : JSON::JSONObject;
jobDefObjJSON : JSON::JSONData;
eventDefElement : JSON::JSONElement;
eventDefObjectJSON : JSON::JSONObject;
eventsArrayJSON : JSON::JSONArray;
prevEventDefElement : JSON::JSONElement;
prevEventDefObjectJSON : JSON::JSONObject;
prevEventsArrayJSON : JSON::JSONArray;
jobDefStr : string;
events : sequence of instance of Event;
emptyArrayJSON : JSON::JSONArray;
emptyObjectJSON : JSON::JSONObject;
processorSpec : instance of ProcessorSpec;
fileName : Filesystem::filename;

begin
	
	logMessage := "SequenceProcessor::SequenceFile.JobAvailable";
	Logger::log(Logger::Information, "SequenceProcessor", logMessage);
	
	// create the json data for the job			
	// for each event locate any event data files
	events := this -> R11.Event ordered_by (eventId);
	for jobEvent in events loop
		
		eventDefObjectJSON := emptyObjectJSON;
		// build up the array of previous events
		prevEventsArrayJSON := emptyArrayJSON;
		for prevEvent in jobEvent -> R6.follows.Event loop
			prevEventDefObjectJSON := emptyObjectJSON;
			prevEventDefElement := JSON::to_json(prevEvent.eventName);
			prevEventDefObjectJSON["PreviousEventName"] := prevEventDefElement;			
			prevEventDefElement := JSON::to_json(prevEvent.occurrenceId);
			prevEventDefObjectJSON["PreviousOccurrenceId"] := prevEventDefElement;
			prevEventsArrayJSON := prevEventsArrayJSON & JSON::to_json(prevEventDefObjectJSON);
		end loop;


		eventDefElement := JSON::to_json(jobEvent.eventName);
		eventDefObjectJSON["EventName"] := eventDefElement;
		eventDefElement := JSON::to_json(jobEvent.occurrenceId);
		eventDefObjectJSON["OccurrenceId"] := eventDefElement;
		sourceApplication := jobEvent -> R2.SourceApplication;
		eventDefElement := JSON::to_json(sourceApplication.applicationName);
		eventDefObjectJSON["Application"] := eventDefElement;
		eventDefElement := JSON::to_json(jobEvent.sequenceName);
		eventDefObjectJSON["SequenceName"] := eventDefElement;
		
		if jobEvent.isStartEvent = true then
			eventDefElement := JSON::to_json(jobEvent.isStartEvent);
			eventDefObjectJSON["SequenceStart"] := eventDefElement;
		end if;
		if jobEvent.isEndEvent = true then
			eventDefElement := JSON::to_json(jobEvent.isEndEvent);
			eventDefObjectJSON["SequenceEnd"] := eventDefElement;
		end if;
		
		if prevEventsArrayJSON'length > 0 then
			eventDefElement := JSON::to_json(prevEventsArrayJSON);
			eventDefObjectJSON["PreviousEvents"] := eventDefElement;
		end if;
		
		eventsArrayJSON := eventsArrayJSON & JSON::to_json(eventDefObjectJSON);

	end loop;
	
	jobDefElement := JSON::to_json(eventsArrayJSON);
	jobDefObjectJSON["Events"] := jobDefElement;
	jobDefElement := JSON::to_json(this.jobName);
	jobDefObjectJSON["JobDefinitionName"] := jobDefElement;
	
	this.jobDefinitionJSON := JSON::dump(jobDefObjectJSON);
	
	// now write the json to a file in the output directory
	processorSpec := find_one ProcessorSpec();
	fileName := Filesystem::filename(processorSpec.outputDirectory & "/" & this.jobName & ".json");
	Filesystem::write_file(fileName, this.jobDefinitionJSON);
	
	// locate any event data file and copy it to the output directory
	fileName := Filesystem::filename(processorSpec.dataDirectory & "/" & this.jobName & "_event_data.json");
	if Filesystem::file_exists(fileName) then
		this.eventDefinitionFile := this.jobName & "_event_data.json";
		Filesystem::copy_file(fileName, Filesystem::filename(processorSpec.outputDirectory & "/" & this.eventDefinitionFile));
	end if;
	this.loadComplete := true;
	generate ProcessorSpec.loadFile() to processorSpec;

end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

